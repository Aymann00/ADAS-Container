
NRF_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800549c  0800549c  0001549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005580  08005580  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08005580  08005580  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005580  08005580  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08005588  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001218  20000038  080055c0  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  080055c0  00021250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a7e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000307b  00000000  00000000  00033b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00036ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd4  00000000  00000000  00038000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000198bc  00000000  00000000  00038fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a06  00000000  00000000  00052890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000948a6  00000000  00000000  00068296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054ec  00000000  00000000  000fcb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00102028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000038 	.word	0x20000038
 800012c:	00000000 	.word	0x00000000
 8000130:	08005484 	.word	0x08005484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000003c 	.word	0x2000003c
 800014c:	08005484 	.word	0x08005484

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2246      	movs	r2, #70	; 0x46
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000054 	.word	0x20000054
 800017c:	200000a8 	.word	0x200000a8

08000180 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09c      	sub	sp, #112	; 0x70
 8000184:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000186:	f001 fa95 	bl	80016b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800018a:	f000 f865 	bl	8000258 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800018e:	f000 f927 	bl	80003e0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000192:	f000 f907 	bl	80003a4 <MX_DMA_Init>
	MX_SPI1_Init();
 8000196:	f000 f8a5 	bl	80002e4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800019a:	f000 f8d9 	bl	8000350 <MX_USART1_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Startup_Task */
	osThreadDef(Startup_Task, Init_Task, osPriorityRealtime, 0, 128);
 800019e:	4b26      	ldr	r3, [pc, #152]	; (8000238 <main+0xb8>)
 80001a0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80001a4:	461d      	mov	r5, r3
 80001a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Startup_TaskHandle = osThreadCreate(osThread(Startup_Task), NULL);
 80001b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f003 fecf 	bl	8003f5c <osThreadCreate>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a1e      	ldr	r2, [pc, #120]	; (800023c <main+0xbc>)
 80001c2:	6013      	str	r3, [r2, #0]

	/* definition and creation of Calc_Dis */
	osThreadDef(Calc_Dis, Distance_Calc, osPriorityAboveNormal, 0, 70);
 80001c4:	4b1e      	ldr	r3, [pc, #120]	; (8000240 <main+0xc0>)
 80001c6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80001ca:	461d      	mov	r5, r3
 80001cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Calc_DisHandle = osThreadCreate(osThread(Calc_Dis), NULL);
 80001d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f003 febc 	bl	8003f5c <osThreadCreate>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4a17      	ldr	r2, [pc, #92]	; (8000244 <main+0xc4>)
 80001e8:	6013      	str	r3, [r2, #0]

	/* definition and creation of Local */
	osThreadDef(Local, Localization, osPriorityRealtime, 0, 70);
 80001ea:	4b17      	ldr	r3, [pc, #92]	; (8000248 <main+0xc8>)
 80001ec:	f107 041c 	add.w	r4, r7, #28
 80001f0:	461d      	mov	r5, r3
 80001f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LocalHandle = osThreadCreate(osThread(Local), NULL);
 80001fe:	f107 031c 	add.w	r3, r7, #28
 8000202:	2100      	movs	r1, #0
 8000204:	4618      	mov	r0, r3
 8000206:	f003 fea9 	bl	8003f5c <osThreadCreate>
 800020a:	4603      	mov	r3, r0
 800020c:	4a0f      	ldr	r2, [pc, #60]	; (800024c <main+0xcc>)
 800020e:	6013      	str	r3, [r2, #0]

	/* definition and creation of Check_Algo */
	osThreadDef(Check_Algo, Algo_Check, osPriorityAboveNormal, 0, 70);
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <main+0xd0>)
 8000212:	463c      	mov	r4, r7
 8000214:	461d      	mov	r5, r3
 8000216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800021a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800021e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Check_AlgoHandle = osThreadCreate(osThread(Check_Algo), NULL);
 8000222:	463b      	mov	r3, r7
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fe98 	bl	8003f5c <osThreadCreate>
 800022c:	4603      	mov	r3, r0
 800022e:	4a09      	ldr	r2, [pc, #36]	; (8000254 <main+0xd4>)
 8000230:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000232:	f003 fe8c 	bl	8003f4e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000236:	e7fe      	b.n	8000236 <main+0xb6>
 8000238:	080054ac 	.word	0x080054ac
 800023c:	200002a4 	.word	0x200002a4
 8000240:	080054d4 	.word	0x080054d4
 8000244:	200002a8 	.word	0x200002a8
 8000248:	080054f8 	.word	0x080054f8
 800024c:	200002ac 	.word	0x200002ac
 8000250:	08005520 	.word	0x08005520
 8000254:	200002b0 	.word	0x200002b0

08000258 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b090      	sub	sp, #64	; 0x40
 800025c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f005 f8d2 	bl	8005410 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028c:	2302      	movs	r3, #2
 800028e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000290:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000296:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fedf 	bl	8002064 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80002ac:	f000 fa3e 	bl	800072c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 f94c 	bl	8002568 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x82>
	{
		Error_Handler();
 80002d6:	f000 fa29 	bl	800072c <Error_Handler>
	}
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	; 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80002e8:	4b17      	ldr	r3, [pc, #92]	; (8000348 <MX_SPI1_Init+0x64>)
 80002ea:	4a18      	ldr	r2, [pc, #96]	; (800034c <MX_SPI1_Init+0x68>)
 80002ec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80002ee:	4b16      	ldr	r3, [pc, #88]	; (8000348 <MX_SPI1_Init+0x64>)
 80002f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002f4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002f6:	4b14      	ldr	r3, [pc, #80]	; (8000348 <MX_SPI1_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <MX_SPI1_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <MX_SPI1_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000308:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <MX_SPI1_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_SPI1_Init+0x64>)
 8000310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000314:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <MX_SPI1_Init+0x64>)
 8000318:	2220      	movs	r2, #32
 800031a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <MX_SPI1_Init+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000322:	4b09      	ldr	r3, [pc, #36]	; (8000348 <MX_SPI1_Init+0x64>)
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <MX_SPI1_Init+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <MX_SPI1_Init+0x64>)
 8000330:	220a      	movs	r2, #10
 8000332:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <MX_SPI1_Init+0x64>)
 8000336:	f002 fad5 	bl	80028e4 <HAL_SPI_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8000340:	f000 f9f4 	bl	800072c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	200001c0 	.word	0x200001c0
 800034c:	40013000 	.word	0x40013000

08000350 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART1_UART_Init+0x4c>)
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_USART1_UART_Init+0x50>)
 8000358:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_USART1_UART_Init+0x4c>)
 800035c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000360:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART1_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART1_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART1_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART1_UART_Init+0x4c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART1_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART1_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART1_UART_Init+0x4c>)
 8000388:	f003 fa7e 	bl	8003888 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000392:	f000 f9cb 	bl	800072c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000218 	.word	0x20000218
 80003a0:	40013800 	.word	0x40013800

080003a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_DMA_Init+0x38>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <MX_DMA_Init+0x38>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_DMA_Init+0x38>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2105      	movs	r1, #5
 80003c6:	200f      	movs	r0, #15
 80003c8:	f001 fa7f 	bl	80018ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003cc:	200f      	movs	r0, #15
 80003ce:	f001 fa98 	bl	8001902 <HAL_NVIC_EnableIRQ>

}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <MX_GPIO_Init+0x9c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a20      	ldr	r2, [pc, #128]	; (800047c <MX_GPIO_Init+0x9c>)
 80003fa:	f043 0320 	orr.w	r3, r3, #32
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_GPIO_Init+0x9c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0320 	and.w	r3, r3, #32
 8000408:	607b      	str	r3, [r7, #4]
 800040a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_GPIO_Init+0x9c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a1a      	ldr	r2, [pc, #104]	; (800047c <MX_GPIO_Init+0x9c>)
 8000412:	f043 0304 	orr.w	r3, r3, #4
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_GPIO_Init+0x9c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0304 	and.w	r3, r3, #4
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2118      	movs	r1, #24
 8000428:	4815      	ldr	r0, [pc, #84]	; (8000480 <MX_GPIO_Init+0xa0>)
 800042a:	f001 fdeb 	bl	8002004 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800042e:	2304      	movs	r3, #4
 8000430:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_GPIO_Init+0xa4>)
 8000434:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	4619      	mov	r1, r3
 8000440:	480f      	ldr	r0, [pc, #60]	; (8000480 <MX_GPIO_Init+0xa0>)
 8000442:	f001 fc5b 	bl	8001cfc <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
	GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 8000446:	2318      	movs	r3, #24
 8000448:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2302      	movs	r3, #2
 8000454:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	4619      	mov	r1, r3
 800045c:	4808      	ldr	r0, [pc, #32]	; (8000480 <MX_GPIO_Init+0xa0>)
 800045e:	f001 fc4d 	bl	8001cfc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2105      	movs	r1, #5
 8000466:	2008      	movs	r0, #8
 8000468:	f001 fa2f 	bl	80018ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800046c:	2008      	movs	r0, #8
 800046e:	f001 fa48 	bl	8001902 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000472:	bf00      	nop
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800
 8000484:	10210000 	.word	0x10210000

08000488 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b094      	sub	sp, #80	; 0x50
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000492:	88fb      	ldrh	r3, [r7, #6]
 8000494:	2b04      	cmp	r3, #4
 8000496:	f040 8086 	bne.w	80005a6 <HAL_GPIO_EXTI_Callback+0x11e>
	{
		uint16_t Received_Data[32] = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2240      	movs	r2, #64	; 0x40
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f004 ffb4 	bl	8005410 <memset>
		NRF24_read(Received_Data, 32);
 80004a8:	f107 030c 	add.w	r3, r7, #12
 80004ac:	2120      	movs	r1, #32
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 fde0 	bl	8001074 <NRF24_read>
		switch(Received_Data[1]){
 80004b4:	89fb      	ldrh	r3, [r7, #14]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d174      	bne.n	80005a4 <HAL_GPIO_EXTI_Callback+0x11c>
		case LOCALIZATION_OPERATION_ID:
			bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 80004ba:	89fb      	ldrh	r3, [r7, #14]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b3c      	ldr	r3, [pc, #240]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	3b07      	subs	r3, #7
					(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 80004c4:	429a      	cmp	r2, r3
 80004c6:	db06      	blt.n	80004d6 <HAL_GPIO_EXTI_Callback+0x4e>
 80004c8:	89fb      	ldrh	r3, [r7, #14]
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	3307      	adds	r3, #7
			bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 80004d2:	429a      	cmp	r2, r3
 80004d4:	dd0d      	ble.n	80004f2 <HAL_GPIO_EXTI_Callback+0x6a>
					((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 80004d6:	8b3b      	ldrh	r3, [r7, #24]
 80004d8:	461a      	mov	r2, r3
 80004da:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	3b07      	subs	r3, #7
					(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 80004e0:	429a      	cmp	r2, r3
 80004e2:	db08      	blt.n	80004f6 <HAL_GPIO_EXTI_Callback+0x6e>
							(Received_Data[BACK_LEFT] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 80004e4:	8b7b      	ldrh	r3, [r7, #26]
 80004e6:	461a      	mov	r2, r3
 80004e8:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	3307      	adds	r3, #7
					((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dc01      	bgt.n	80004f6 <HAL_GPIO_EXTI_Callback+0x6e>
					(Received_Data[BACK] <= Obstcales_Detection[FRONT] + 7)) ||
 80004f2:	2301      	movs	r3, #1
 80004f4:	e000      	b.n	80004f8 <HAL_GPIO_EXTI_Callback+0x70>
 80004f6:	2300      	movs	r3, #0
			bool Is_Front = ((Received_Data[BACK] >= Obstcales_Detection[FRONT] - 7) &&
 80004f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80004fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 8000508:	89bb      	ldrh	r3, [r7, #12]
 800050a:	461a      	mov	r2, r3
 800050c:	4b28      	ldr	r3, [pc, #160]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	3b07      	subs	r3, #7
					(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 8000512:	429a      	cmp	r2, r3
 8000514:	db06      	blt.n	8000524 <HAL_GPIO_EXTI_Callback+0x9c>
 8000516:	89bb      	ldrh	r3, [r7, #12]
 8000518:	461a      	mov	r2, r3
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	3307      	adds	r3, #7
			bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 8000520:	429a      	cmp	r2, r3
 8000522:	dd0d      	ble.n	8000540 <HAL_GPIO_EXTI_Callback+0xb8>
							((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000524:	8b3b      	ldrh	r3, [r7, #24]
 8000526:	461a      	mov	r2, r3
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	3b07      	subs	r3, #7
					(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 800052e:	429a      	cmp	r2, r3
 8000530:	db08      	blt.n	8000544 <HAL_GPIO_EXTI_Callback+0xbc>
									(Received_Data[BACK_LEFT] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000532:	8b7b      	ldrh	r3, [r7, #26]
 8000534:	461a      	mov	r2, r3
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	3307      	adds	r3, #7
							((Received_Data[BACK_RIGHT] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 800053c:	429a      	cmp	r2, r3
 800053e:	dc01      	bgt.n	8000544 <HAL_GPIO_EXTI_Callback+0xbc>
					(Received_Data[FRONT] <= Obstcales_Detection[BACK] + 7)) ||
 8000540:	2301      	movs	r3, #1
 8000542:	e000      	b.n	8000546 <HAL_GPIO_EXTI_Callback+0xbe>
 8000544:	2300      	movs	r3, #0
			bool Is_Back = ((Received_Data[FRONT] >= Obstcales_Detection[BACK] - 7) &&
 8000546:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800054a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if(Is_Front){
 8000556:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00b      	beq.n	8000576 <HAL_GPIO_EXTI_Callback+0xee>
				/*
				 * search if the car is already existed in the Frontcars Array
				 * if yes => 	do nothing
				 * if no  => 	put the car in the Frontcars array
				 * */
				Front_Cars_IDs[Front_Cars_IDs_Iterator++] = Received_Data[0];
 800055e:	89b9      	ldrh	r1, [r7, #12]
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	b2d0      	uxtb	r0, r2
 8000568:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <HAL_GPIO_EXTI_Callback+0x12c>)
 800056a:	7010      	strb	r0, [r2, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	b2c9      	uxtb	r1, r1
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <HAL_GPIO_EXTI_Callback+0x130>)
 8000572:	5499      	strb	r1, [r3, r2]
				Undefined_Cars_IDs[Undefined_Cars_IDs_Iterator] = Received_Data[0];
			}
		case DIRECTION_OPERATION_ID :

		default:
			break;
 8000574:	e016      	b.n	80005a4 <HAL_GPIO_EXTI_Callback+0x11c>
			else if(Is_Back){
 8000576:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00b      	beq.n	8000596 <HAL_GPIO_EXTI_Callback+0x10e>
				Back_Cars_IDs[Back_Cars_IDs_Iterator++] = Received_Data[0];
 800057e:	89b9      	ldrh	r1, [r7, #12]
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_GPIO_EXTI_Callback+0x134>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	b2d0      	uxtb	r0, r2
 8000588:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <HAL_GPIO_EXTI_Callback+0x134>)
 800058a:	7010      	strb	r0, [r2, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	b2c9      	uxtb	r1, r1
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000592:	5499      	strb	r1, [r3, r2]
			break;
 8000594:	e006      	b.n	80005a4 <HAL_GPIO_EXTI_Callback+0x11c>
				Undefined_Cars_IDs[Undefined_Cars_IDs_Iterator] = Received_Data[0];
 8000596:	89b9      	ldrh	r1, [r7, #12]
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_GPIO_EXTI_Callback+0x13c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	b2c9      	uxtb	r1, r1
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_GPIO_EXTI_Callback+0x140>)
 80005a2:	5499      	strb	r1, [r3, r2]
			break;
 80005a4:	bf00      	nop
		}

	}
}
 80005a6:	bf00      	nop
 80005a8:	3750      	adds	r7, #80	; 0x50
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000041c 	.word	0x2000041c
 80005b4:	2000042e 	.word	0x2000042e
 80005b8:	20000424 	.word	0x20000424
 80005bc:	2000043a 	.word	0x2000043a
 80005c0:	20000430 	.word	0x20000430
 80005c4:	20000446 	.word	0x20000446
 80005c8:	2000043c 	.word	0x2000043c

080005cc <Init_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void const * argument)
{
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b095      	sub	sp, #84	; 0x54
 80005d0:	af12      	add	r7, sp, #72	; 0x48
 80005d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	//Init DMA UART to Distances Buffer
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer, 360);
 80005d4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80005d8:	491b      	ldr	r1, [pc, #108]	; (8000648 <Init_Task+0x7c>)
 80005da:	481c      	ldr	r0, [pc, #112]	; (800064c <Init_Task+0x80>)
 80005dc:	f003 f9a4 	bl	8003928 <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	NRF24_begin(hspi1);
 80005e0:	4c1b      	ldr	r4, [pc, #108]	; (8000650 <Init_Task+0x84>)
 80005e2:	4668      	mov	r0, sp
 80005e4:	f104 0310 	add.w	r3, r4, #16
 80005e8:	2248      	movs	r2, #72	; 0x48
 80005ea:	4619      	mov	r1, r3
 80005ec:	f004 ff3c 	bl	8005468 <memcpy>
 80005f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80005f4:	f000 fbdc 	bl	8000db0 <NRF24_begin>
	NRF24_setAutoAck(true);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 fe9d 	bl	8001338 <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 80005fe:	2020      	movs	r0, #32
 8000600:	f000 fdfa 	bl	80011f8 <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 8000604:	f000 fe4e 	bl	80012a4 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 8000608:	f000 fe1e 	bl	8001248 <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <Init_Task+0x88>)
 800060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fd72 	bl	80010fc <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <Init_Task+0x88>)
 800061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061e:	4610      	mov	r0, r2
 8000620:	4619      	mov	r1, r3
 8000622:	f000 fd47 	bl	80010b4 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000626:	2220      	movs	r2, #32
 8000628:	490b      	ldr	r1, [pc, #44]	; (8000658 <Init_Task+0x8c>)
 800062a:	2001      	movs	r0, #1
 800062c:	f000 ffc3 	bl	80015b6 <NRF24_writeAckPayload>
	NRF24_startListening();
 8000630:	f000 fc9a 	bl	8000f68 <NRF24_startListening>


	osThreadTerminate(Startup_TaskHandle);
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <Init_Task+0x90>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fcdb 	bl	8003ff4 <osThreadTerminate>
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f003 fce4 	bl	800400c <osDelay>
 8000644:	e7fb      	b.n	800063e <Init_Task+0x72>
 8000646:	bf00      	nop
 8000648:	200002b4 	.word	0x200002b4
 800064c:	20000218 	.word	0x20000218
 8000650:	200001c0 	.word	0x200001c0
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008
 800065c:	200002a4 	.word	0x200002a4

08000660 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void const * argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Distance_Calc */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f003 fccf 	bl	800400c <osDelay>
 800066e:	e7fb      	b.n	8000668 <Distance_Calc+0x8>

08000670 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void const * argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000678:	2311      	movs	r3, #17
 800067a:	733b      	strb	r3, [r7, #12]
 800067c:	2301      	movs	r3, #1
 800067e:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[BACK],
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <Localization+0x58>)
 8000682:	781b      	ldrb	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000684:	73bb      	strb	r3, [r7, #14]
				Obstcales_Detection[FRONT],Obstcales_Detection[BACK],
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <Localization+0x58>)
 8000688:	785b      	ldrb	r3, [r3, #1]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 800068a:	73fb      	strb	r3, [r7, #15]
				Obstcales_Detection[RIGHT],Obstcales_Detection[LEFT],
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <Localization+0x58>)
 800068e:	789b      	ldrb	r3, [r3, #2]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000690:	743b      	strb	r3, [r7, #16]
				Obstcales_Detection[RIGHT],Obstcales_Detection[LEFT],
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <Localization+0x58>)
 8000694:	78db      	ldrb	r3, [r3, #3]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 8000696:	747b      	strb	r3, [r7, #17]
				Obstcales_Detection[FRONT_RIGHT],Obstcales_Detection[FRONT_LEFT],
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <Localization+0x58>)
 800069a:	791b      	ldrb	r3, [r3, #4]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 800069c:	74bb      	strb	r3, [r7, #18]
				Obstcales_Detection[FRONT_RIGHT],Obstcales_Detection[FRONT_LEFT],
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <Localization+0x58>)
 80006a0:	795b      	ldrb	r3, [r3, #5]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80006a2:	74fb      	strb	r3, [r7, #19]
				Obstcales_Detection[BACK_RIGHT],Obstcales_Detection[BACK_LEFT]
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <Localization+0x58>)
 80006a6:	799b      	ldrb	r3, [r3, #6]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80006a8:	753b      	strb	r3, [r7, #20]
				Obstcales_Detection[BACK_RIGHT],Obstcales_Detection[BACK_LEFT]
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <Localization+0x58>)
 80006ac:	79db      	ldrb	r3, [r3, #7]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80006ae:	757b      	strb	r3, [r7, #21]
		};
		NRF24_write(Localization_Frame, 10);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	210a      	movs	r1, #10
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fc88 	bl	8000fcc <NRF24_write>
		osDelay(3000);
 80006bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c0:	f003 fca4 	bl	800400c <osDelay>
	{
 80006c4:	e7d8      	b.n	8000678 <Localization+0x8>
 80006c6:	bf00      	nop
 80006c8:	2000041c 	.word	0x2000041c

080006cc <Algo_Check>:
#define Front_Threshold         100
/* USER CODE END Header_Algo_Check */


void Algo_Check(void const * argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]


	/* Infinite loop */
	for(;;)
	{
		uint16_t Direction_Frame[2] ={0};
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <Algo_Check+0x38>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b64      	cmp	r3, #100	; 0x64
 80006de:	d80b      	bhi.n	80006f8 <Algo_Check+0x2c>
		{
			NRF24_stopListening();
 80006e0:	f000 fc68 	bl	8000fb4 <NRF24_stopListening>
			Direction_Frame[0] = CAR_ID ;
 80006e4:	2311      	movs	r3, #17
 80006e6:	81bb      	strh	r3, [r7, #12]
			Direction_Frame[1] = DIRECTION_OPERATION_ID ;
 80006e8:	2302      	movs	r3, #2
 80006ea:	81fb      	strh	r3, [r7, #14]

			NRF24_write(Direction_Frame, 2) ;
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 fc6a 	bl	8000fcc <NRF24_write>





		osDelay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fc:	f003 fc86 	bl	800400c <osDelay>
	{
 8000700:	e7e8      	b.n	80006d4 <Algo_Check+0x8>
 8000702:	bf00      	nop
 8000704:	2000041c 	.word	0x2000041c

08000708 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800071a:	f000 ffe1 	bl	80016e0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40000800 	.word	0x40000800

0800072c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_MspInit+0x68>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_MspInit+0x68>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x68>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x68>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <HAL_MspInit+0x68>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x68>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	210f      	movs	r1, #15
 8000772:	f06f 0001 	mvn.w	r0, #1
 8000776:	f001 f8a8 	bl	80018ca <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x6c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x6c>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <HAL_SPI_MspInit+0x88>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d12f      	bne.n	8000828 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a19      	ldr	r2, [pc, #100]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_SPI_MspInit+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007f8:	23a0      	movs	r3, #160	; 0xa0
 80007fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	480b      	ldr	r0, [pc, #44]	; (8000838 <HAL_SPI_MspInit+0x90>)
 800080c:	f001 fa76 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <HAL_SPI_MspInit+0x90>)
 8000824:	f001 fa6a 	bl	8001cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013000 	.word	0x40013000
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <HAL_UART_MspInit+0xd8>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d157      	bne.n	800090c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <HAL_UART_MspInit+0xdc>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a2d      	ldr	r2, [pc, #180]	; (8000918 <HAL_UART_MspInit+0xdc>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <HAL_UART_MspInit+0xdc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <HAL_UART_MspInit+0xdc>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a27      	ldr	r2, [pc, #156]	; (8000918 <HAL_UART_MspInit+0xdc>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <HAL_UART_MspInit+0xdc>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800088c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000890:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	4619      	mov	r1, r3
 80008a0:	481e      	ldr	r0, [pc, #120]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008a2:	f001 fa2b 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <HAL_UART_MspInit+0xe0>)
 80008bc:	f001 fa1e 	bl	8001cfc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <HAL_UART_MspInit+0xe8>)
 80008c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008e6:	2220      	movs	r2, #32
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <HAL_UART_MspInit+0xe4>)
 80008f2:	f001 f815 	bl	8001920 <HAL_DMA_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80008fc:	f7ff ff16 	bl	800072c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_UART_MspInit+0xe4>)
 8000904:	63da      	str	r2, [r3, #60]	; 0x3c
 8000906:	4a06      	ldr	r2, [pc, #24]	; (8000920 <HAL_UART_MspInit+0xe4>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40013800 	.word	0x40013800
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	20000260 	.word	0x20000260
 8000924:	40020058 	.word	0x40020058

08000928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <HAL_InitTick+0xe8>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <HAL_InitTick+0xe8>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	61d3      	str	r3, [r2, #28]
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <HAL_InitTick+0xe8>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000956:	f107 0210 	add.w	r2, r7, #16
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ff71 	bl	8002848 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096c:	2b00      	cmp	r3, #0
 800096e:	d103      	bne.n	8000978 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000970:	f001 ff42 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8000974:	6378      	str	r0, [r7, #52]	; 0x34
 8000976:	e004      	b.n	8000982 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000978:	f001 ff3e 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 800097c:	4603      	mov	r3, r0
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000984:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <HAL_InitTick+0xec>)
 8000986:	fba2 2303 	umull	r2, r3, r2, r3
 800098a:	0c9b      	lsrs	r3, r3, #18
 800098c:	3b01      	subs	r3, #1
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_InitTick+0xf0>)
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <HAL_InitTick+0xf4>)
 8000994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <HAL_InitTick+0xf0>)
 8000998:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <HAL_InitTick+0xf0>)
 80009a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_InitTick+0xf0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_InitTick+0xf0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_InitTick+0xf0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009b6:	4818      	ldr	r0, [pc, #96]	; (8000a18 <HAL_InitTick+0xf0>)
 80009b8:	f002 fd1c 	bl	80033f4 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d11b      	bne.n	8000a02 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <HAL_InitTick+0xf0>)
 80009cc:	f002 fd6a 	bl	80034a4 <HAL_TIM_Base_Start_IT>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d111      	bne.n	8000a02 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009de:	201e      	movs	r0, #30
 80009e0:	f000 ff8f 	bl	8001902 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b0f      	cmp	r3, #15
 80009e8:	d808      	bhi.n	80009fc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009ea:	2200      	movs	r2, #0
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	201e      	movs	r0, #30
 80009f0:	f000 ff6b 	bl	80018ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_InitTick+0xf8>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	e002      	b.n	8000a02 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3738      	adds	r7, #56	; 0x38
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000448 	.word	0x20000448
 8000a1c:	40000800 	.word	0x40000800
 8000a20:	2000002c 	.word	0x2000002c

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a52:	2004      	movs	r0, #4
 8000a54:	f001 faee 	bl	8002034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <DMA1_Channel5_IRQHandler+0x10>)
 8000a62:	f001 f817 	bl	8001a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000260 	.word	0x20000260

08000a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM4_IRQHandler+0x10>)
 8000a76:	f002 fd67 	bl	8003548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000448 	.word	0x20000448

08000a84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a90:	f7ff fff8 	bl	8000a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a96:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a98:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000aac:	4c09      	ldr	r4, [pc, #36]	; (8000ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aba:	f004 fcb1 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000abe:	f7ff fb5f 	bl	8000180 <main>
  bx lr
 8000ac2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000acc:	08005588 	.word	0x08005588
  ldr r2, =_sbss
 8000ad0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000ad4:	20001250 	.word	0x20001250

08000ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_2_IRQHandler>
	...

08000adc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <NRF24_DelayMicroSeconds+0x38>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <NRF24_DelayMicroSeconds+0x3c>)
 8000aee:	fba2 2303 	umull	r2, r3, r2, r3
 8000af2:	0c9a      	lsrs	r2, r3, #18
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000afc:	bf00      	nop
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	60fa      	str	r2, [r7, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1fa      	bne.n	8000afe <NRF24_DelayMicroSeconds+0x22>
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20000028 	.word	0x20000028
 8000b18:	165e9f81 	.word	0x165e9f81

08000b1c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d008      	beq.n	8000b3c <NRF24_csn+0x20>
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <NRF24_csn+0x38>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <NRF24_csn+0x3c>)
 8000b30:	8811      	ldrh	r1, [r2, #0]
 8000b32:	2201      	movs	r2, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fa65 	bl	8002004 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000b3a:	e007      	b.n	8000b4c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <NRF24_csn+0x38>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <NRF24_csn+0x3c>)
 8000b42:	8811      	ldrh	r1, [r2, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fa5c 	bl	8002004 <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200004a0 	.word	0x200004a0
 8000b58:	200004a4 	.word	0x200004a4

08000b5c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d008      	beq.n	8000b7c <NRF24_ce+0x20>
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <NRF24_ce+0x38>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <NRF24_ce+0x3c>)
 8000b70:	8811      	ldrh	r1, [r2, #0]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4618      	mov	r0, r3
 8000b76:	f001 fa45 	bl	8002004 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000b7a:	e007      	b.n	8000b8c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <NRF24_ce+0x38>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <NRF24_ce+0x3c>)
 8000b82:	8811      	ldrh	r1, [r2, #0]
 8000b84:	2200      	movs	r2, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 fa3c 	bl	8002004 <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200004a0 	.word	0x200004a0
 8000b98:	200004a6 	.word	0x200004a6

08000b9c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff ffb8 	bl	8000b1c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000bb6:	f107 010c 	add.w	r1, r7, #12
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	480a      	ldr	r0, [pc, #40]	; (8000be8 <NRF24_read_register+0x4c>)
 8000bc0:	f001 ff14 	bl	80029ec <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	1c59      	adds	r1, r3, #1
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4806      	ldr	r0, [pc, #24]	; (8000be8 <NRF24_read_register+0x4c>)
 8000bd0:	f002 f84f 	bl	8002c72 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000bd4:	7b7b      	ldrb	r3, [r7, #13]
 8000bd6:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff ff9f 	bl	8000b1c <NRF24_csn>
	return retData;
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200004a8 	.word	0x200004a8

08000bec <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff ff8d 	bl	8000b1c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 031f 	and.w	r3, r3, #31
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c0c:	f107 010c 	add.w	r1, r7, #12
 8000c10:	2364      	movs	r3, #100	; 0x64
 8000c12:	2201      	movs	r2, #1
 8000c14:	4808      	ldr	r0, [pc, #32]	; (8000c38 <NRF24_read_registerN+0x4c>)
 8000c16:	f001 fee9 	bl	80029ec <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c1a:	79bb      	ldrb	r3, [r7, #6]
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	2364      	movs	r3, #100	; 0x64
 8000c20:	6839      	ldr	r1, [r7, #0]
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <NRF24_read_registerN+0x4c>)
 8000c24:	f002 f825 	bl	8002c72 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff ff77 	bl	8000b1c <NRF24_csn>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200004a8 	.word	0x200004a8

08000c3c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff ff65 	bl	8000b1c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f043 0320 	orr.w	r3, r3, #32
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000c60:	f107 010c 	add.w	r1, r7, #12
 8000c64:	2364      	movs	r3, #100	; 0x64
 8000c66:	2202      	movs	r2, #2
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <NRF24_write_register+0x40>)
 8000c6a:	f001 febf 	bl	80029ec <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff ff54 	bl	8000b1c <NRF24_csn>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200004a8 	.word	0x200004a8

08000c80 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff ff43 	bl	8000b1c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f043 0320 	orr.w	r3, r3, #32
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000ca0:	f107 010c 	add.w	r1, r7, #12
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <NRF24_write_registerN+0x4c>)
 8000caa:	f001 fe9f 	bl	80029ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <NRF24_write_registerN+0x4c>)
 8000cb8:	f001 fe98 	bl	80029ec <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff ff2d 	bl	8000b1c <NRF24_csn>
}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200004a8 	.word	0x200004a8

08000cd0 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff1d 	bl	8000b1c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000ce2:	23a0      	movs	r3, #160	; 0xa0
 8000ce4:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000ce6:	f107 010f 	add.w	r1, r7, #15
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	2201      	movs	r2, #1
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <NRF24_write_payload+0x40>)
 8000cf0:	f001 fe7c 	bl	80029ec <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <NRF24_write_payload+0x40>)
 8000cfe:	f001 fe75 	bl	80029ec <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff ff0a 	bl	8000b1c <NRF24_csn>
}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200004a8 	.word	0x200004a8

08000d14 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000d20:	f000 fa80 	bl	8001224 <NRF24_getPayloadSize>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d303      	bcc.n	8000d36 <NRF24_read_payload+0x22>
 8000d2e:	f000 fa79 	bl	8001224 <NRF24_getPayloadSize>
 8000d32:	4603      	mov	r3, r0
 8000d34:	e000      	b.n	8000d38 <NRF24_read_payload+0x24>
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff feee 	bl	8000b1c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000d40:	2361      	movs	r3, #97	; 0x61
 8000d42:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000d44:	f107 010e 	add.w	r1, r7, #14
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4808      	ldr	r0, [pc, #32]	; (8000d70 <NRF24_read_payload+0x5c>)
 8000d4e:	f001 fe4d 	bl	80029ec <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	2364      	movs	r3, #100	; 0x64
 8000d58:	6879      	ldr	r1, [r7, #4]
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <NRF24_read_payload+0x5c>)
 8000d5c:	f001 ff89 	bl	8002c72 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fedb 	bl	8000b1c <NRF24_csn>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200004a8 	.word	0x200004a8

08000d74 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d78:	21ff      	movs	r1, #255	; 0xff
 8000d7a:	20e1      	movs	r0, #225	; 0xe1
 8000d7c:	f7ff ff5e 	bl	8000c3c <NRF24_write_register>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	20e2      	movs	r0, #226	; 0xe2
 8000d8c:	f7ff ff56 	bl	8000c3c <NRF24_write_register>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000d9a:	2007      	movs	r0, #7
 8000d9c:	f7ff fefe 	bl	8000b9c <NRF24_read_register>
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000da4:	79fb      	ldrb	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 8000db0:	b084      	sub	sp, #16
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	f107 0c10 	add.w	ip, r7, #16
 8000dbc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000dc0:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <NRF24_begin+0x1a4>)
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	2258      	movs	r2, #88	; 0x58
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f004 fb4c 	bl	8005468 <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 8000dd0:	4b61      	ldr	r3, [pc, #388]	; (8000f58 <NRF24_begin+0x1a8>)
 8000dd2:	4a62      	ldr	r2, [pc, #392]	; (8000f5c <NRF24_begin+0x1ac>)
 8000dd4:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <NRF24_begin+0x1b0>)
 8000dd8:	2208      	movs	r2, #8
 8000dda:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 8000ddc:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <NRF24_begin+0x1b4>)
 8000dde:	2210      	movs	r2, #16
 8000de0:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff fe9a 	bl	8000b1c <NRF24_csn>
	NRF24_ce(0);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff feb7 	bl	8000b5c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000dee:	2005      	movs	r0, #5
 8000df0:	f000 fc92 	bl	8001718 <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 8000df4:	2108      	movs	r1, #8
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff ff20 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 8000dfc:	213f      	movs	r1, #63	; 0x3f
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ff1c 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 8000e04:	2103      	movs	r1, #3
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff ff18 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f7ff ff14 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8000e14:	2103      	movs	r1, #3
 8000e16:	2004      	movs	r0, #4
 8000e18:	f7ff ff10 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	2005      	movs	r0, #5
 8000e20:	f7ff ff0c 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 8000e24:	210f      	movs	r1, #15
 8000e26:	2006      	movs	r0, #6
 8000e28:	f7ff ff08 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 8000e2c:	210e      	movs	r1, #14
 8000e2e:	2007      	movs	r0, #7
 8000e30:	f7ff ff04 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8000e34:	2100      	movs	r1, #0
 8000e36:	2008      	movs	r0, #8
 8000e38:	f7ff ff00 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2009      	movs	r0, #9
 8000e40:	f7ff fefc 	bl	8000c3c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000e44:	23e7      	movs	r3, #231	; 0xe7
 8000e46:	713b      	strb	r3, [r7, #4]
 8000e48:	23e7      	movs	r3, #231	; 0xe7
 8000e4a:	70fb      	strb	r3, [r7, #3]
 8000e4c:	23e7      	movs	r3, #231	; 0xe7
 8000e4e:	70bb      	strb	r3, [r7, #2]
 8000e50:	23e7      	movs	r3, #231	; 0xe7
 8000e52:	707b      	strb	r3, [r7, #1]
 8000e54:	23e7      	movs	r3, #231	; 0xe7
 8000e56:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	200a      	movs	r0, #10
 8000e60:	f7ff ff0e 	bl	8000c80 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8000e64:	23c2      	movs	r3, #194	; 0xc2
 8000e66:	713b      	strb	r3, [r7, #4]
 8000e68:	23c2      	movs	r3, #194	; 0xc2
 8000e6a:	70fb      	strb	r3, [r7, #3]
 8000e6c:	23c2      	movs	r3, #194	; 0xc2
 8000e6e:	70bb      	strb	r3, [r7, #2]
 8000e70:	23c2      	movs	r3, #194	; 0xc2
 8000e72:	707b      	strb	r3, [r7, #1]
 8000e74:	23c2      	movs	r3, #194	; 0xc2
 8000e76:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	200b      	movs	r0, #11
 8000e80:	f7ff fefe 	bl	8000c80 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 8000e84:	21c3      	movs	r1, #195	; 0xc3
 8000e86:	200c      	movs	r0, #12
 8000e88:	f7ff fed8 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 8000e8c:	21c4      	movs	r1, #196	; 0xc4
 8000e8e:	200d      	movs	r0, #13
 8000e90:	f7ff fed4 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 8000e94:	21c5      	movs	r1, #197	; 0xc5
 8000e96:	200e      	movs	r0, #14
 8000e98:	f7ff fed0 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 8000e9c:	21c6      	movs	r1, #198	; 0xc6
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f7ff fecc 	bl	8000c3c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8000ea4:	23e7      	movs	r3, #231	; 0xe7
 8000ea6:	713b      	strb	r3, [r7, #4]
 8000ea8:	23e7      	movs	r3, #231	; 0xe7
 8000eaa:	70fb      	strb	r3, [r7, #3]
 8000eac:	23e7      	movs	r3, #231	; 0xe7
 8000eae:	70bb      	strb	r3, [r7, #2]
 8000eb0:	23e7      	movs	r3, #231	; 0xe7
 8000eb2:	707b      	strb	r3, [r7, #1]
 8000eb4:	23e7      	movs	r3, #231	; 0xe7
 8000eb6:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2205      	movs	r2, #5
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2010      	movs	r0, #16
 8000ec0:	f7ff fede 	bl	8000c80 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2011      	movs	r0, #17
 8000ec8:	f7ff feb8 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2012      	movs	r0, #18
 8000ed0:	f7ff feb4 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2013      	movs	r0, #19
 8000ed8:	f7ff feb0 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 8000edc:	2100      	movs	r1, #0
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f7ff feac 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2015      	movs	r0, #21
 8000ee8:	f7ff fea8 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 8000eec:	2100      	movs	r1, #0
 8000eee:	2016      	movs	r0, #22
 8000ef0:	f7ff fea4 	bl	8000c3c <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8000ef4:	f000 fbc4 	bl	8001680 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	201c      	movs	r0, #28
 8000efc:	f7ff fe9e 	bl	8000c3c <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 8000f00:	2100      	movs	r1, #0
 8000f02:	201d      	movs	r0, #29
 8000f04:	f7ff fe9a 	bl	8000c3c <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f08:	210f      	movs	r1, #15
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f944 	bl	8001198 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 fa26 	bl	8001362 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 fa5c 	bl	80013d4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f000 fa9f 	bl	8001460 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f22:	f000 f9f1 	bl	8001308 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f26:	2020      	movs	r0, #32
 8000f28:	f000 f966 	bl	80011f8 <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 8000f2c:	f000 fac0 	bl	80014b0 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 8000f30:	f000 fb9e 	bl	8001670 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f34:	204c      	movs	r0, #76	; 0x4c
 8000f36:	f000 f94a 	bl	80011ce <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f3a:	f7ff ff1b 	bl	8000d74 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f3e:	f7ff ff21 	bl	8000d84 <NRF24_flush_rx>

	NRF24_powerDown();
 8000f42:	f000 faca 	bl	80014da <NRF24_powerDown>

}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f50:	b004      	add	sp, #16
 8000f52:	4770      	bx	lr
 8000f54:	200004a8 	.word	0x200004a8
 8000f58:	200004a0 	.word	0x200004a0
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	200004a4 	.word	0x200004a4
 8000f64:	200004a6 	.word	0x200004a6

08000f68 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff fe15 	bl	8000b9c <NRF24_read_register>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f043 0303 	orr.w	r3, r3, #3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fe5d 	bl	8000c3c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <NRF24_startListening+0x48>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	d004      	beq.n	8000f96 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <NRF24_startListening+0x48>)
 8000f90:	200a      	movs	r0, #10
 8000f92:	f7ff fe75 	bl	8000c80 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8000f96:	f7ff feed 	bl	8000d74 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f9a:	f7ff fef3 	bl	8000d84 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff fddc 	bl	8000b5c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000fa4:	2096      	movs	r0, #150	; 0x96
 8000fa6:	f7ff fd99 	bl	8000adc <NRF24_DelayMicroSeconds>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000490 	.word	0x20000490

08000fb4 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff fdcf 	bl	8000b5c <NRF24_ce>
	NRF24_flush_tx();
 8000fbe:	f7ff fed9 	bl	8000d74 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000fc2:	f7ff fedf 	bl	8000d84 <NRF24_flush_rx>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fd8:	f000 fb4a 	bl	8001670 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fab9 	bl	8001558 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fe6:	f000 fb8d 	bl	8001704 <HAL_GetTick>
 8000fea:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fec:	230a      	movs	r3, #10
 8000fee:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000ff0:	f107 030d 	add.w	r3, r7, #13
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2008      	movs	r0, #8
 8000ffa:	f7ff fdf7 	bl	8000bec <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000ffe:	f7ff fec9 	bl	8000d94 <NRF24_get_status>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800100c:	2b00      	cmp	r3, #0
 800100e:	d107      	bne.n	8001020 <NRF24_write+0x54>
 8001010:	f000 fb78 	bl	8001704 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8e7      	bhi.n	8000ff0 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001020:	f107 010b 	add.w	r1, r7, #11
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <NRF24_write+0x90>)
 800102a:	4618      	mov	r0, r3
 800102c:	f000 faed 	bl	800160a <NRF24_whatHappened>
	retStatus = tx_ok;
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <NRF24_write+0x90>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 800103c:	f000 f8fc 	bl	8001238 <NRF24_getDynamicPayloadSize>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <NRF24_write+0x94>)
 8001046:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001048:	f000 f80c 	bl	8001064 <NRF24_available>
	NRF24_flush_tx();
 800104c:	f7ff fe92 	bl	8000d74 <NRF24_flush_tx>
	return retStatus;
 8001050:	7bbb      	ldrb	r3, [r7, #14]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000498 	.word	0x20000498
 8001060:	20000499 	.word	0x20000499

08001064 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001068:	2000      	movs	r0, #0
 800106a:	f000 fa45 	bl	80014f8 <NRF24_availablePipe>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}

08001074 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fe45 	bl	8000d14 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800108a:	2017      	movs	r0, #23
 800108c:	f7ff fd86 	bl	8000b9c <NRF24_read_register>
 8001090:	4603      	mov	r3, r0
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001098:	f7ff fe74 	bl	8000d84 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800109c:	f000 f8cc 	bl	8001238 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80010be:	463b      	mov	r3, r7
 80010c0:	2205      	movs	r2, #5
 80010c2:	4619      	mov	r1, r3
 80010c4:	200a      	movs	r0, #10
 80010c6:	f7ff fddb 	bl	8000c80 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80010ca:	463b      	mov	r3, r7
 80010cc:	2205      	movs	r2, #5
 80010ce:	4619      	mov	r1, r3
 80010d0:	2010      	movs	r0, #16
 80010d2:	f7ff fdd5 	bl	8000c80 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 80010d6:	2320      	movs	r3, #32
 80010d8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <NRF24_openWritingPipe+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	7bfa      	ldrb	r2, [r7, #15]
 80010e0:	4293      	cmp	r3, r2
 80010e2:	bf28      	it	cs
 80010e4:	4613      	movcs	r3, r2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	2011      	movs	r0, #17
 80010ec:	f7ff fda6 	bl	8000c3c <NRF24_write_register>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000049a 	.word	0x2000049a

080010fc <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4601      	mov	r1, r0
 8001104:	e9c7 2300 	strd	r2, r3, [r7]
 8001108:	460b      	mov	r3, r1
 800110a:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d104      	bne.n	800111c <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001116:	491c      	ldr	r1, [pc, #112]	; (8001188 <NRF24_openReadingPipe+0x8c>)
 8001118:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b06      	cmp	r3, #6
 8001120:	d82d      	bhi.n	800117e <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d808      	bhi.n	800113a <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	4a18      	ldr	r2, [pc, #96]	; (800118c <NRF24_openReadingPipe+0x90>)
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	4639      	mov	r1, r7
 8001130:	2205      	movs	r2, #5
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fda4 	bl	8000c80 <NRF24_write_registerN>
 8001138:	e007      	b.n	800114a <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <NRF24_openReadingPipe+0x90>)
 800113e:	5cd3      	ldrb	r3, [r2, r3]
 8001140:	4639      	mov	r1, r7
 8001142:	2201      	movs	r2, #1
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fd9b 	bl	8000c80 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	4a10      	ldr	r2, [pc, #64]	; (8001190 <NRF24_openReadingPipe+0x94>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	4a10      	ldr	r2, [pc, #64]	; (8001194 <NRF24_openReadingPipe+0x98>)
 8001152:	7812      	ldrb	r2, [r2, #0]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fd70 	bl	8000c3c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff fd1d 	bl	8000b9c <NRF24_read_register>
 8001162:	4603      	mov	r3, r0
 8001164:	b25a      	sxtb	r2, r3
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	b25b      	sxtb	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b25b      	sxtb	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	2002      	movs	r0, #2
 800117a:	f7ff fd5f 	bl	8000c3c <NRF24_write_register>
	}

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000490 	.word	0x20000490
 800118c:	0800555c 	.word	0x0800555c
 8001190:	08005564 	.word	0x08005564
 8001194:	2000049a 	.word	0x2000049a

08001198 <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4619      	mov	r1, r3
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff fd3b 	bl	8000c3c <NRF24_write_register>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80011d8:	237f      	movs	r3, #127	; 0x7f
 80011da:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4293      	cmp	r3, r2
 80011e2:	bf28      	it	cs
 80011e4:	4613      	movcs	r3, r2
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	2005      	movs	r0, #5
 80011ec:	f7ff fd26 	bl	8000c3c <NRF24_write_register>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001202:	2320      	movs	r3, #32
 8001204:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4293      	cmp	r3, r2
 800120c:	bf28      	it	cs
 800120e:	4613      	movcs	r3, r2
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b03      	ldr	r3, [pc, #12]	; (8001220 <NRF24_setPayloadSize+0x28>)
 8001214:	701a      	strb	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	2000049a 	.word	0x2000049a

08001224 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	return payload_size;
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <NRF24_getPayloadSize+0x10>)
 800122a:	781b      	ldrb	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	2000049a 	.word	0x2000049a

08001238 <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800123c:	2060      	movs	r0, #96	; 0x60
 800123e:	f7ff fcad 	bl	8000b9c <NRF24_read_register>
 8001242:	4603      	mov	r3, r0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800124c:	201d      	movs	r0, #29
 800124e:	f7ff fca5 	bl	8000b9c <NRF24_read_register>
 8001252:	4603      	mov	r3, r0
 8001254:	f043 0306 	orr.w	r3, r3, #6
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	201d      	movs	r0, #29
 800125e:	f7ff fced 	bl	8000c3c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001262:	201d      	movs	r0, #29
 8001264:	f7ff fc9a 	bl	8000b9c <NRF24_read_register>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800126e:	f000 fa07 	bl	8001680 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001272:	201d      	movs	r0, #29
 8001274:	f7ff fc92 	bl	8000b9c <NRF24_read_register>
 8001278:	4603      	mov	r3, r0
 800127a:	f043 0306 	orr.w	r3, r3, #6
 800127e:	b2db      	uxtb	r3, r3
 8001280:	4619      	mov	r1, r3
 8001282:	201d      	movs	r0, #29
 8001284:	f7ff fcda 	bl	8000c3c <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001288:	201c      	movs	r0, #28
 800128a:	f7ff fc87 	bl	8000b9c <NRF24_read_register>
 800128e:	4603      	mov	r3, r0
 8001290:	f043 0303 	orr.w	r3, r3, #3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4619      	mov	r1, r3
 8001298:	201c      	movs	r0, #28
 800129a:	f7ff fccf 	bl	8000c3c <NRF24_write_register>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80012a8:	201d      	movs	r0, #29
 80012aa:	f7ff fc77 	bl	8000b9c <NRF24_read_register>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	201d      	movs	r0, #29
 80012ba:	f7ff fcbf 	bl	8000c3c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80012be:	201d      	movs	r0, #29
 80012c0:	f7ff fc6c 	bl	8000b9c <NRF24_read_register>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10c      	bne.n	80012e4 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80012ca:	f000 f9d9 	bl	8001680 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80012ce:	201d      	movs	r0, #29
 80012d0:	f7ff fc64 	bl	8000b9c <NRF24_read_register>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4619      	mov	r1, r3
 80012de:	201d      	movs	r0, #29
 80012e0:	f7ff fcac 	bl	8000c3c <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80012e4:	201c      	movs	r0, #28
 80012e6:	f7ff fc59 	bl	8000b9c <NRF24_read_register>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	201c      	movs	r0, #28
 80012f6:	f7ff fca1 	bl	8000c3c <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80012fa:	4b02      	ldr	r3, [pc, #8]	; (8001304 <NRF24_enableDynamicPayloads+0x60>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000049b 	.word	0x2000049b

08001308 <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800130c:	201d      	movs	r0, #29
 800130e:	f7ff fc45 	bl	8000b9c <NRF24_read_register>
 8001312:	4603      	mov	r3, r0
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	201d      	movs	r0, #29
 800131e:	f7ff fc8d 	bl	8000c3c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001322:	2100      	movs	r1, #0
 8001324:	201c      	movs	r0, #28
 8001326:	f7ff fc89 	bl	8000c3c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800132a:	4b02      	ldr	r3, [pc, #8]	; (8001334 <NRF24_disableDynamicPayloads+0x2c>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000049b 	.word	0x2000049b

08001338 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001348:	213f      	movs	r1, #63	; 0x3f
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fc76 	bl	8000c3c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001350:	e003      	b.n	800135a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001352:	2100      	movs	r1, #0
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fc71 	bl	8000c3c <NRF24_write_register>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800136c:	2006      	movs	r0, #6
 800136e:	f7ff fc15 	bl	8000b9c <NRF24_read_register>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f023 0306 	bic.w	r3, r3, #6
 800137c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d104      	bne.n	800138e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	f043 0306 	orr.w	r3, r3, #6
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e019      	b.n	80013c2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d104      	bne.n	800139e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e011      	b.n	80013c2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d104      	bne.n	80013ae <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e009      	b.n	80013c2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d103      	bne.n	80013c2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f043 0306 	orr.w	r3, r3, #6
 80013c0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	4619      	mov	r1, r3
 80013c6:	2006      	movs	r0, #6
 80013c8:	f7ff fc38 	bl	8000c3c <NRF24_write_register>
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80013e2:	2006      	movs	r0, #6
 80013e4:	f7ff fbda 	bl	8000b9c <NRF24_read_register>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <NRF24_setDataRate+0x88>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80013f8:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d107      	bne.n	8001410 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <NRF24_setDataRate+0x88>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001406:	7bbb      	ldrb	r3, [r7, #14]
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	73bb      	strb	r3, [r7, #14]
 800140e:	e00d      	b.n	800142c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d107      	bne.n	8001426 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <NRF24_setDataRate+0x88>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	73bb      	strb	r3, [r7, #14]
 8001424:	e002      	b.n	800142c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <NRF24_setDataRate+0x88>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	4619      	mov	r1, r3
 8001430:	2006      	movs	r0, #6
 8001432:	f7ff fc03 	bl	8000c3c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001436:	2006      	movs	r0, #6
 8001438:	f7ff fbb0 	bl	8000b9c <NRF24_read_register>
 800143c:	4603      	mov	r3, r0
 800143e:	461a      	mov	r2, r3
 8001440:	7bbb      	ldrb	r3, [r7, #14]
 8001442:	4293      	cmp	r3, r2
 8001444:	d102      	bne.n	800144c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e002      	b.n	8001452 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <NRF24_setDataRate+0x88>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000049c 	.word	0x2000049c

08001460 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fb96 	bl	8000b9c <NRF24_read_register>
 8001470:	4603      	mov	r3, r0
 8001472:	f023 030c 	bic.w	r3, r3, #12
 8001476:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00f      	beq.n	800149e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d104      	bne.n	800148e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e007      	b.n	800149e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	4619      	mov	r1, r3
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fbca 	bl	8000c3c <NRF24_write_register>
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fb70 	bl	8000b9c <NRF24_read_register>
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c6:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4619      	mov	r1, r3
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff fbb5 	bl	8000c3c <NRF24_write_register>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fb5c 	bl	8000b9c <NRF24_read_register>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f023 0302 	bic.w	r3, r3, #2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4619      	mov	r1, r3
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fba4 	bl	8000c3c <NRF24_write_register>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001500:	f7ff fc48 	bl	8000d94 <NRF24_get_status>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf14      	ite	ne
 8001512:	2301      	movne	r3, #1
 8001514:	2300      	moveq	r3, #0
 8001516:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d017      	beq.n	800154e <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	085b      	lsrs	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	b2da      	uxtb	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001534:	2140      	movs	r1, #64	; 0x40
 8001536:	2007      	movs	r0, #7
 8001538:	f7ff fb80 	bl	8000c3c <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001546:	2120      	movs	r1, #32
 8001548:	2007      	movs	r0, #7
 800154a:	f7ff fb77 	bl	8000c3c <NRF24_write_register>
    }
  }
  return result;
 800154e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff faf9 	bl	8000b5c <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fb16 	bl	8000b9c <NRF24_read_register>
 8001570:	4603      	mov	r3, r0
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f023 0301 	bic.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4619      	mov	r1, r3
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fb5b 	bl	8000c3c <NRF24_write_register>
  NRF24_ce(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fae8 	bl	8000b5c <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800158c:	2096      	movs	r0, #150	; 0x96
 800158e:	f7ff faa5 	bl	8000adc <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	4619      	mov	r1, r3
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fb9a 	bl	8000cd0 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fadd 	bl	8000b5c <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f7ff fa9a 	bl	8000adc <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff fad7 	bl	8000b5c <NRF24_ce>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	6039      	str	r1, [r7, #0]
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	4613      	mov	r3, r2
 80015c4:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80015ca:	2320      	movs	r3, #32
 80015cc:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 80015ce:	7afa      	ldrb	r2, [r7, #11]
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	4293      	cmp	r3, r2
 80015d4:	bf28      	it	cs
 80015d6:	4613      	movcs	r3, r2
 80015d8:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff fa9e 	bl	8000b1c <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	f063 0357 	orn	r3, r3, #87	; 0x57
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	7aba      	ldrb	r2, [r7, #10]
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fb42 	bl	8000c80 <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fa8d 	bl	8000b1c <NRF24_csn>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001616:	f7ff fbbd 	bl	8000d94 <NRF24_get_status>
 800161a:	4603      	mov	r3, r0
 800161c:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001624:	2170      	movs	r1, #112	; 0x70
 8001626:	2007      	movs	r0, #7
 8001628:	f7ff fb08 	bl	8000c3c <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2da      	uxtb	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2da      	uxtb	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2da      	uxtb	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	701a      	strb	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001674:	2170      	movs	r1, #112	; 0x70
 8001676:	2007      	movs	r0, #7
 8001678:	f7ff fae0 	bl	8000c3c <NRF24_write_register>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8001686:	2000      	movs	r0, #0
 8001688:	f7ff fa48 	bl	8000b1c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800168c:	2350      	movs	r3, #80	; 0x50
 800168e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001690:	2373      	movs	r3, #115	; 0x73
 8001692:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001694:	1d39      	adds	r1, r7, #4
 8001696:	2364      	movs	r3, #100	; 0x64
 8001698:	2202      	movs	r2, #2
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <NRF24_ACTIVATE_cmd+0x30>)
 800169c:	f001 f9a6 	bl	80029ec <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff fa3b 	bl	8000b1c <NRF24_csn>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200004a8 	.word	0x200004a8

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f8f5 	bl	80018b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f7ff f92c 	bl	8000928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff f832 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x1c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_IncTick+0x20>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_IncTick+0x20>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000030 	.word	0x20000030
 8001700:	20000500 	.word	0x20000500

08001704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b02      	ldr	r3, [pc, #8]	; (8001714 <HAL_GetTick+0x10>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000500 	.word	0x20000500

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fff0 	bl	8001704 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffe0 	bl	8001704 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000030 	.word	0x20000030

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <__NVIC_EnableIRQ+0x34>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff4f 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018dc:	f7ff ff64 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f7ff ffb2 	bl	8001850 <NVIC_EncodePriority>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff81 	bl	80017fc <__NVIC_SetPriority>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff57 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e043      	b.n	80019be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_DMA_Init+0xa8>)
 800193e:	4413      	add	r3, r2
 8001940:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_DMA_Init+0xac>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	009a      	lsls	r2, r3, #2
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_DMA_Init+0xb0>)
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800196a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800196e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	bffdfff8 	.word	0xbffdfff8
 80019cc:	cccccccd 	.word	0xcccccccd
 80019d0:	40020000 	.word	0x40020000

080019d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_DMA_Start_IT+0x20>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e04b      	b.n	8001a8c <HAL_DMA_Start_IT+0xb8>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d13a      	bne.n	8001a7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68b9      	ldr	r1, [r7, #8]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f937 	bl	8001ca0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d008      	beq.n	8001a4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 020e 	orr.w	r2, r2, #14
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e00f      	b.n	8001a6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0204 	bic.w	r2, r2, #4
 8001a5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 020a 	orr.w	r2, r2, #10
 8001a6a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e005      	b.n	8001a8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a86:	2302      	movs	r3, #2
 8001a88:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d04f      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xc8>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d107      	bne.n	8001ae4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0204 	bic.w	r2, r2, #4
 8001ae2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a66      	ldr	r2, [pc, #408]	; (8001c84 <HAL_DMA_IRQHandler+0x1f0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d029      	beq.n	8001b42 <HAL_DMA_IRQHandler+0xae>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_DMA_IRQHandler+0x1f4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d022      	beq.n	8001b3e <HAL_DMA_IRQHandler+0xaa>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a63      	ldr	r2, [pc, #396]	; (8001c8c <HAL_DMA_IRQHandler+0x1f8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d01a      	beq.n	8001b38 <HAL_DMA_IRQHandler+0xa4>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a62      	ldr	r2, [pc, #392]	; (8001c90 <HAL_DMA_IRQHandler+0x1fc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d012      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x9e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a60      	ldr	r2, [pc, #384]	; (8001c94 <HAL_DMA_IRQHandler+0x200>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00a      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x98>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a5f      	ldr	r2, [pc, #380]	; (8001c98 <HAL_DMA_IRQHandler+0x204>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d102      	bne.n	8001b26 <HAL_DMA_IRQHandler+0x92>
 8001b20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b24:	e00e      	b.n	8001b44 <HAL_DMA_IRQHandler+0xb0>
 8001b26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b2a:	e00b      	b.n	8001b44 <HAL_DMA_IRQHandler+0xb0>
 8001b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b30:	e008      	b.n	8001b44 <HAL_DMA_IRQHandler+0xb0>
 8001b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b36:	e005      	b.n	8001b44 <HAL_DMA_IRQHandler+0xb0>
 8001b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3c:	e002      	b.n	8001b44 <HAL_DMA_IRQHandler+0xb0>
 8001b3e:	2340      	movs	r3, #64	; 0x40
 8001b40:	e000      	b.n	8001b44 <HAL_DMA_IRQHandler+0xb0>
 8001b42:	2304      	movs	r3, #4
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_DMA_IRQHandler+0x208>)
 8001b46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8094 	beq.w	8001c7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b5a:	e08e      	b.n	8001c7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2202      	movs	r2, #2
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d056      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x186>
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d051      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10b      	bne.n	8001b9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 020a 	bic.w	r2, r2, #10
 8001b92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <HAL_DMA_IRQHandler+0x1f0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d029      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x166>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a37      	ldr	r2, [pc, #220]	; (8001c88 <HAL_DMA_IRQHandler+0x1f4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d022      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x162>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <HAL_DMA_IRQHandler+0x1f8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01a      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x15c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a34      	ldr	r2, [pc, #208]	; (8001c90 <HAL_DMA_IRQHandler+0x1fc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d012      	beq.n	8001bea <HAL_DMA_IRQHandler+0x156>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a32      	ldr	r2, [pc, #200]	; (8001c94 <HAL_DMA_IRQHandler+0x200>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00a      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x150>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a31      	ldr	r2, [pc, #196]	; (8001c98 <HAL_DMA_IRQHandler+0x204>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d102      	bne.n	8001bde <HAL_DMA_IRQHandler+0x14a>
 8001bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bdc:	e00e      	b.n	8001bfc <HAL_DMA_IRQHandler+0x168>
 8001bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be2:	e00b      	b.n	8001bfc <HAL_DMA_IRQHandler+0x168>
 8001be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be8:	e008      	b.n	8001bfc <HAL_DMA_IRQHandler+0x168>
 8001bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bee:	e005      	b.n	8001bfc <HAL_DMA_IRQHandler+0x168>
 8001bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf4:	e002      	b.n	8001bfc <HAL_DMA_IRQHandler+0x168>
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	e000      	b.n	8001bfc <HAL_DMA_IRQHandler+0x168>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <HAL_DMA_IRQHandler+0x208>)
 8001bfe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d034      	beq.n	8001c7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c18:	e02f      	b.n	8001c7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2208      	movs	r2, #8
 8001c20:	409a      	lsls	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d028      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x1e8>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d023      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 020e 	bic.w	r2, r2, #14
 8001c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
    }
  }
  return;
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
}
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40020008 	.word	0x40020008
 8001c88:	4002001c 	.word	0x4002001c
 8001c8c:	40020030 	.word	0x40020030
 8001c90:	40020044 	.word	0x40020044
 8001c94:	40020058 	.word	0x40020058
 8001c98:	4002006c 	.word	0x4002006c
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d108      	bne.n	8001ce0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cde:	e007      	b.n	8001cf0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b08b      	sub	sp, #44	; 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0e:	e169      	b.n	8001fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d10:	2201      	movs	r2, #1
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8158 	bne.w	8001fde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4a9a      	ldr	r2, [pc, #616]	; (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d38:	4a98      	ldr	r2, [pc, #608]	; (8001f9c <HAL_GPIO_Init+0x2a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d875      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d3e:	4a98      	ldr	r2, [pc, #608]	; (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d058      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d44:	4a96      	ldr	r2, [pc, #600]	; (8001fa0 <HAL_GPIO_Init+0x2a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d86f      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d4a:	4a96      	ldr	r2, [pc, #600]	; (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d052      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d50:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <HAL_GPIO_Init+0x2a8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d869      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d56:	4a94      	ldr	r2, [pc, #592]	; (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04c      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a92      	ldr	r2, [pc, #584]	; (8001fa8 <HAL_GPIO_Init+0x2ac>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d863      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d62:	4a92      	ldr	r2, [pc, #584]	; (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d046      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
 8001d68:	4a90      	ldr	r2, [pc, #576]	; (8001fac <HAL_GPIO_Init+0x2b0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d85d      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d82a      	bhi.n	8001dc8 <HAL_GPIO_Init+0xcc>
 8001d72:	2b12      	cmp	r3, #18
 8001d74:	d859      	bhi.n	8001e2a <HAL_GPIO_Init+0x12e>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_GPIO_Init+0x80>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001df7 	.word	0x08001df7
 8001d80:	08001dd1 	.word	0x08001dd1
 8001d84:	08001de3 	.word	0x08001de3
 8001d88:	08001e25 	.word	0x08001e25
 8001d8c:	08001e2b 	.word	0x08001e2b
 8001d90:	08001e2b 	.word	0x08001e2b
 8001d94:	08001e2b 	.word	0x08001e2b
 8001d98:	08001e2b 	.word	0x08001e2b
 8001d9c:	08001e2b 	.word	0x08001e2b
 8001da0:	08001e2b 	.word	0x08001e2b
 8001da4:	08001e2b 	.word	0x08001e2b
 8001da8:	08001e2b 	.word	0x08001e2b
 8001dac:	08001e2b 	.word	0x08001e2b
 8001db0:	08001e2b 	.word	0x08001e2b
 8001db4:	08001e2b 	.word	0x08001e2b
 8001db8:	08001e2b 	.word	0x08001e2b
 8001dbc:	08001e2b 	.word	0x08001e2b
 8001dc0:	08001dd9 	.word	0x08001dd9
 8001dc4:	08001ded 	.word	0x08001ded
 8001dc8:	4a79      	ldr	r2, [pc, #484]	; (8001fb0 <HAL_GPIO_Init+0x2b4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dce:	e02c      	b.n	8001e2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e029      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e024      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	3308      	adds	r3, #8
 8001de8:	623b      	str	r3, [r7, #32]
          break;
 8001dea:	e01f      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	330c      	adds	r3, #12
 8001df2:	623b      	str	r3, [r7, #32]
          break;
 8001df4:	e01a      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dfe:	2304      	movs	r3, #4
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e013      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d105      	bne.n	8001e18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	611a      	str	r2, [r3, #16]
          break;
 8001e16:	e009      	b.n	8001e2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	615a      	str	r2, [r3, #20]
          break;
 8001e22:	e003      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x130>
          break;
 8001e2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d801      	bhi.n	8001e36 <HAL_GPIO_Init+0x13a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	e001      	b.n	8001e3a <HAL_GPIO_Init+0x13e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d802      	bhi.n	8001e48 <HAL_GPIO_Init+0x14c>
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x152>
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	3b08      	subs	r3, #8
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	210f      	movs	r1, #15
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80b1 	beq.w	8001fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a4c      	ldr	r2, [pc, #304]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_GPIO_Init+0x2b8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <HAL_GPIO_Init+0x2c0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_GPIO_Init+0x1ec>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <HAL_GPIO_Init+0x2c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d00d      	beq.n	8001ee4 <HAL_GPIO_Init+0x1e8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3e      	ldr	r2, [pc, #248]	; (8001fc4 <HAL_GPIO_Init+0x2c8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <HAL_GPIO_Init+0x1e4>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3d      	ldr	r2, [pc, #244]	; (8001fc8 <HAL_GPIO_Init+0x2cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_GPIO_Init+0x1e0>
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e006      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e004      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e002      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_GPIO_Init+0x1ee>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eec:	f002 0203 	and.w	r2, r2, #3
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	4093      	lsls	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001efa:	492f      	ldr	r1, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x2bc>)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d006      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	492c      	ldr	r1, [pc, #176]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	608b      	str	r3, [r1, #8]
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4928      	ldr	r1, [pc, #160]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	60cb      	str	r3, [r1, #12]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	491e      	ldr	r1, [pc, #120]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4918      	ldr	r1, [pc, #96]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	4914      	ldr	r1, [pc, #80]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d021      	beq.n	8001fd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	600b      	str	r3, [r1, #0]
 8001f98:	e021      	b.n	8001fde <HAL_GPIO_Init+0x2e2>
 8001f9a:	bf00      	nop
 8001f9c:	10320000 	.word	0x10320000
 8001fa0:	10310000 	.word	0x10310000
 8001fa4:	10220000 	.word	0x10220000
 8001fa8:	10210000 	.word	0x10210000
 8001fac:	10120000 	.word	0x10120000
 8001fb0:	10110000 	.word	0x10110000
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400
 8001fcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <HAL_GPIO_Init+0x304>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f47f ae8e 	bne.w	8001d10 <HAL_GPIO_Init+0x14>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	372c      	adds	r7, #44	; 0x2c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	611a      	str	r2, [r3, #16]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4013      	ands	r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d006      	beq.n	8002058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204a:	4a05      	ldr	r2, [pc, #20]	; (8002060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa18 	bl	8000488 <HAL_GPIO_EXTI_Callback>
  }
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e272      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8087 	beq.w	8002192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b04      	cmp	r3, #4
 800208e:	d00c      	beq.n	80020aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002090:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 030c 	and.w	r3, r3, #12
 8002098:	2b08      	cmp	r3, #8
 800209a:	d112      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
 800209c:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d10b      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020aa:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d06c      	beq.n	8002190 <HAL_RCC_OscConfig+0x12c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d168      	bne.n	8002190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e24c      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x76>
 80020cc:	4b80      	ldr	r3, [pc, #512]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a7f      	ldr	r2, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	e02e      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x98>
 80020e2:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a7a      	ldr	r2, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e01d      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0xbc>
 8002106:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a71      	ldr	r2, [pc, #452]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b6f      	ldr	r3, [pc, #444]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6e      	ldr	r2, [pc, #440]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e00b      	b.n	8002138 <HAL_RCC_OscConfig+0xd4>
 8002120:	4b6b      	ldr	r3, [pc, #428]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d013      	beq.n	8002168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fae0 	bl	8001704 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fadc 	bl	8001704 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e200      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0xe4>
 8002166:	e014      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff facc 	bl	8001704 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fac8 	bl	8001704 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1ec      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x10c>
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219e:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 030c 	and.w	r3, r3, #12
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00b      	beq.n	80021c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d11c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
 80021b6:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d116      	bne.n	80021f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e1c0      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4939      	ldr	r1, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ee:	e03a      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d020      	beq.n	800223a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fa81 	bl	8001704 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fa7d 	bl	8001704 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e1a1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002218:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4927      	ldr	r1, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	4313      	orrs	r3, r2
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	e015      	b.n	8002266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff fa60 	bl	8001704 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002248:	f7ff fa5c 	bl	8001704 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e180      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03a      	beq.n	80022e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 800227c:	2201      	movs	r2, #1
 800227e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002280:	f7ff fa40 	bl	8001704 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002288:	f7ff fa3c 	bl	8001704 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e160      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCC_OscConfig+0x26c>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 fafe 	bl	80028a8 <RCC_Delay>
 80022ac:	e01c      	b.n	80022e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7ff fa26 	bl	8001704 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ba:	e00f      	b.n	80022dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fa22 	bl	8001704 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d908      	bls.n	80022dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e146      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	42420000 	.word	0x42420000
 80022d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1e9      	bne.n	80022bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a6 	beq.w	8002442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022fa:	4b8b      	ldr	r3, [pc, #556]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4a87      	ldr	r2, [pc, #540]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	61d3      	str	r3, [r2, #28]
 8002312:	4b85      	ldr	r3, [pc, #532]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b7f      	ldr	r3, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7e      	ldr	r2, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7ff f9e3 	bl	8001704 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7ff f9df 	bl	8001704 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e103      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x4c8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x312>
 8002368:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e02d      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x334>
 800237e:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a69      	ldr	r2, [pc, #420]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	6213      	str	r3, [r2, #32]
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a66      	ldr	r2, [pc, #408]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	f023 0304 	bic.w	r3, r3, #4
 8002394:	6213      	str	r3, [r2, #32]
 8002396:	e01c      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b05      	cmp	r3, #5
 800239e:	d10c      	bne.n	80023ba <HAL_RCC_OscConfig+0x356>
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4a60      	ldr	r2, [pc, #384]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e00b      	b.n	80023d2 <HAL_RCC_OscConfig+0x36e>
 80023ba:	4b5b      	ldr	r3, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6213      	str	r3, [r2, #32]
 80023c6:	4b58      	ldr	r3, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d015      	beq.n	8002406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023da:	f7ff f993 	bl	8001704 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7ff f98f 	bl	8001704 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0b1      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ee      	beq.n	80023e2 <HAL_RCC_OscConfig+0x37e>
 8002404:	e014      	b.n	8002430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff f97d 	bl	8001704 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240c:	e00a      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240e:	f7ff f979 	bl	8001704 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	; 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e09b      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	4b40      	ldr	r3, [pc, #256]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ee      	bne.n	800240e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d105      	bne.n	8002442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002436:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	4a3b      	ldr	r2, [pc, #236]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 8087 	beq.w	800255a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d061      	beq.n	800251c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d146      	bne.n	80024ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002460:	4b33      	ldr	r3, [pc, #204]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7ff f94d 	bl	8001704 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7ff f949 	bl	8001704 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e06d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d108      	bne.n	80024a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	4921      	ldr	r1, [pc, #132]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a19      	ldr	r1, [r3, #32]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	430b      	orrs	r3, r1
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff f91d 	bl	8001704 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7ff f919 	bl	8001704 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e03d      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x46a>
 80024ec:	e035      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff f906 	bl	8001704 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7ff f902 	bl	8001704 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e026      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x498>
 800251a:	e01e      	b.n	800255a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d107      	bne.n	8002534 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e019      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
 8002530:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002534:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <HAL_RCC_OscConfig+0x500>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0d0      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4965      	ldr	r1, [pc, #404]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d040      	beq.n	8002688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d115      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002626:	4b41      	ldr	r3, [pc, #260]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e073      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e06b      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4936      	ldr	r1, [pc, #216]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002658:	f7ff f854 	bl	8001704 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	e00a      	b.n	8002676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002660:	f7ff f850 	bl	8001704 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e053      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 020c 	and.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	429a      	cmp	r2, r3
 8002686:	d1eb      	bne.n	8002660 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d210      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4922      	ldr	r1, [pc, #136]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1cc>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1d0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe f906 	bl	8000928 <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	08005544 	.word	0x08005544
 8002734:	20000028 	.word	0x20000028
 8002738:	2000002c 	.word	0x2000002c

0800273c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b04      	cmp	r3, #4
 8002764:	d002      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x30>
 8002766:	2b08      	cmp	r3, #8
 8002768:	d003      	beq.n	8002772 <HAL_RCC_GetSysClockFreq+0x36>
 800276a:	e027      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800276e:	613b      	str	r3, [r7, #16]
      break;
 8002770:	e027      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0c9b      	lsrs	r3, r3, #18
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d010      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0c5b      	lsrs	r3, r3, #17
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002796:	5cd3      	ldrb	r3, [r2, r3]
 8002798:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800279e:	fb03 f202 	mul.w	r2, r3, r2
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e004      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	613b      	str	r3, [r7, #16]
      break;
 80027ba:	e002      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80027be:	613b      	str	r3, [r7, #16]
      break;
 80027c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c2:	693b      	ldr	r3, [r7, #16]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	007a1200 	.word	0x007a1200
 80027d8:	0800556c 	.word	0x0800556c
 80027dc:	0800557c 	.word	0x0800557c
 80027e0:	003d0900 	.word	0x003d0900

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000028 	.word	0x20000028

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027fc:	f7ff fff2 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4903      	ldr	r1, [pc, #12]	; (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	08005554 	.word	0x08005554

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002824:	f7ff ffde 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0adb      	lsrs	r3, r3, #11
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08005554 	.word	0x08005554

08002848 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	220f      	movs	r2, #15
 8002856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_RCC_GetClockConfig+0x58>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0203 	and.w	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002864:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <HAL_RCC_GetClockConfig+0x58>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_GetClockConfig+0x58>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_RCC_GetClockConfig+0x58>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCC_GetClockConfig+0x5c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0207 	and.w	r2, r3, #7
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40022000 	.word	0x40022000

080028a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <RCC_Delay+0x34>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <RCC_Delay+0x38>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0a5b      	lsrs	r3, r3, #9
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028c4:	bf00      	nop
  }
  while (Delay --);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	60fa      	str	r2, [r7, #12]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f9      	bne.n	80028c4 <RCC_Delay+0x1c>
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	20000028 	.word	0x20000028
 80028e0:	10624dd3 	.word	0x10624dd3

080028e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e076      	b.n	80029e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d108      	bne.n	8002910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002906:	d009      	beq.n	800291c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
 800290e:	e005      	b.n	800291c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fd ff36 	bl	80007a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002952:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	ea42 0103 	orr.w	r1, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	0c1a      	lsrs	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f002 0204 	and.w	r2, r2, #4
 80029c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_SPI_Transmit+0x22>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e12d      	b.n	8002c6a <HAL_SPI_Transmit+0x27e>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a16:	f7fe fe75 	bl	8001704 <HAL_GetTick>
 8002a1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d002      	beq.n	8002a32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a30:	e116      	b.n	8002c60 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_SPI_Transmit+0x52>
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a42:	e10d      	b.n	8002c60 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2203      	movs	r2, #3
 8002a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	88fa      	ldrh	r2, [r7, #6]
 8002a62:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8a:	d10f      	bne.n	8002aac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aaa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d007      	beq.n	8002aca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad2:	d14f      	bne.n	8002b74 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_Transmit+0xf6>
 8002adc:	8afb      	ldrh	r3, [r7, #22]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d142      	bne.n	8002b68 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	881a      	ldrh	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	1c9a      	adds	r2, r3, #2
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b06:	e02f      	b.n	8002b68 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d112      	bne.n	8002b3c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	881a      	ldrh	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	1c9a      	adds	r2, r3, #2
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b3a:	e015      	b.n	8002b68 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3c:	f7fe fde2 	bl	8001704 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d803      	bhi.n	8002b54 <HAL_SPI_Transmit+0x168>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b52:	d102      	bne.n	8002b5a <HAL_SPI_Transmit+0x16e>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002b66:	e07b      	b.n	8002c60 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ca      	bne.n	8002b08 <HAL_SPI_Transmit+0x11c>
 8002b72:	e050      	b.n	8002c16 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_SPI_Transmit+0x196>
 8002b7c:	8afb      	ldrh	r3, [r7, #22]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d144      	bne.n	8002c0c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ba8:	e030      	b.n	8002c0c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d113      	bne.n	8002be0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	7812      	ldrb	r2, [r2, #0]
 8002bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bde:	e015      	b.n	8002c0c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be0:	f7fe fd90 	bl	8001704 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d803      	bhi.n	8002bf8 <HAL_SPI_Transmit+0x20c>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf6:	d102      	bne.n	8002bfe <HAL_SPI_Transmit+0x212>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c0a:	e029      	b.n	8002c60 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1c9      	bne.n	8002baa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fbcc 	bl	80033b8 <SPI_EndRxTxTransaction>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e003      	b.n	8002c60 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b088      	sub	sp, #32
 8002c76:	af02      	add	r7, sp, #8
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d002      	beq.n	8002c98 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c96:	e0fb      	b.n	8002e90 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca0:	d112      	bne.n	8002cc8 <HAL_SPI_Receive+0x56>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2204      	movs	r2, #4
 8002cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f8ef 	bl	8002ea2 <HAL_SPI_TransmitReceive>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	e0e8      	b.n	8002e9a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SPI_Receive+0x64>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e0e1      	b.n	8002e9a <HAL_SPI_Receive+0x228>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cde:	f7fe fd11 	bl	8001704 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Receive+0x7e>
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cf4:	e0cc      	b.n	8002e90 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d3c:	d10f      	bne.n	8002d5e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d68:	2b40      	cmp	r3, #64	; 0x40
 8002d6a:	d007      	beq.n	8002d7c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d16a      	bne.n	8002e5a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d84:	e032      	b.n	8002dec <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d115      	bne.n	8002dc0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f103 020c 	add.w	r2, r3, #12
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	7812      	ldrb	r2, [r2, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dbe:	e015      	b.n	8002dec <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dc0:	f7fe fca0 	bl	8001704 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d803      	bhi.n	8002dd8 <HAL_SPI_Receive+0x166>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d102      	bne.n	8002dde <HAL_SPI_Receive+0x16c>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002dea:	e051      	b.n	8002e90 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1c7      	bne.n	8002d86 <HAL_SPI_Receive+0x114>
 8002df6:	e035      	b.n	8002e64 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d113      	bne.n	8002e2e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	b292      	uxth	r2, r2
 8002e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	1c9a      	adds	r2, r3, #2
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e2c:	e015      	b.n	8002e5a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2e:	f7fe fc69 	bl	8001704 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d803      	bhi.n	8002e46 <HAL_SPI_Receive+0x1d4>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d102      	bne.n	8002e4c <HAL_SPI_Receive+0x1da>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002e58:	e01a      	b.n	8002e90 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1c9      	bne.n	8002df8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	6839      	ldr	r1, [r7, #0]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fa53 	bl	8003314 <SPI_EndRxTransaction>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	75fb      	strb	r3, [r7, #23]
 8002e86:	e003      	b.n	8002e90 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b08c      	sub	sp, #48	; 0x30
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x26>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e198      	b.n	80031fa <HAL_SPI_TransmitReceive+0x358>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ed0:	f7fe fc18 	bl	8001704 <HAL_GetTick>
 8002ed4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d00f      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x70>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef8:	d107      	bne.n	8002f0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_SPI_TransmitReceive+0x68>
 8002f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d003      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f10:	e16d      	b.n	80031ee <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x82>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x82>
 8002f1e:	887b      	ldrh	r3, [r7, #2]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f2a:	e160      	b.n	80031ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d003      	beq.n	8002f40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	887a      	ldrh	r2, [r7, #2]
 8002f62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d007      	beq.n	8002f94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9c:	d17c      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x10a>
 8002fa6:	8b7b      	ldrh	r3, [r7, #26]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d16a      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fd0:	e057      	b.n	8003082 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d11b      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x176>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_SPI_TransmitReceive+0x176>
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d113      	bne.n	8003018 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	1c9a      	adds	r2, r3, #2
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d119      	bne.n	800305a <HAL_SPI_TransmitReceive+0x1b8>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d014      	beq.n	800305a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	b292      	uxth	r2, r2
 800303c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	1c9a      	adds	r2, r3, #2
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003056:	2301      	movs	r3, #1
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800305a:	f7fe fb53 	bl	8001704 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003066:	429a      	cmp	r2, r3
 8003068:	d80b      	bhi.n	8003082 <HAL_SPI_TransmitReceive+0x1e0>
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d007      	beq.n	8003082 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003080:	e0b5      	b.n	80031ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1a2      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x130>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d19d      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x130>
 8003096:	e080      	b.n	800319a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_SPI_TransmitReceive+0x204>
 80030a0:	8b7b      	ldrh	r3, [r7, #26]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d16f      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030cc:	e05b      	b.n	8003186 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d11c      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x274>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d017      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x274>
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d114      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b01      	cmp	r3, #1
 8003122:	d119      	bne.n	8003158 <HAL_SPI_TransmitReceive+0x2b6>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d014      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003154:	2301      	movs	r3, #1
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003158:	f7fe fad4 	bl	8001704 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003164:	429a      	cmp	r2, r3
 8003166:	d803      	bhi.n	8003170 <HAL_SPI_TransmitReceive+0x2ce>
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d102      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x2d4>
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d107      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003184:	e033      	b.n	80031ee <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d19e      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x22c>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d199      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f90a 	bl	80033b8 <SPI_EndRxTxTransaction>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80031b6:	e01a      	b.n	80031ee <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e4:	e003      	b.n	80031ee <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003214:	f7fe fa76 	bl	8001704 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003224:	f7fe fa6e 	bl	8001704 <HAL_GetTick>
 8003228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	015b      	lsls	r3, r3, #5
 8003230:	0d1b      	lsrs	r3, r3, #20
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323a:	e054      	b.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003242:	d050      	beq.n	80032e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003244:	f7fe fa5e 	bl	8001704 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	d902      	bls.n	800325a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d13d      	bne.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003272:	d111      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327c:	d004      	beq.n	8003288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003286:	d107      	bne.n	8003298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a0:	d10f      	bne.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e017      	b.n	8003306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4013      	ands	r3, r2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	429a      	cmp	r2, r3
 8003302:	d19b      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000028 	.word	0x20000028

08003314 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003328:	d111      	bne.n	800334e <SPI_EndRxTransaction+0x3a>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003332:	d004      	beq.n	800333e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333c:	d107      	bne.n	800334e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003356:	d117      	bne.n	8003388 <SPI_EndRxTransaction+0x74>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003360:	d112      	bne.n	8003388 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2200      	movs	r2, #0
 800336a:	2101      	movs	r1, #1
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7ff ff49 	bl	8003204 <SPI_WaitFlagStateUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d01a      	beq.n	80033ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e013      	b.n	80033b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff ff36 	bl	8003204 <SPI_WaitFlagStateUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f043 0220 	orr.w	r2, r3, #32
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e000      	b.n	80033b0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff ff18 	bl	8003204 <SPI_WaitFlagStateUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e000      	b.n	80033ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e041      	b.n	800348a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f839 	bl	8003492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 f9b4 	bl	80037a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d001      	beq.n	80034bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e03a      	b.n	8003532 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIM_Base_Start_IT+0x98>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00e      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x58>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e6:	d009      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x58>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <HAL_TIM_Base_Start_IT+0x9c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d004      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x58>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a13      	ldr	r2, [pc, #76]	; (8003544 <HAL_TIM_Base_Start_IT+0xa0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d111      	bne.n	8003520 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b06      	cmp	r3, #6
 800350c:	d010      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351e:	e007      	b.n	8003530 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800

08003548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0202 	mvn.w	r2, #2
 8003574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8ed 	bl	800376a <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8e0 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8ef 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0204 	mvn.w	r2, #4
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8c3 	bl	800376a <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8b6 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8c5 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b08      	cmp	r3, #8
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0208 	mvn.w	r2, #8
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f899 	bl	800376a <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f88c 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f89b 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b10      	cmp	r3, #16
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2208      	movs	r2, #8
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f86f 	bl	800376a <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f862 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f871 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0201 	mvn.w	r2, #1
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd f81e 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f8bf 	bl	8003876 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d10e      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d107      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f835 	bl	800378e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b20      	cmp	r3, #32
 800373e:	d107      	bne.n	8003750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0220 	mvn.w	r2, #32
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f88a 	bl	8003864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <TIM_Base_SetConfig+0xb8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00b      	beq.n	80037d0 <TIM_Base_SetConfig+0x30>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037be:	d007      	beq.n	80037d0 <TIM_Base_SetConfig+0x30>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_Base_SetConfig+0xbc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d003      	beq.n	80037d0 <TIM_Base_SetConfig+0x30>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a25      	ldr	r2, [pc, #148]	; (8003860 <TIM_Base_SetConfig+0xc0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d108      	bne.n	80037e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <TIM_Base_SetConfig+0xb8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0x62>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0x62>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a19      	ldr	r2, [pc, #100]	; (800385c <TIM_Base_SetConfig+0xbc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0x62>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a18      	ldr	r2, [pc, #96]	; (8003860 <TIM_Base_SetConfig+0xc0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <TIM_Base_SetConfig+0xb8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d103      	bne.n	8003848 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	615a      	str	r2, [r3, #20]
}
 800384e:	bf00      	nop
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800

08003864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e042      	b.n	8003920 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fc ffc4 	bl	800083c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fa99 	bl	8003e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b20      	cmp	r3, #32
 8003940:	d112      	bne.n	8003968 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_UART_Receive_DMA+0x26>
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e00b      	b.n	800396a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	461a      	mov	r2, r3
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f92c 	bl	8003bbc <UART_Start_Receive_DMA>
 8003964:	4603      	mov	r3, r0
 8003966:	e000      	b.n	800396a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr

080039be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b09c      	sub	sp, #112	; 0x70
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d172      	bne.n	8003ac0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	2200      	movs	r2, #0
 80039de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a00:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a02:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	667b      	str	r3, [r7, #100]	; 0x64
 8003a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3314      	adds	r3, #20
 8003a32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003a34:	647a      	str	r2, [r7, #68]	; 0x44
 8003a36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	623b      	str	r3, [r7, #32]
   return(result);
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3314      	adds	r3, #20
 8003a66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a68:	633a      	str	r2, [r7, #48]	; 0x30
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e5      	bne.n	8003a48 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d119      	bne.n	8003ac0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0310 	bic.w	r3, r3, #16
 8003aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	330c      	adds	r3, #12
 8003aaa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003aac:	61fa      	str	r2, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	69b9      	ldr	r1, [r7, #24]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e5      	bne.n	8003a8c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d106      	bne.n	8003adc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ad6:	f7ff ff67 	bl	80039a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ada:	e002      	b.n	8003ae2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003adc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ade:	f7ff ff48 	bl	8003972 <HAL_UART_RxCpltCallback>
}
 8003ae2:	bf00      	nop
 8003ae4:	3770      	adds	r7, #112	; 0x70
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d108      	bne.n	8003b18 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff ff49 	bl	80039a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b16:	e002      	b.n	8003b1e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff ff33 	bl	8003984 <HAL_UART_RxHalfCpltCallback>
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	bf14      	ite	ne
 8003b46:	2301      	movne	r3, #1
 8003b48:	2300      	moveq	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b21      	cmp	r3, #33	; 0x21
 8003b58:	d108      	bne.n	8003b6c <UART_DMAError+0x46>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b66:	68b8      	ldr	r0, [r7, #8]
 8003b68:	f000 f8c2 	bl	8003cf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b22      	cmp	r3, #34	; 0x22
 8003b8c:	d108      	bne.n	8003ba0 <UART_DMAError+0x7a>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2200      	movs	r2, #0
 8003b98:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b9a:	68b8      	ldr	r0, [r7, #8]
 8003b9c:	f000 f8cf 	bl	8003d3e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f043 0210 	orr.w	r2, r3, #16
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bac:	68b8      	ldr	r0, [r7, #8]
 8003bae:	f7ff fef2 	bl	8003996 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b098      	sub	sp, #96	; 0x60
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2222      	movs	r2, #34	; 0x22
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	4a3e      	ldr	r2, [pc, #248]	; (8003ce4 <UART_Start_Receive_DMA+0x128>)
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	4a3d      	ldr	r2, [pc, #244]	; (8003ce8 <UART_Start_Receive_DMA+0x12c>)
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	4a3c      	ldr	r2, [pc, #240]	; (8003cec <UART_Start_Receive_DMA+0x130>)
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	2200      	movs	r2, #0
 8003c02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c04:	f107 0308 	add.w	r3, r7, #8
 8003c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4619      	mov	r1, r3
 8003c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	f7fd feda 	bl	80019d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d019      	beq.n	8003c72 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c5e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003c60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e5      	bne.n	8003c3e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3314      	adds	r3, #20
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	657b      	str	r3, [r7, #84]	; 0x54
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c92:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e5      	bne.n	8003c72 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cc6:	627a      	str	r2, [r7, #36]	; 0x24
 8003cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6a39      	ldr	r1, [r7, #32]
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3760      	adds	r7, #96	; 0x60
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	080039bf 	.word	0x080039bf
 8003ce8:	08003aeb 	.word	0x08003aeb
 8003cec:	08003b27 	.word	0x08003b27

08003cf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	; 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	330c      	adds	r3, #12
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	61ba      	str	r2, [r7, #24]
 8003d1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	613b      	str	r3, [r7, #16]
   return(result);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003d34:	bf00      	nop
 8003d36:	3724      	adds	r7, #36	; 0x24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b095      	sub	sp, #84	; 0x54
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d66:	643a      	str	r2, [r7, #64]	; 0x40
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d119      	bne.n	8003dea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f023 0310 	bic.w	r3, r3, #16
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd6:	61ba      	str	r2, [r7, #24]
 8003dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6979      	ldr	r1, [r7, #20]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	613b      	str	r3, [r7, #16]
   return(result);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003df8:	bf00      	nop
 8003dfa:	3754      	adds	r7, #84	; 0x54
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
	...

08003e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e3e:	f023 030c 	bic.w	r3, r3, #12
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2c      	ldr	r2, [pc, #176]	; (8003f18 <UART_SetConfig+0x114>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7fe fcd8 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	e002      	b.n	8003e7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7fe fcc0 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8003e78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009a      	lsls	r2, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <UART_SetConfig+0x118>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	0119      	lsls	r1, r3, #4
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009a      	lsls	r2, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <UART_SetConfig+0x118>)
 8003eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	2064      	movs	r0, #100	; 0x64
 8003eba:	fb00 f303 	mul.w	r3, r0, r3
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	3332      	adds	r3, #50	; 0x32
 8003ec4:	4a15      	ldr	r2, [pc, #84]	; (8003f1c <UART_SetConfig+0x118>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed0:	4419      	add	r1, r3
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009a      	lsls	r2, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <UART_SetConfig+0x118>)
 8003eea:	fba3 0302 	umull	r0, r3, r3, r2
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2064      	movs	r0, #100	; 0x64
 8003ef2:	fb00 f303 	mul.w	r3, r0, r3
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	; 0x32
 8003efc:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <UART_SetConfig+0x118>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	f003 020f 	and.w	r2, r3, #15
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40013800 	.word	0x40013800
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f32:	2b84      	cmp	r3, #132	; 0x84
 8003f34:	d005      	beq.n	8003f42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3303      	adds	r3, #3
 8003f40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f52:	f000 fb6d 	bl	8004630 <vTaskStartScheduler>
  
  return osOK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af04      	add	r7, sp, #16
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d020      	beq.n	8003fb0 <osThreadCreate+0x54>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d01c      	beq.n	8003fb0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685c      	ldr	r4, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691e      	ldr	r6, [r3, #16]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ffc9 	bl	8003f20 <makeFreeRtosPriority>
 8003f8e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f98:	9202      	str	r2, [sp, #8]
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	9100      	str	r1, [sp, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	4632      	mov	r2, r6
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f000 f8f4 	bl	8004192 <xTaskCreateStatic>
 8003faa:	4603      	mov	r3, r0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	e01c      	b.n	8003fea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685c      	ldr	r4, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fbc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ffab 	bl	8003f20 <makeFreeRtosPriority>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	9200      	str	r2, [sp, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4632      	mov	r2, r6
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f000 f935 	bl	800424a <xTaskCreate>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e000      	b.n	8003fec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003fea:	68fb      	ldr	r3, [r7, #12]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ff4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fa53 	bl	80044a8 <vTaskDelete>
  return osOK;
 8004002:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <osDelay+0x16>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	e000      	b.n	8004024 <osDelay+0x18>
 8004022:	2301      	movs	r3, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f000 facf 	bl	80045c8 <vTaskDelay>
  
  return osOK;
 800402a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f103 0208 	add.w	r2, r3, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f103 0208 	add.w	r2, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f103 0208 	add.w	r2, r3, #8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d103      	bne.n	80040f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e00c      	b.n	800410a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3308      	adds	r3, #8
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	e002      	b.n	80040fe <vListInsert+0x2e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d2f6      	bcs.n	80040f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	601a      	str	r2, [r3, #0]
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6892      	ldr	r2, [r2, #8]
 8004156:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6852      	ldr	r2, [r2, #4]
 8004160:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d103      	bne.n	8004174 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	1e5a      	subs	r2, r3, #1
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004192:	b580      	push	{r7, lr}
 8004194:	b08e      	sub	sp, #56	; 0x38
 8004196:	af04      	add	r7, sp, #16
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041b8:	bf00      	nop
 80041ba:	e7fe      	b.n	80041ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <xTaskCreateStatic+0x46>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61fb      	str	r3, [r7, #28]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041d8:	2354      	movs	r3, #84	; 0x54
 80041da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b54      	cmp	r3, #84	; 0x54
 80041e0:	d00a      	beq.n	80041f8 <xTaskCreateStatic+0x66>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	61bb      	str	r3, [r7, #24]
}
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01e      	beq.n	800423c <xTaskCreateStatic+0xaa>
 80041fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800420c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	2202      	movs	r2, #2
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004216:	2300      	movs	r3, #0
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	f107 0314 	add.w	r3, r7, #20
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f850 	bl	80042d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004236:	f000 f8cd 	bl	80043d4 <prvAddNewTaskToReadyList>
 800423a:	e001      	b.n	8004240 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004240:	697b      	ldr	r3, [r7, #20]
	}
 8004242:	4618      	mov	r0, r3
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800424a:	b580      	push	{r7, lr}
 800424c:	b08c      	sub	sp, #48	; 0x30
 800424e:	af04      	add	r7, sp, #16
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fefe 	bl	8005060 <pvPortMalloc>
 8004264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800426c:	2054      	movs	r0, #84	; 0x54
 800426e:	f000 fef7 	bl	8005060 <pvPortMalloc>
 8004272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
 8004280:	e005      	b.n	800428e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f000 ffb0 	bl	80051e8 <vPortFree>
 8004288:	e001      	b.n	800428e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d017      	beq.n	80042c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	2300      	movs	r3, #0
 80042a0:	9303      	str	r3, [sp, #12]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	9302      	str	r3, [sp, #8]
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f80e 	bl	80042d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042b8:	69f8      	ldr	r0, [r7, #28]
 80042ba:	f000 f88b 	bl	80043d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042be:	2301      	movs	r3, #1
 80042c0:	61bb      	str	r3, [r7, #24]
 80042c2:	e002      	b.n	80042ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042c4:	f04f 33ff 	mov.w	r3, #4294967295
 80042c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042ca:	69bb      	ldr	r3, [r7, #24]
	}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042ec:	3b01      	subs	r3, #1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	617b      	str	r3, [r7, #20]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e012      	b.n	8004348 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	7819      	ldrb	r1, [r3, #0]
 800432a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	3334      	adds	r3, #52	; 0x34
 8004332:	460a      	mov	r2, r1
 8004334:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d006      	beq.n	8004350 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3301      	adds	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b0f      	cmp	r3, #15
 800434c:	d9e9      	bls.n	8004322 <prvInitialiseNewTask+0x4e>
 800434e:	e000      	b.n	8004352 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004350:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	2b06      	cmp	r3, #6
 800435e:	d901      	bls.n	8004364 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004360:	2306      	movs	r3, #6
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fe79 	bl	8004072 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	3318      	adds	r3, #24
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fe74 	bl	8004072 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	f1c3 0207 	rsb	r2, r3, #7
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	2200      	movs	r2, #0
 80043a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	68f9      	ldr	r1, [r7, #12]
 80043b2:	69b8      	ldr	r0, [r7, #24]
 80043b4:	f000 fc9e 	bl	8004cf4 <pxPortInitialiseStack>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043ca:	bf00      	nop
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043dc:	f000 fd7e 	bl	8004edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e0:	4b2a      	ldr	r3, [pc, #168]	; (800448c <prvAddNewTaskToReadyList+0xb8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <prvAddNewTaskToReadyList+0xb8>)
 80043e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ea:	4b29      	ldr	r3, [pc, #164]	; (8004490 <prvAddNewTaskToReadyList+0xbc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f2:	4a27      	ldr	r2, [pc, #156]	; (8004490 <prvAddNewTaskToReadyList+0xbc>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f8:	4b24      	ldr	r3, [pc, #144]	; (800448c <prvAddNewTaskToReadyList+0xb8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d110      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004400:	f000 fb50 	bl	8004aa4 <prvInitialiseTaskLists>
 8004404:	e00d      	b.n	8004422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <prvAddNewTaskToReadyList+0xc0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <prvAddNewTaskToReadyList+0xbc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d802      	bhi.n	8004422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800441c:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <prvAddNewTaskToReadyList+0xbc>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 800442a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4313      	orrs	r3, r2
 800443a:	4a18      	ldr	r2, [pc, #96]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7ff fe18 	bl	800408a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800445a:	f000 fd6f 	bl	8004f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <prvAddNewTaskToReadyList+0xc0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00e      	beq.n	8004484 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <prvAddNewTaskToReadyList+0xbc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	429a      	cmp	r2, r3
 8004472:	d207      	bcs.n	8004484 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004474:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000604 	.word	0x20000604
 8004490:	20000504 	.word	0x20000504
 8004494:	20000610 	.word	0x20000610
 8004498:	20000620 	.word	0x20000620
 800449c:	2000060c 	.word	0x2000060c
 80044a0:	20000508 	.word	0x20000508
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80044b0:	f000 fd14 	bl	8004edc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <vTaskDelete+0x18>
 80044ba:	4b39      	ldr	r3, [pc, #228]	; (80045a0 <vTaskDelete+0xf8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	e000      	b.n	80044c2 <vTaskDelete+0x1a>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff fe39 	bl	8004140 <uxListRemove>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d115      	bne.n	8004500 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d8:	4932      	ldr	r1, [pc, #200]	; (80045a4 <vTaskDelete+0xfc>)
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <vTaskDelete+0x58>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	2201      	movs	r2, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43da      	mvns	r2, r3
 80044f6:	4b2c      	ldr	r3, [pc, #176]	; (80045a8 <vTaskDelete+0x100>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4013      	ands	r3, r2
 80044fc:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <vTaskDelete+0x100>)
 80044fe:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	2b00      	cmp	r3, #0
 8004506:	d004      	beq.n	8004512 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3318      	adds	r3, #24
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fe17 	bl	8004140 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004512:	4b26      	ldr	r3, [pc, #152]	; (80045ac <vTaskDelete+0x104>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <vTaskDelete+0x104>)
 800451a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800451c:	4b20      	ldr	r3, [pc, #128]	; (80045a0 <vTaskDelete+0xf8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	429a      	cmp	r2, r3
 8004524:	d10b      	bne.n	800453e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3304      	adds	r3, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4820      	ldr	r0, [pc, #128]	; (80045b0 <vTaskDelete+0x108>)
 800452e:	f7ff fdac 	bl	800408a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <vTaskDelete+0x10c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3301      	adds	r3, #1
 8004538:	4a1e      	ldr	r2, [pc, #120]	; (80045b4 <vTaskDelete+0x10c>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	e009      	b.n	8004552 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800453e:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <vTaskDelete+0x110>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3b01      	subs	r3, #1
 8004544:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <vTaskDelete+0x110>)
 8004546:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fb19 	bl	8004b80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800454e:	f000 fb47 	bl	8004be0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004552:	f000 fcf3 	bl	8004f3c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <vTaskDelete+0x114>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <vTaskDelete+0xf8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	429a      	cmp	r2, r3
 8004566:	d116      	bne.n	8004596 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <vTaskDelete+0x118>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <vTaskDelete+0xde>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60bb      	str	r3, [r7, #8]
}
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <vTaskDelete+0x11c>)
 8004588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000504 	.word	0x20000504
 80045a4:	20000508 	.word	0x20000508
 80045a8:	2000060c 	.word	0x2000060c
 80045ac:	20000620 	.word	0x20000620
 80045b0:	200005d8 	.word	0x200005d8
 80045b4:	200005ec 	.word	0x200005ec
 80045b8:	20000604 	.word	0x20000604
 80045bc:	20000610 	.word	0x20000610
 80045c0:	2000062c 	.word	0x2000062c
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d017      	beq.n	800460a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <vTaskDelay+0x60>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <vTaskDelay+0x30>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60bb      	str	r3, [r7, #8]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045f8:	f000 f87a 	bl	80046f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045fc:	2100      	movs	r1, #0
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 fb12 	bl	8004c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004604:	f000 f882 	bl	800470c <xTaskResumeAll>
 8004608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d107      	bne.n	8004620 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <vTaskDelay+0x64>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000062c 	.word	0x2000062c
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800463e:	463a      	mov	r2, r7
 8004640:	1d39      	adds	r1, r7, #4
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	4618      	mov	r0, r3
 8004648:	f7fb fd82 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	9202      	str	r2, [sp, #8]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	460a      	mov	r2, r1
 800465e:	491e      	ldr	r1, [pc, #120]	; (80046d8 <vTaskStartScheduler+0xa8>)
 8004660:	481e      	ldr	r0, [pc, #120]	; (80046dc <vTaskStartScheduler+0xac>)
 8004662:	f7ff fd96 	bl	8004192 <xTaskCreateStatic>
 8004666:	4603      	mov	r3, r0
 8004668:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <vTaskStartScheduler+0xb0>)
 800466a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <vTaskStartScheduler+0xb0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004674:	2301      	movs	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	e001      	b.n	800467e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d116      	bne.n	80046b2 <vTaskStartScheduler+0x82>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	613b      	str	r3, [r7, #16]
}
 8004696:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <vTaskStartScheduler+0xb4>)
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <vTaskStartScheduler+0xb8>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <vTaskStartScheduler+0xbc>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046ac:	f000 fba4 	bl	8004df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046b0:	e00e      	b.n	80046d0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d10a      	bne.n	80046d0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60fb      	str	r3, [r7, #12]
}
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <vTaskStartScheduler+0x9e>
}
 80046d0:	bf00      	nop
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	0800553c 	.word	0x0800553c
 80046dc:	08004a75 	.word	0x08004a75
 80046e0:	20000628 	.word	0x20000628
 80046e4:	20000624 	.word	0x20000624
 80046e8:	20000610 	.word	0x20000610
 80046ec:	20000608 	.word	0x20000608

080046f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <vTaskSuspendAll+0x18>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	4a03      	ldr	r2, [pc, #12]	; (8004708 <vTaskSuspendAll+0x18>)
 80046fc:	6013      	str	r3, [r2, #0]
}
 80046fe:	bf00      	nop
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	2000062c 	.word	0x2000062c

0800470c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <xTaskResumeAll+0x114>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <xTaskResumeAll+0x2c>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	603b      	str	r3, [r7, #0]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004738:	f000 fbd0 	bl	8004edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800473c:	4b38      	ldr	r3, [pc, #224]	; (8004820 <xTaskResumeAll+0x114>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3b01      	subs	r3, #1
 8004742:	4a37      	ldr	r2, [pc, #220]	; (8004820 <xTaskResumeAll+0x114>)
 8004744:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004746:	4b36      	ldr	r3, [pc, #216]	; (8004820 <xTaskResumeAll+0x114>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d161      	bne.n	8004812 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800474e:	4b35      	ldr	r3, [pc, #212]	; (8004824 <xTaskResumeAll+0x118>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d05d      	beq.n	8004812 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004756:	e02e      	b.n	80047b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004758:	4b33      	ldr	r3, [pc, #204]	; (8004828 <xTaskResumeAll+0x11c>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3318      	adds	r3, #24
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fceb 	bl	8004140 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fce6 	bl	8004140 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	2201      	movs	r2, #1
 800477a:	409a      	lsls	r2, r3
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <xTaskResumeAll+0x120>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4313      	orrs	r3, r2
 8004782:	4a2a      	ldr	r2, [pc, #168]	; (800482c <xTaskResumeAll+0x120>)
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4a27      	ldr	r2, [pc, #156]	; (8004830 <xTaskResumeAll+0x124>)
 8004794:	441a      	add	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7ff fc74 	bl	800408a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4b23      	ldr	r3, [pc, #140]	; (8004834 <xTaskResumeAll+0x128>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d302      	bcc.n	80047b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <xTaskResumeAll+0x12c>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <xTaskResumeAll+0x11c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1cc      	bne.n	8004758 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047c4:	f000 fa0c 	bl	8004be0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80047c8:	4b1c      	ldr	r3, [pc, #112]	; (800483c <xTaskResumeAll+0x130>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d010      	beq.n	80047f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047d4:	f000 f836 	bl	8004844 <xTaskIncrementTick>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80047de:	4b16      	ldr	r3, [pc, #88]	; (8004838 <xTaskResumeAll+0x12c>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f1      	bne.n	80047d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <xTaskResumeAll+0x130>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <xTaskResumeAll+0x12c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047fe:	2301      	movs	r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004802:	4b0f      	ldr	r3, [pc, #60]	; (8004840 <xTaskResumeAll+0x134>)
 8004804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004812:	f000 fb93 	bl	8004f3c <vPortExitCritical>

	return xAlreadyYielded;
 8004816:	68bb      	ldr	r3, [r7, #8]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	2000062c 	.word	0x2000062c
 8004824:	20000604 	.word	0x20000604
 8004828:	200005c4 	.word	0x200005c4
 800482c:	2000060c 	.word	0x2000060c
 8004830:	20000508 	.word	0x20000508
 8004834:	20000504 	.word	0x20000504
 8004838:	20000618 	.word	0x20000618
 800483c:	20000614 	.word	0x20000614
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800484e:	4b51      	ldr	r3, [pc, #324]	; (8004994 <xTaskIncrementTick+0x150>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 808d 	bne.w	8004972 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004858:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <xTaskIncrementTick+0x154>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004860:	4a4d      	ldr	r2, [pc, #308]	; (8004998 <xTaskIncrementTick+0x154>)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d120      	bne.n	80048ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800486c:	4b4b      	ldr	r3, [pc, #300]	; (800499c <xTaskIncrementTick+0x158>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <xTaskIncrementTick+0x48>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	603b      	str	r3, [r7, #0]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <xTaskIncrementTick+0x46>
 800488c:	4b43      	ldr	r3, [pc, #268]	; (800499c <xTaskIncrementTick+0x158>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <xTaskIncrementTick+0x15c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a41      	ldr	r2, [pc, #260]	; (800499c <xTaskIncrementTick+0x158>)
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <xTaskIncrementTick+0x15c>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <xTaskIncrementTick+0x160>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <xTaskIncrementTick+0x160>)
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	f000 f999 	bl	8004be0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048ae:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <xTaskIncrementTick+0x164>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d34d      	bcc.n	8004954 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b8:	4b38      	ldr	r3, [pc, #224]	; (800499c <xTaskIncrementTick+0x158>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <xTaskIncrementTick+0x82>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <xTaskIncrementTick+0x84>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048cc:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <xTaskIncrementTick+0x164>)
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	601a      	str	r2, [r3, #0]
					break;
 80048d4:	e03e      	b.n	8004954 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048d6:	4b31      	ldr	r3, [pc, #196]	; (800499c <xTaskIncrementTick+0x158>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d203      	bcs.n	80048f6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048ee:	4a2e      	ldr	r2, [pc, #184]	; (80049a8 <xTaskIncrementTick+0x164>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6013      	str	r3, [r2, #0]
						break;
 80048f4:	e02e      	b.n	8004954 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fc20 	bl	8004140 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3318      	adds	r3, #24
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff fc17 	bl	8004140 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	2201      	movs	r2, #1
 8004918:	409a      	lsls	r2, r3
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <xTaskIncrementTick+0x168>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4313      	orrs	r3, r2
 8004920:	4a22      	ldr	r2, [pc, #136]	; (80049ac <xTaskIncrementTick+0x168>)
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <xTaskIncrementTick+0x16c>)
 8004932:	441a      	add	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	3304      	adds	r3, #4
 8004938:	4619      	mov	r1, r3
 800493a:	4610      	mov	r0, r2
 800493c:	f7ff fba5 	bl	800408a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <xTaskIncrementTick+0x170>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	429a      	cmp	r2, r3
 800494c:	d3b4      	bcc.n	80048b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800494e:	2301      	movs	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004952:	e7b1      	b.n	80048b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004954:	4b17      	ldr	r3, [pc, #92]	; (80049b4 <xTaskIncrementTick+0x170>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495a:	4915      	ldr	r1, [pc, #84]	; (80049b0 <xTaskIncrementTick+0x16c>)
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d907      	bls.n	800497c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800496c:	2301      	movs	r3, #1
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e004      	b.n	800497c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <xTaskIncrementTick+0x174>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3301      	adds	r3, #1
 8004978:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <xTaskIncrementTick+0x174>)
 800497a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <xTaskIncrementTick+0x178>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004988:	697b      	ldr	r3, [r7, #20]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	2000062c 	.word	0x2000062c
 8004998:	20000608 	.word	0x20000608
 800499c:	200005bc 	.word	0x200005bc
 80049a0:	200005c0 	.word	0x200005c0
 80049a4:	2000061c 	.word	0x2000061c
 80049a8:	20000624 	.word	0x20000624
 80049ac:	2000060c 	.word	0x2000060c
 80049b0:	20000508 	.word	0x20000508
 80049b4:	20000504 	.word	0x20000504
 80049b8:	20000614 	.word	0x20000614
 80049bc:	20000618 	.word	0x20000618

080049c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049c6:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <vTaskSwitchContext+0xa0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ce:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <vTaskSwitchContext+0xa4>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049d4:	e03f      	b.n	8004a56 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80049d6:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <vTaskSwitchContext+0xa4>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80049dc:	4b22      	ldr	r3, [pc, #136]	; (8004a68 <vTaskSwitchContext+0xa8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	fab3 f383 	clz	r3, r3
 80049e8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80049ea:	7afb      	ldrb	r3, [r7, #11]
 80049ec:	f1c3 031f 	rsb	r3, r3, #31
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	491e      	ldr	r1, [pc, #120]	; (8004a6c <vTaskSwitchContext+0xac>)
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	607b      	str	r3, [r7, #4]
}
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <vTaskSwitchContext+0x5a>
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <vTaskSwitchContext+0xac>)
 8004a28:	4413      	add	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d104      	bne.n	8004a4c <vTaskSwitchContext+0x8c>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a07      	ldr	r2, [pc, #28]	; (8004a70 <vTaskSwitchContext+0xb0>)
 8004a54:	6013      	str	r3, [r2, #0]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	2000062c 	.word	0x2000062c
 8004a64:	20000618 	.word	0x20000618
 8004a68:	2000060c 	.word	0x2000060c
 8004a6c:	20000508 	.word	0x20000508
 8004a70:	20000504 	.word	0x20000504

08004a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a7c:	f000 f852 	bl	8004b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <prvIdleTask+0x28>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d9f9      	bls.n	8004a7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <prvIdleTask+0x2c>)
 8004a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a98:	e7f0      	b.n	8004a7c <prvIdleTask+0x8>
 8004a9a:	bf00      	nop
 8004a9c:	20000508 	.word	0x20000508
 8004aa0:	e000ed04 	.word	0xe000ed04

08004aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	e00c      	b.n	8004aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <prvInitialiseTaskLists+0x60>)
 8004abc:	4413      	add	r3, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fab8 	bl	8004034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d9ef      	bls.n	8004ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ad0:	480d      	ldr	r0, [pc, #52]	; (8004b08 <prvInitialiseTaskLists+0x64>)
 8004ad2:	f7ff faaf 	bl	8004034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ad6:	480d      	ldr	r0, [pc, #52]	; (8004b0c <prvInitialiseTaskLists+0x68>)
 8004ad8:	f7ff faac 	bl	8004034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004adc:	480c      	ldr	r0, [pc, #48]	; (8004b10 <prvInitialiseTaskLists+0x6c>)
 8004ade:	f7ff faa9 	bl	8004034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ae2:	480c      	ldr	r0, [pc, #48]	; (8004b14 <prvInitialiseTaskLists+0x70>)
 8004ae4:	f7ff faa6 	bl	8004034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ae8:	480b      	ldr	r0, [pc, #44]	; (8004b18 <prvInitialiseTaskLists+0x74>)
 8004aea:	f7ff faa3 	bl	8004034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <prvInitialiseTaskLists+0x78>)
 8004af0:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <prvInitialiseTaskLists+0x64>)
 8004af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <prvInitialiseTaskLists+0x7c>)
 8004af6:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <prvInitialiseTaskLists+0x68>)
 8004af8:	601a      	str	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000508 	.word	0x20000508
 8004b08:	20000594 	.word	0x20000594
 8004b0c:	200005a8 	.word	0x200005a8
 8004b10:	200005c4 	.word	0x200005c4
 8004b14:	200005d8 	.word	0x200005d8
 8004b18:	200005f0 	.word	0x200005f0
 8004b1c:	200005bc 	.word	0x200005bc
 8004b20:	200005c0 	.word	0x200005c0

08004b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b2a:	e019      	b.n	8004b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b2c:	f000 f9d6 	bl	8004edc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b30:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <prvCheckTasksWaitingTermination+0x50>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff faff 	bl	8004140 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <prvCheckTasksWaitingTermination+0x54>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	4a0b      	ldr	r2, [pc, #44]	; (8004b78 <prvCheckTasksWaitingTermination+0x54>)
 8004b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b56:	f000 f9f1 	bl	8004f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f810 	bl	8004b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <prvCheckTasksWaitingTermination+0x58>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1e1      	bne.n	8004b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200005d8 	.word	0x200005d8
 8004b78:	20000604 	.word	0x20000604
 8004b7c:	200005ec 	.word	0x200005ec

08004b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d108      	bne.n	8004ba4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fb26 	bl	80051e8 <vPortFree>
				vPortFree( pxTCB );
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fb23 	bl	80051e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ba2:	e018      	b.n	8004bd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d103      	bne.n	8004bb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb1a 	bl	80051e8 <vPortFree>
	}
 8004bb4:	e00f      	b.n	8004bd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d00a      	beq.n	8004bd6 <prvDeleteTCB+0x56>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <prvDeleteTCB+0x54>
	}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004be6:	4b0e      	ldr	r3, [pc, #56]	; (8004c20 <prvResetNextTaskUnblockTime+0x40>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <prvResetNextTaskUnblockTime+0x14>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <prvResetNextTaskUnblockTime+0x16>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <prvResetNextTaskUnblockTime+0x44>)
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c02:	e008      	b.n	8004c16 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c04:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <prvResetNextTaskUnblockTime+0x40>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <prvResetNextTaskUnblockTime+0x44>)
 8004c14:	6013      	str	r3, [r2, #0]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	200005bc 	.word	0x200005bc
 8004c24:	20000624 	.word	0x20000624

08004c28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c32:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fa7e 	bl	8004140 <uxListRemove>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004c4a:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43da      	mvns	r2, r3
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	4a20      	ldr	r2, [pc, #128]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d10a      	bne.n	8004c80 <prvAddCurrentTaskToDelayedList+0x58>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d007      	beq.n	8004c80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c70:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	481a      	ldr	r0, [pc, #104]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c7a:	f7ff fa06 	bl	800408a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c7e:	e026      	b.n	8004cce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c88:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d209      	bcs.n	8004cac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b0f      	ldr	r3, [pc, #60]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7ff fa13 	bl	80040d0 <vListInsert>
}
 8004caa:	e010      	b.n	8004cce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f7ff fa09 	bl	80040d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d202      	bcs.n	8004cce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cc8:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6013      	str	r3, [r2, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000608 	.word	0x20000608
 8004cdc:	20000504 	.word	0x20000504
 8004ce0:	2000060c 	.word	0x2000060c
 8004ce4:	200005f0 	.word	0x200005f0
 8004ce8:	200005c0 	.word	0x200005c0
 8004cec:	200005bc 	.word	0x200005bc
 8004cf0:	20000624 	.word	0x20000624

08004cf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3b04      	subs	r3, #4
 8004d04:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3b04      	subs	r3, #4
 8004d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b04      	subs	r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d24:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <pxPortInitialiseStack+0x54>)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b14      	subs	r3, #20
 8004d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3b20      	subs	r3, #32
 8004d3a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	08004d4d 	.word	0x08004d4d

08004d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <prvTaskExitError+0x54>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d00a      	beq.n	8004d76 <prvTaskExitError+0x2a>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <prvTaskExitError+0x28>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	60bb      	str	r3, [r7, #8]
}
 8004d88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d8a:	bf00      	nop
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0fc      	beq.n	8004d8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000034 	.word	0x20000034
	...

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8004dce:	4770      	bx	lr

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	20000504 	.word	0x20000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004dd8:	4806      	ldr	r0, [pc, #24]	; (8004df4 <prvPortStartFirstTask+0x1c>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	b662      	cpsie	i
 8004de4:	b661      	cpsie	f
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	df00      	svc	0
 8004df0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004df2:	bf00      	nop
 8004df4:	e000ed08 	.word	0xe000ed08

08004df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dfe:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <xPortStartScheduler+0xd0>)
 8004e00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	22ff      	movs	r2, #255	; 0xff
 8004e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <xPortStartScheduler+0xd4>)
 8004e24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e28:	2207      	movs	r2, #7
 8004e2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e2c:	e009      	b.n	8004e42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004e2e:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	4a26      	ldr	r2, [pc, #152]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d0ef      	beq.n	8004e2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e4e:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d00a      	beq.n	8004e70 <xPortStartScheduler+0x78>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	60bb      	str	r3, [r7, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e70:	4b17      	ldr	r3, [pc, #92]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e82:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <xPortStartScheduler+0xd8>)
 8004e84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a10      	ldr	r2, [pc, #64]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ed4 <xPortStartScheduler+0xdc>)
 8004ea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ea6:	f000 f8b9 	bl	800501c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <xPortStartScheduler+0xe0>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004eb0:	f7ff ff92 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004eb4:	f7ff fd84 	bl	80049c0 <vTaskSwitchContext>
	prvTaskExitError();
 8004eb8:	f7ff ff48 	bl	8004d4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	e000e400 	.word	0xe000e400
 8004ecc:	20000630 	.word	0x20000630
 8004ed0:	20000634 	.word	0x20000634
 8004ed4:	e000ed20 	.word	0xe000ed20
 8004ed8:	20000034 	.word	0x20000034

08004edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	607b      	str	r3, [r7, #4]
}
 8004ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ef6:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <vPortEnterCritical+0x58>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <vPortEnterCritical+0x58>)
 8004efe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <vPortEnterCritical+0x58>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d10f      	bne.n	8004f28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <vPortEnterCritical+0x5c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	603b      	str	r3, [r7, #0]
}
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <vPortEnterCritical+0x4a>
	}
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	20000034 	.word	0x20000034
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f42:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <vPortExitCritical+0x24>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <vPortExitCritical+0x4c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <vPortExitCritical+0x42>
 8004f72:	2300      	movs	r3, #0
 8004f74:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr
 8004f88:	20000034 	.word	0x20000034
 8004f8c:	00000000 	.word	0x00000000

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fa0:	6010      	str	r0, [r2, #0]
 8004fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004faa:	f380 8811 	msr	BASEPRI, r0
 8004fae:	f7ff fd07 	bl	80049c0 <vTaskSwitchContext>
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fc6:	f380 8809 	msr	PSP, r0
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	4770      	bx	lr

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	20000504 	.word	0x20000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff2:	f7ff fc27 	bl	8004844 <xTaskIncrementTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <SysTick_Handler+0x40>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <vPortSetupTimerInterrupt+0x30>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <vPortSetupTimerInterrupt+0x38>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a09      	ldr	r2, [pc, #36]	; (8005058 <vPortSetupTimerInterrupt+0x3c>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <vPortSetupTimerInterrupt+0x40>)
 800503a:	3b01      	subs	r3, #1
 800503c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503e:	4b03      	ldr	r3, [pc, #12]	; (800504c <vPortSetupTimerInterrupt+0x30>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	e000e010 	.word	0xe000e010
 8005050:	e000e018 	.word	0xe000e018
 8005054:	20000028 	.word	0x20000028
 8005058:	10624dd3 	.word	0x10624dd3
 800505c:	e000e014 	.word	0xe000e014

08005060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800506c:	f7ff fb40 	bl	80046f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005070:	4b58      	ldr	r3, [pc, #352]	; (80051d4 <pvPortMalloc+0x174>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005078:	f000 f910 	bl	800529c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800507c:	4b56      	ldr	r3, [pc, #344]	; (80051d8 <pvPortMalloc+0x178>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 808e 	bne.w	80051a6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01d      	beq.n	80050cc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005090:	2208      	movs	r2, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d014      	beq.n	80050cc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f023 0307 	bic.w	r3, r3, #7
 80050a8:	3308      	adds	r3, #8
 80050aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <pvPortMalloc+0x6c>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	617b      	str	r3, [r7, #20]
}
 80050c8:	bf00      	nop
 80050ca:	e7fe      	b.n	80050ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d069      	beq.n	80051a6 <pvPortMalloc+0x146>
 80050d2:	4b42      	ldr	r3, [pc, #264]	; (80051dc <pvPortMalloc+0x17c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d864      	bhi.n	80051a6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050dc:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <pvPortMalloc+0x180>)
 80050de:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050e0:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <pvPortMalloc+0x180>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050e6:	e004      	b.n	80050f2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d903      	bls.n	8005104 <pvPortMalloc+0xa4>
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f1      	bne.n	80050e8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005104:	4b33      	ldr	r3, [pc, #204]	; (80051d4 <pvPortMalloc+0x174>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510a:	429a      	cmp	r2, r3
 800510c:	d04b      	beq.n	80051a6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2208      	movs	r2, #8
 8005114:	4413      	add	r3, r2
 8005116:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	2308      	movs	r3, #8
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	429a      	cmp	r2, r3
 800512e:	d91f      	bls.n	8005170 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <pvPortMalloc+0xf8>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	613b      	str	r3, [r7, #16]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800516a:	69b8      	ldr	r0, [r7, #24]
 800516c:	f000 f8f8 	bl	8005360 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <pvPortMalloc+0x17c>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	4a18      	ldr	r2, [pc, #96]	; (80051dc <pvPortMalloc+0x17c>)
 800517c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <pvPortMalloc+0x17c>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <pvPortMalloc+0x184>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d203      	bcs.n	8005192 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <pvPortMalloc+0x17c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <pvPortMalloc+0x184>)
 8005190:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <pvPortMalloc+0x178>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	431a      	orrs	r2, r3
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051a6:	f7ff fab1 	bl	800470c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <pvPortMalloc+0x16a>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	60fb      	str	r3, [r7, #12]
}
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <pvPortMalloc+0x168>
	return pvReturn;
 80051ca:	69fb      	ldr	r3, [r7, #28]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3728      	adds	r7, #40	; 0x28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20001240 	.word	0x20001240
 80051d8:	2000124c 	.word	0x2000124c
 80051dc:	20001244 	.word	0x20001244
 80051e0:	20001238 	.word	0x20001238
 80051e4:	20001248 	.word	0x20001248

080051e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d048      	beq.n	800528c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051fa:	2308      	movs	r3, #8
 80051fc:	425b      	negs	r3, r3
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b21      	ldr	r3, [pc, #132]	; (8005294 <vPortFree+0xac>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <vPortFree+0x44>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <vPortFree+0x62>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	60bb      	str	r3, [r7, #8]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <vPortFree+0xac>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d019      	beq.n	800528c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d115      	bne.n	800528c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <vPortFree+0xac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	43db      	mvns	r3, r3
 800526a:	401a      	ands	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005270:	f7ff fa3e 	bl	80046f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	4b07      	ldr	r3, [pc, #28]	; (8005298 <vPortFree+0xb0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4413      	add	r3, r2
 800527e:	4a06      	ldr	r2, [pc, #24]	; (8005298 <vPortFree+0xb0>)
 8005280:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005282:	6938      	ldr	r0, [r7, #16]
 8005284:	f000 f86c 	bl	8005360 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005288:	f7ff fa40 	bl	800470c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	2000124c 	.word	0x2000124c
 8005298:	20001244 	.word	0x20001244

0800529c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <prvHeapInit+0xac>)
 80052aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3307      	adds	r3, #7
 80052ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0307 	bic.w	r3, r3, #7
 80052c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	4a1f      	ldr	r2, [pc, #124]	; (8005348 <prvHeapInit+0xac>)
 80052cc:	4413      	add	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052d4:	4a1d      	ldr	r2, [pc, #116]	; (800534c <prvHeapInit+0xb0>)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052da:	4b1c      	ldr	r3, [pc, #112]	; (800534c <prvHeapInit+0xb0>)
 80052dc:	2200      	movs	r2, #0
 80052de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4413      	add	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052e8:	2208      	movs	r2, #8
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4a15      	ldr	r2, [pc, #84]	; (8005350 <prvHeapInit+0xb4>)
 80052fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052fe:	4b14      	ldr	r3, [pc, #80]	; (8005350 <prvHeapInit+0xb4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <prvHeapInit+0xb4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	1ad2      	subs	r2, r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <prvHeapInit+0xb4>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4a0a      	ldr	r2, [pc, #40]	; (8005354 <prvHeapInit+0xb8>)
 800532a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a09      	ldr	r2, [pc, #36]	; (8005358 <prvHeapInit+0xbc>)
 8005332:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005334:	4b09      	ldr	r3, [pc, #36]	; (800535c <prvHeapInit+0xc0>)
 8005336:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800533a:	601a      	str	r2, [r3, #0]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000638 	.word	0x20000638
 800534c:	20001238 	.word	0x20001238
 8005350:	20001240 	.word	0x20001240
 8005354:	20001248 	.word	0x20001248
 8005358:	20001244 	.word	0x20001244
 800535c:	2000124c 	.word	0x2000124c

08005360 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005368:	4b27      	ldr	r3, [pc, #156]	; (8005408 <prvInsertBlockIntoFreeList+0xa8>)
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e002      	b.n	8005374 <prvInsertBlockIntoFreeList+0x14>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	429a      	cmp	r2, r3
 800537c:	d8f7      	bhi.n	800536e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4413      	add	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d108      	bne.n	80053a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	441a      	add	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	441a      	add	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d118      	bne.n	80053e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <prvInsertBlockIntoFreeList+0xac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d00d      	beq.n	80053de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	441a      	add	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e008      	b.n	80053f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <prvInsertBlockIntoFreeList+0xac>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e003      	b.n	80053f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d002      	beq.n	80053fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	20001238 	.word	0x20001238
 800540c:	20001240 	.word	0x20001240

08005410 <memset>:
 8005410:	4603      	mov	r3, r0
 8005412:	4402      	add	r2, r0
 8005414:	4293      	cmp	r3, r2
 8005416:	d100      	bne.n	800541a <memset+0xa>
 8005418:	4770      	bx	lr
 800541a:	f803 1b01 	strb.w	r1, [r3], #1
 800541e:	e7f9      	b.n	8005414 <memset+0x4>

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	2600      	movs	r6, #0
 8005424:	4d0c      	ldr	r5, [pc, #48]	; (8005458 <__libc_init_array+0x38>)
 8005426:	4c0d      	ldr	r4, [pc, #52]	; (800545c <__libc_init_array+0x3c>)
 8005428:	1b64      	subs	r4, r4, r5
 800542a:	10a4      	asrs	r4, r4, #2
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	f000 f828 	bl	8005484 <_init>
 8005434:	2600      	movs	r6, #0
 8005436:	4d0a      	ldr	r5, [pc, #40]	; (8005460 <__libc_init_array+0x40>)
 8005438:	4c0a      	ldr	r4, [pc, #40]	; (8005464 <__libc_init_array+0x44>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08005580 	.word	0x08005580
 800545c:	08005580 	.word	0x08005580
 8005460:	08005580 	.word	0x08005580
 8005464:	08005584 	.word	0x08005584

08005468 <memcpy>:
 8005468:	440a      	add	r2, r1
 800546a:	4291      	cmp	r1, r2
 800546c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005470:	d100      	bne.n	8005474 <memcpy+0xc>
 8005472:	4770      	bx	lr
 8005474:	b510      	push	{r4, lr}
 8005476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800547a:	4291      	cmp	r1, r2
 800547c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005480:	d1f9      	bne.n	8005476 <memcpy+0xe>
 8005482:	bd10      	pop	{r4, pc}

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
