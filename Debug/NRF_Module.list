
NRF_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080084f8  080084f8  000184f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800874c  0800874c  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  0800874c  0800874c  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800874c  0800874c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08008754  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003914  20000038  0800878c  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000394c  0800878c  0002394c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a84c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cbc  00000000  00000000  0003a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0003e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e9  00000000  00000000  0003fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a212  00000000  00000000  000410e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b670  00000000  00000000  0005b2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096efb  00000000  00000000  0007696b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065e8  00000000  00000000  0010d868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00113e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000038 	.word	0x20000038
 800012c:	00000000 	.word	0x00000000
 8000130:	080084e0 	.word	0x080084e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000003c 	.word	0x2000003c
 800014c:	080084e0 	.word	0x080084e0

08000150 <configureTimerForRunTimeStats>:
void vApplicationIdleHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim3);
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <configureTimerForRunTimeStats+0x10>)
 8000156:	f003 fc3f 	bl	80039d8 <HAL_TIM_Base_Start_IT>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	200000ac 	.word	0x200000ac

08000164 <getRunTimeCounterValue>:

extern volatile unsigned long ulHighFrequencyTimerTicks;
__weak unsigned long getRunTimeCounterValue(void)
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
return ulHighFrequencyTimerTicks;
 8000168:	4b02      	ldr	r3, [pc, #8]	; (8000174 <getRunTimeCounterValue+0x10>)
 800016a:	681b      	ldr	r3, [r3, #0]
}
 800016c:	4618      	mov	r0, r3
 800016e:	46bd      	mov	sp, r7
 8000170:	bc80      	pop	{r7}
 8000172:	4770      	bx	lr
 8000174:	20000370 	.word	0x20000370

08000178 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800017c:	bf00      	nop
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000188:	f001 fd36 	bl	8001bf8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800018c:	f000 f8a2 	bl	80002d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000190:	f000 f9b4 	bl	80004fc <MX_GPIO_Init>
	MX_DMA_Init();
 8000194:	f000 f994 	bl	80004c0 <MX_DMA_Init>
	MX_SPI1_Init();
 8000198:	f000 f8e2 	bl	8000360 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800019c:	f000 f966 	bl	800046c <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80001a0:	f000 f914 	bl	80003cc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80001a4:	f004 fafa 	bl	800479c <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of NRF_Mutex */
	NRF_MutexHandle = osMutexNew(&NRF_Mutex_attributes);
 80001a8:	482b      	ldr	r0, [pc, #172]	; (8000258 <main+0xd4>)
 80001aa:	f004 fd95 	bl	8004cd8 <osMutexNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a2a      	ldr	r2, [pc, #168]	; (800025c <main+0xd8>)
 80001b2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Startup_Task */
	Startup_TaskHandle = osThreadNew(Init_Task, NULL, &Startup_Task_attributes);
 80001b4:	4a2a      	ldr	r2, [pc, #168]	; (8000260 <main+0xdc>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	482a      	ldr	r0, [pc, #168]	; (8000264 <main+0xe0>)
 80001ba:	f004 fb55 	bl	8004868 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a29      	ldr	r2, [pc, #164]	; (8000268 <main+0xe4>)
 80001c2:	6013      	str	r3, [r2, #0]

	/* creation of Calc_Dis */
	Calc_DisHandle = osThreadNew(Distance_Calc, NULL, &Calc_Dis_attributes);
 80001c4:	4a29      	ldr	r2, [pc, #164]	; (800026c <main+0xe8>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4829      	ldr	r0, [pc, #164]	; (8000270 <main+0xec>)
 80001ca:	f004 fb4d 	bl	8004868 <osThreadNew>
 80001ce:	4603      	mov	r3, r0
 80001d0:	4a28      	ldr	r2, [pc, #160]	; (8000274 <main+0xf0>)
 80001d2:	6013      	str	r3, [r2, #0]

	/* creation of Local */
	LocalHandle = osThreadNew(Localization, NULL, &Local_attributes);
 80001d4:	4a28      	ldr	r2, [pc, #160]	; (8000278 <main+0xf4>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4828      	ldr	r0, [pc, #160]	; (800027c <main+0xf8>)
 80001da:	f004 fb45 	bl	8004868 <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a27      	ldr	r2, [pc, #156]	; (8000280 <main+0xfc>)
 80001e2:	6013      	str	r3, [r2, #0]

	/* creation of Check_Algo */
	Check_AlgoHandle = osThreadNew(Algo_Check, NULL, &Check_Algo_attributes);
 80001e4:	4a27      	ldr	r2, [pc, #156]	; (8000284 <main+0x100>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4827      	ldr	r0, [pc, #156]	; (8000288 <main+0x104>)
 80001ea:	f004 fb3d 	bl	8004868 <osThreadNew>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a26      	ldr	r2, [pc, #152]	; (800028c <main+0x108>)
 80001f2:	6013      	str	r3, [r2, #0]

	/* creation of BSW_Algo */
	BSW_AlgoHandle = osThreadNew(BSW_Check, NULL, &BSW_Algo_attributes);
 80001f4:	4a26      	ldr	r2, [pc, #152]	; (8000290 <main+0x10c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4826      	ldr	r0, [pc, #152]	; (8000294 <main+0x110>)
 80001fa:	f004 fb35 	bl	8004868 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a25      	ldr	r2, [pc, #148]	; (8000298 <main+0x114>)
 8000202:	6013      	str	r3, [r2, #0]

	/* creation of DPW_Algo */
	DPW_AlgoHandle = osThreadNew(DPW_Check, NULL, &DPW_Algo_attributes);
 8000204:	4a25      	ldr	r2, [pc, #148]	; (800029c <main+0x118>)
 8000206:	2100      	movs	r1, #0
 8000208:	4825      	ldr	r0, [pc, #148]	; (80002a0 <main+0x11c>)
 800020a:	f004 fb2d 	bl	8004868 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a24      	ldr	r2, [pc, #144]	; (80002a4 <main+0x120>)
 8000212:	6013      	str	r3, [r2, #0]

	/* creation of Receive */
	ReceiveHandle = osThreadNew(WirelessReceive, NULL, &Receive_attributes);
 8000214:	4a24      	ldr	r2, [pc, #144]	; (80002a8 <main+0x124>)
 8000216:	2100      	movs	r1, #0
 8000218:	4824      	ldr	r0, [pc, #144]	; (80002ac <main+0x128>)
 800021a:	f004 fb25 	bl	8004868 <osThreadNew>
 800021e:	4603      	mov	r3, r0
 8000220:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <main+0x12c>)
 8000222:	6013      	str	r3, [r2, #0]

	/* creation of FCW */
	FCWHandle = osThreadNew(FCW_Task, NULL, &FCW_attributes);
 8000224:	4a23      	ldr	r2, [pc, #140]	; (80002b4 <main+0x130>)
 8000226:	2100      	movs	r1, #0
 8000228:	4823      	ldr	r0, [pc, #140]	; (80002b8 <main+0x134>)
 800022a:	f004 fb1d 	bl	8004868 <osThreadNew>
 800022e:	4603      	mov	r3, r0
 8000230:	4a22      	ldr	r2, [pc, #136]	; (80002bc <main+0x138>)
 8000232:	6013      	str	r3, [r2, #0]

	/* creation of EEBL */
	EEBLHandle = osThreadNew(EEBL_Task, NULL, &EEBL_attributes);
 8000234:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <main+0x13c>)
 8000236:	2100      	movs	r1, #0
 8000238:	4822      	ldr	r0, [pc, #136]	; (80002c4 <main+0x140>)
 800023a:	f004 fb15 	bl	8004868 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a21      	ldr	r2, [pc, #132]	; (80002c8 <main+0x144>)
 8000242:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of EventGroup */
	EventGroupHandle = osEventFlagsNew(&EventGroup_attributes);
 8000244:	4821      	ldr	r0, [pc, #132]	; (80002cc <main+0x148>)
 8000246:	f004 fc27 	bl	8004a98 <osEventFlagsNew>
 800024a:	4603      	mov	r3, r0
 800024c:	4a20      	ldr	r2, [pc, #128]	; (80002d0 <main+0x14c>)
 800024e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000250:	f004 fad6 	bl	8004800 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000254:	e7fe      	b.n	8000254 <main+0xd0>
 8000256:	bf00      	nop
 8000258:	080086f0 	.word	0x080086f0
 800025c:	200001a4 	.word	0x200001a4
 8000260:	080085ac 	.word	0x080085ac
 8000264:	080006a9 	.word	0x080006a9
 8000268:	20000180 	.word	0x20000180
 800026c:	080085d0 	.word	0x080085d0
 8000270:	08000759 	.word	0x08000759
 8000274:	20000184 	.word	0x20000184
 8000278:	080085f4 	.word	0x080085f4
 800027c:	08000799 	.word	0x08000799
 8000280:	20000188 	.word	0x20000188
 8000284:	08008618 	.word	0x08008618
 8000288:	08000829 	.word	0x08000829
 800028c:	2000018c 	.word	0x2000018c
 8000290:	0800863c 	.word	0x0800863c
 8000294:	08000899 	.word	0x08000899
 8000298:	20000190 	.word	0x20000190
 800029c:	08008660 	.word	0x08008660
 80002a0:	08000915 	.word	0x08000915
 80002a4:	20000194 	.word	0x20000194
 80002a8:	08008684 	.word	0x08008684
 80002ac:	08000995 	.word	0x08000995
 80002b0:	20000198 	.word	0x20000198
 80002b4:	080086a8 	.word	0x080086a8
 80002b8:	08000ba1 	.word	0x08000ba1
 80002bc:	2000019c 	.word	0x2000019c
 80002c0:	080086cc 	.word	0x080086cc
 80002c4:	08000bc1 	.word	0x08000bc1
 80002c8:	200001a0 	.word	0x200001a0
 80002cc:	08008700 	.word	0x08008700
 80002d0:	200001a8 	.word	0x200001a8

080002d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f008 f8c2 	bl	800846c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f002 f943 	bl	80025a8 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000328:	f000 fc6c 	bl	8000c04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fbb0 	bl	8002aac <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000352:	f000 fc57 	bl	8000c04 <Error_Handler>
	}
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000366:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <MX_SPI1_Init+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <MX_SPI1_Init+0x64>)
 800036c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000370:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_SPI1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_SPI1_Init+0x64>)
 800038c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000390:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_SPI1_Init+0x64>)
 8000394:	2220      	movs	r2, #32
 8000396:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <MX_SPI1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003ac:	220a      	movs	r2, #10
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_SPI1_Init+0x64>)
 80003b2:	f002 fd39 	bl	8002e28 <HAL_SPI_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80003bc:	f000 fc22 	bl	8000c04 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000054 	.word	0x20000054
 80003c8:	40013000 	.word	0x40013000

080003cc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80003d2:	f107 030c 	add.w	r3, r7, #12
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_TIM3_Init+0x98>)
 80003ec:	4a1e      	ldr	r2, [pc, #120]	; (8000468 <MX_TIM3_Init+0x9c>)
 80003ee:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80003f0:	4b1c      	ldr	r3, [pc, #112]	; (8000464 <MX_TIM3_Init+0x98>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f6:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_TIM3_Init+0x98>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <MX_TIM3_Init+0x98>)
 80003fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000402:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MX_TIM3_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040a:	4b16      	ldr	r3, [pc, #88]	; (8000464 <MX_TIM3_Init+0x98>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000410:	4814      	ldr	r0, [pc, #80]	; (8000464 <MX_TIM3_Init+0x98>)
 8000412:	f003 fa91 	bl	8003938 <HAL_TIM_Base_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 800041c:	f000 fbf2 	bl	8000c04 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000428:	f107 030c 	add.w	r3, r7, #12
 800042c:	4619      	mov	r1, r3
 800042e:	480d      	ldr	r0, [pc, #52]	; (8000464 <MX_TIM3_Init+0x98>)
 8000430:	f003 fc2c 	bl	8003c8c <HAL_TIM_SlaveConfigSynchro>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 800043a:	f000 fbe3 	bl	8000c04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <MX_TIM3_Init+0x98>)
 800044c:	f003 fdf4 	bl	8004038 <HAL_TIMEx_MasterConfigSynchronization>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM3_Init+0x8e>
	{
		Error_Handler();
 8000456:	f000 fbd5 	bl	8000c04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000ac 	.word	0x200000ac
 8000468:	40000400 	.word	0x40000400

0800046c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <MX_USART1_UART_Init+0x50>)
 8000474:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000478:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800047c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800048a:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000492:	220c      	movs	r2, #12
 8000494:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80004a2:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_USART1_UART_Init+0x4c>)
 80004a4:	f003 fe38 	bl	8004118 <HAL_UART_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80004ae:	f000 fba9 	bl	8000c04 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200000f4 	.word	0x200000f4
 80004bc:	40013800 	.word	0x40013800

080004c0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_DMA_Init+0x38>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <MX_DMA_Init+0x38>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_DMA_Init+0x38>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2105      	movs	r1, #5
 80004e2:	200f      	movs	r0, #15
 80004e4:	f001 fc93 	bl	8001e0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e8:	200f      	movs	r0, #15
 80004ea:	f001 fcac 	bl	8001e46 <HAL_NVIC_EnableIRQ>

}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000

080004fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_GPIO_Init+0x9c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0320 	and.w	r3, r3, #32
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_GPIO_Init+0x9c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <MX_GPIO_Init+0x9c>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2118      	movs	r1, #24
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <MX_GPIO_Init+0xa0>)
 8000546:	f001 ffff 	bl	8002548 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800054a:	2304      	movs	r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <MX_GPIO_Init+0xa4>)
 8000550:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4619      	mov	r1, r3
 800055c:	480f      	ldr	r0, [pc, #60]	; (800059c <MX_GPIO_Init+0xa0>)
 800055e:	f001 fe6f 	bl	8002240 <HAL_GPIO_Init>

	/*Configure GPIO pins : NRF_CSN_PIN_Pin NRF_CE_PIN_Pin */
	GPIO_InitStruct.Pin = NRF_CSN_PIN_Pin|NRF_CE_PIN_Pin;
 8000562:	2318      	movs	r3, #24
 8000564:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2302      	movs	r3, #2
 8000570:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	4619      	mov	r1, r3
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <MX_GPIO_Init+0xa0>)
 800057a:	f001 fe61 	bl	8002240 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2105      	movs	r1, #5
 8000582:	2008      	movs	r0, #8
 8000584:	f001 fc43 	bl	8001e0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000588:	2008      	movs	r0, #8
 800058a:	f001 fc5c 	bl	8001e46 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800058e:	bf00      	nop
 8000590:	3718      	adds	r7, #24
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	40010800 	.word	0x40010800
 80005a0:	10210000 	.word	0x10210000

080005a4 <HAL_GPIO_EXTI_Callback>:
 * @brief 	:	EXTI Generated By NRF Module
 *
 * @param 	:	GPIO_Pin
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
	{

	}
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <HAL_UART_RxCpltCallback>:
 * @brief 	:	UART Receive Interrupt with DMA
 *
 * @param huart
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	/* Set Event Flag ( Bit 0 ) as Indication For Start Distance Calculation */
	osEventFlagsSet( EventGroupHandle , DistanceCalcOnDMA ) ;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_UART_RxCpltCallback+0x1c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2101      	movs	r1, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fab8 	bl	8004b3c <osEventFlagsSet>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200001a8 	.word	0x200001a8

080005d8 <_CalcAvgDistance>:
 * 				225(BACK_RIGHT),270(RIGHT),315(FRONT RIGHT)
 * @param	: Data_Arr --> Total Array Received From Rasberrypi of 360 Elements
 * @return	: An Array of 8 Elements Each element is an Average Distance @ a Pre-defined Angles
 */
uint8_t * _CalcAvgDistance( uint8_t * Data_Arr )
{
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint16_t Local_CounterI = 0 ;
 80005e0:	2300      	movs	r3, #0
 80005e2:	82fb      	strh	r3, [r7, #22]
	int16_t Local_CounterII = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	82bb      	strh	r3, [r7, #20]
	static uint8_t Local_AvgDistance[8] = {0};

	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	82fb      	strh	r3, [r7, #22]
 80005ec:	e04d      	b.n	800068a <_CalcAvgDistance+0xb2>
		uint32_t Local_TempI = 0; // Reset Local_TempI for each angle
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
		int16_t LowerLimit  = (Local_CounterI * 45) - 3;
 80005f2:	8afb      	ldrh	r3, [r7, #22]
 80005f4:	461a      	mov	r2, r3
 80005f6:	0052      	lsls	r2, r2, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	461a      	mov	r2, r3
 80005fc:	0112      	lsls	r2, r2, #4
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b29b      	uxth	r3, r3
 8000602:	3b03      	subs	r3, #3
 8000604:	b29b      	uxth	r3, r3
 8000606:	81fb      	strh	r3, [r7, #14]
		uint16_t UpperLimit = (Local_CounterI * 45) + 3;
 8000608:	8afb      	ldrh	r3, [r7, #22]
 800060a:	461a      	mov	r2, r3
 800060c:	0052      	lsls	r2, r2, #1
 800060e:	4413      	add	r3, r2
 8000610:	461a      	mov	r2, r3
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b29b      	uxth	r3, r3
 8000618:	3303      	adds	r3, #3
 800061a:	81bb      	strh	r3, [r7, #12]

		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	82bb      	strh	r3, [r7, #20]
 8000620:	e01f      	b.n	8000662 <_CalcAvgDistance+0x8a>
			// Make sure the index is within bounds (0-359)
			uint16_t Index = (Local_CounterII + 360) % 360;
 8000622:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000626:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <_CalcAvgDistance+0xc4>)
 800062c:	fb82 1203 	smull	r1, r2, r2, r3
 8000630:	441a      	add	r2, r3
 8000632:	1211      	asrs	r1, r2, #8
 8000634:	17da      	asrs	r2, r3, #31
 8000636:	1a8a      	subs	r2, r1, r2
 8000638:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800063c:	fb01 f202 	mul.w	r2, r1, r2
 8000640:	1a9a      	subs	r2, r3, r2
 8000642:	4613      	mov	r3, r2
 8000644:	817b      	strh	r3, [r7, #10]

			Local_TempI += Data_Arr[Index];
 8000646:	897b      	ldrh	r3, [r7, #10]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	4413      	add	r3, r2
 8000654:	613b      	str	r3, [r7, #16]
		for (Local_CounterII = LowerLimit; Local_CounterII <= UpperLimit; Local_CounterII++) {
 8000656:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800065a:	b29b      	uxth	r3, r3
 800065c:	3301      	adds	r3, #1
 800065e:	b29b      	uxth	r3, r3
 8000660:	82bb      	strh	r3, [r7, #20]
 8000662:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000666:	89bb      	ldrh	r3, [r7, #12]
 8000668:	429a      	cmp	r2, r3
 800066a:	ddda      	ble.n	8000622 <_CalcAvgDistance+0x4a>
		}

		// Calculate average for this angle
		Local_AvgDistance[Local_CounterI] = Local_TempI / 7;
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <_CalcAvgDistance+0xc8>)
 8000670:	fba3 1302 	umull	r1, r3, r3, r2
 8000674:	1ad2      	subs	r2, r2, r3
 8000676:	0852      	lsrs	r2, r2, #1
 8000678:	4413      	add	r3, r2
 800067a:	089a      	lsrs	r2, r3, #2
 800067c:	8afb      	ldrh	r3, [r7, #22]
 800067e:	b2d1      	uxtb	r1, r2
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <_CalcAvgDistance+0xcc>)
 8000682:	54d1      	strb	r1, [r2, r3]
	for (Local_CounterI = 0; Local_CounterI < 8; Local_CounterI++) {
 8000684:	8afb      	ldrh	r3, [r7, #22]
 8000686:	3301      	adds	r3, #1
 8000688:	82fb      	strh	r3, [r7, #22]
 800068a:	8afb      	ldrh	r3, [r7, #22]
 800068c:	2b07      	cmp	r3, #7
 800068e:	d9ae      	bls.n	80005ee <_CalcAvgDistance+0x16>
	}

	return Local_AvgDistance;
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <_CalcAvgDistance+0xcc>)
}
 8000692:	4618      	mov	r0, r3
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	b60b60b7 	.word	0xb60b60b7
 80006a0:	24924925 	.word	0x24924925
 80006a4:	20000320 	.word	0x20000320

080006a8 <Init_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Init_Task */
void Init_Task(void *argument)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b095      	sub	sp, #84	; 0x54
 80006ac:	af12      	add	r7, sp, #72	; 0x48
 80006ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */

	/* Initialize DMA with UART to Generate Interrupt When Receiving all 360 Angle Distances */
	HAL_UART_Receive_DMA(&huart1, Distances_Buffer, 360);
 80006b0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80006b4:	4921      	ldr	r1, [pc, #132]	; (800073c <Init_Task+0x94>)
 80006b6:	4822      	ldr	r0, [pc, #136]	; (8000740 <Init_Task+0x98>)
 80006b8:	f003 fd7e 	bl	80041b8 <HAL_UART_Receive_DMA>
	//NRF Module Initialization -> Less Then 0.5 Sec
	/* Protecting Shared Resource -> NRF Module
	 *  */
	osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <Init_Task+0x9c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fba1 	bl	8004e0c <osMutexAcquire>

	NRF24_begin(hspi1);
 80006ca:	4c1f      	ldr	r4, [pc, #124]	; (8000748 <Init_Task+0xa0>)
 80006cc:	4668      	mov	r0, sp
 80006ce:	f104 0310 	add.w	r3, r4, #16
 80006d2:	2248      	movs	r2, #72	; 0x48
 80006d4:	4619      	mov	r1, r3
 80006d6:	f007 fef5 	bl	80084c4 <memcpy>
 80006da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006de:	f000 fe09 	bl	80012f4 <NRF24_begin>
	NRF24_setAutoAck(true);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f001 f8ca 	bl	800187c <NRF24_setAutoAck>
	NRF24_setPayloadSize(32);
 80006e8:	2020      	movs	r0, #32
 80006ea:	f001 f827 	bl	800173c <NRF24_setPayloadSize>
	NRF24_enableDynamicPayloads();
 80006ee:	f001 f87b 	bl	80017e8 <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 80006f2:	f001 f84b 	bl	800178c <NRF24_enableAckPayload>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <Init_Task+0xa4>)
 80006f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 ff9f 	bl	8001640 <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <Init_Task+0xa4>)
 8000704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000708:	4610      	mov	r0, r2
 800070a:	4619      	mov	r1, r3
 800070c:	f000 ff74 	bl	80015f8 <NRF24_openWritingPipe>
	NRF24_writeAckPayload(1, AckPayload, 32);
 8000710:	2220      	movs	r2, #32
 8000712:	490f      	ldr	r1, [pc, #60]	; (8000750 <Init_Task+0xa8>)
 8000714:	2001      	movs	r0, #1
 8000716:	f001 f9f0 	bl	8001afa <NRF24_writeAckPayload>
	NRF24_startListening();
 800071a:	f000 fec7 	bl	80014ac <NRF24_startListening>

	osMutexRelease(NRF_MutexHandle);
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <Init_Task+0x9c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f004 fbd0 	bl	8004ec8 <osMutexRelease>

	/* Add Any Initializations Here */
	/* Stack Size for this Task ( @Run Time ) = 348 B */
	/* Terminating StartupTask as It is No longer Important in the Sys */
	osThreadTerminate(Startup_TaskHandle);
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <Init_Task+0xac>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f004 f945 	bl	80049bc <osThreadTerminate>

	/* USER CODE END 5 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	bf00      	nop
 800073c:	200001ac 	.word	0x200001ac
 8000740:	200000f4 	.word	0x200000f4
 8000744:	200001a4 	.word	0x200001a4
 8000748:	20000054 	.word	0x20000054
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000180 	.word	0x20000180

08000758 <Distance_Calc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Distance_Calc */
void Distance_Calc(void *argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <Distance_Calc+0x34>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	f004 fa3e 	bl	8004bec <osEventFlagsWait>
		/* Arrange distances returned from the function to be :
		 * 			Front - Back - Right - Left - FR - FL - BR - BL*/
		Obstcales_Detection = _CalcAvgDistance(Distances_Buffer);
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <Distance_Calc+0x38>)
 8000772:	f7ff ff31 	bl	80005d8 <_CalcAvgDistance>
 8000776:	4603      	mov	r3, r0
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <Distance_Calc+0x3c>)
 800077a:	6013      	str	r3, [r2, #0]

		/* Setting a Flag That Indicates For Distance Calculation Finished
		 * That Starts Checking on Distances in the Task -> (@Algo_Check)
		 */
		osEventFlagsSet( EventGroupHandle , ALGO_CheckonCalc ) ;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <Distance_Calc+0x34>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2104      	movs	r1, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f004 f9da 	bl	8004b3c <osEventFlagsSet>
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000788:	e7ea      	b.n	8000760 <Distance_Calc+0x8>
 800078a:	bf00      	nop
 800078c:	200001a8 	.word	0x200001a8
 8000790:	200001ac 	.word	0x200001ac
 8000794:	20000318 	.word	0x20000318

08000798 <Localization>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Localization */
void Localization(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Localization */
	/* Infinite loop */
	for(;;)
	{
		/* Localization Frame to Be Sent via NRF */
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007a0:	2311      	movs	r3, #17
 80007a2:	733b      	strb	r3, [r7, #12]
 80007a4:	2301      	movs	r3, #1
 80007a6:	737b      	strb	r3, [r7, #13]
				Obstcales_Detection[FRONT],Obstcales_Detection[FRONT_LEFT],
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <Localization+0x88>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	781b      	ldrb	r3, [r3, #0]
		uint8_t Localization_Frame[10] = {CAR_ID,LOCALIZATION_OPERATION_ID,
 80007ae:	73bb      	strb	r3, [r7, #14]
 80007b0:	4b1b      	ldr	r3, [pc, #108]	; (8000820 <Localization+0x88>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <Localization+0x88>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	789b      	ldrb	r3, [r3, #2]
 80007be:	743b      	strb	r3, [r7, #16]
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <Localization+0x88>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	747b      	strb	r3, [r7, #17]
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <Localization+0x88>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	74bb      	strb	r3, [r7, #18]
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <Localization+0x88>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	795b      	ldrb	r3, [r3, #5]
 80007d6:	74fb      	strb	r3, [r7, #19]
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <Localization+0x88>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	799b      	ldrb	r3, [r3, #6]
 80007de:	753b      	strb	r3, [r7, #20]
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <Localization+0x88>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	79db      	ldrb	r3, [r3, #7]
 80007e6:	757b      	strb	r3, [r7, #21]
				Obstcales_Detection[RIGHT],Obstcales_Detection[FRONT_RIGHT]
		};

		/* Protecting Shared Resource -> NRF Module
		 * */
		osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <Localization+0x8c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fb0b 	bl	8004e0c <osMutexAcquire>

		NRF24_stopListening();
 80007f6:	f000 fe7f 	bl	80014f8 <NRF24_stopListening>
		NRF24_write(Localization_Frame, 10);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	210a      	movs	r1, #10
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fe85 	bl	8001510 <NRF24_write>
		NRF24_startListening();
 8000806:	f000 fe51 	bl	80014ac <NRF24_startListening>

		osMutexRelease(NRF_MutexHandle);
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <Localization+0x8c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fb5a 	bl	8004ec8 <osMutexRelease>

		/* TODO: Timing Should Be Considered */
		osDelay(3000);
 8000814:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000818:	f004 f910 	bl	8004a3c <osDelay>
	{
 800081c:	e7c0      	b.n	80007a0 <Localization+0x8>
 800081e:	bf00      	nop
 8000820:	20000318 	.word	0x20000318
 8000824:	200001a4 	.word	0x200001a4

08000828 <Algo_Check>:
 * @retval None
 */

/* USER CODE END Header_Algo_Check */
void Algo_Check(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on Distance Calculation First To Finish
		 * */
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <Algo_Check+0x60>)
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	2200      	movs	r2, #0
 800083a:	2104      	movs	r1, #4
 800083c:	f004 f9d6 	bl	8004bec <osEventFlagsWait>

		/* Checking on Front Threshold */
		if(Obstcales_Detection[FRONT] <= Front_Threshold )
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <Algo_Check+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b64      	cmp	r3, #100	; 0x64
 8000848:	d8f2      	bhi.n	8000830 <Algo_Check+0x8>
		{
			/* Frame to Sent to the Front Car to Ask For It's Direction */
			uint8_t ASK_Direction_Frame[3] ={CAR_ID,
 800084a:	2311      	movs	r3, #17
 800084c:	733b      	strb	r3, [r7, #12]
 800084e:	2302      	movs	r3, #2
 8000850:	737b      	strb	r3, [r7, #13]
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <Algo_Check+0x68>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	73bb      	strb	r3, [r7, #14]
					ASK_DIRECTION_OPERATION_ID,Front_Car_ID};

			/* Protecting Shared Resource -> NRF Module
			 * */
			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <Algo_Check+0x6c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	4618      	mov	r0, r3
 8000862:	f004 fad3 	bl	8004e0c <osMutexAcquire>

			NRF24_stopListening();
 8000866:	f000 fe47 	bl	80014f8 <NRF24_stopListening>
			NRF24_write(ASK_Direction_Frame, 3) ;
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2103      	movs	r1, #3
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fe4d 	bl	8001510 <NRF24_write>
			NRF24_startListening();
 8000876:	f000 fe19 	bl	80014ac <NRF24_startListening>

			osMutexRelease(NRF_MutexHandle);
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <Algo_Check+0x6c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f004 fb22 	bl	8004ec8 <osMutexRelease>
		osEventFlagsWait( EventGroupHandle , ALGO_CheckonCalc , osFlagsWaitAny, HAL_MAX_DELAY ) ;
 8000884:	e7d4      	b.n	8000830 <Algo_Check+0x8>
 8000886:	bf00      	nop
 8000888:	200001a8 	.word	0x200001a8
 800088c:	20000318 	.word	0x20000318
 8000890:	2000031c 	.word	0x2000031c
 8000894:	200001a4 	.word	0x200001a4

08000898 <BSW_Check>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_BSW_Check */
void BSW_Check(void *argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN BSW_Check */
	bool Local_BSWLeft = false ;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
	bool Local_BSWRight= false ;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73bb      	strb	r3, [r7, #14]
	bool Local_BSWL_LastState = false ;
 80008a8:	2300      	movs	r3, #0
 80008aa:	737b      	strb	r3, [r7, #13]
	bool Local_BSWR_LastState = false ;
 80008ac:	2300      	movs	r3, #0
 80008ae:	733b      	strb	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <BSW_Check+0x78>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	f004 f996 	bl	8004bec <osEventFlagsWait>

		Local_BSWL_LastState = Local_BSWLeft  ;
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	737b      	strb	r3, [r7, #13]
		Local_BSWR_LastState = Local_BSWRight ;
 80008c4:	7bbb      	ldrb	r3, [r7, #14]
 80008c6:	733b      	strb	r3, [r7, #12]

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = BSW_Maximium_Angle_L ;
 80008c8:	2387      	movs	r3, #135	; 0x87
 80008ca:	72fb      	strb	r3, [r7, #11]
 80008cc:	bf00      	nop
				Angle_Iterator >= BSW_Minimum_Angle_L ;
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	2b59      	cmp	r3, #89	; 0x59
 80008d2:	d902      	bls.n	80008da <BSW_Check+0x42>
				Angle_Iterator--)
		{
			if (Distances_Buffer[Angle_Iterator] <= BSW_Threshold)
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWLeft = true ;
 80008d4:	2301      	movs	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
				break;
 80008d8:	bf00      	nop
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = BSW_Minimum_Angle_R ;
 80008da:	23e1      	movs	r3, #225	; 0xe1
 80008dc:	813b      	strh	r3, [r7, #8]
 80008de:	bf00      	nop
				Angle_Iterator <= BSW_Maximium_Angle_R ;
 80008e0:	893b      	ldrh	r3, [r7, #8]
 80008e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80008e6:	d802      	bhi.n	80008ee <BSW_Check+0x56>
				Angle_Iterator++)
		{
			if (Distances_Buffer[Angle_Iterator] <= BSW_Threshold)
			{
				/*break the loop and invoke BSW Left warning*/
				Local_BSWRight = true;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73bb      	strb	r3, [r7, #14]
				break;
 80008ec:	bf00      	nop
			}
		}

		if ( ( Local_BSWLeft == true ) && ( Local_BSWL_LastState != true ) )
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d004      	beq.n	80008fe <BSW_Check+0x66>
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	f083 0301 	eor.w	r3, r3, #1
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_BSWRight == true ) && ( Local_BSWR_LastState != true ) )
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0d5      	beq.n	80008b0 <BSW_Check+0x18>
 8000904:	7b3b      	ldrb	r3, [r7, #12]
 8000906:	f083 0301 	eor.w	r3, r3, #1
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 800090e:	e7cf      	b.n	80008b0 <BSW_Check+0x18>
 8000910:	200001a8 	.word	0x200001a8

08000914 <DPW_Check>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DPW_Check */
void DPW_Check(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DPW_Check */
	bool Local_DPWLeft = false ;
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
	bool Local_DPWRight= false ;
 8000920:	2300      	movs	r3, #0
 8000922:	73bb      	strb	r3, [r7, #14]
	bool Local_DPWL_LastState = false ;
 8000924:	2300      	movs	r3, #0
 8000926:	737b      	strb	r3, [r7, #13]
	bool Local_DPWR_LastState = false ;
 8000928:	2300      	movs	r3, #0
 800092a:	733b      	strb	r3, [r7, #12]

	/* Infinite loop */
	for(;;)
	{
		Local_DPWL_LastState = Local_DPWLeft ;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	737b      	strb	r3, [r7, #13]
		Local_DPWR_LastState = Local_DPWRight;
 8000930:	7bbb      	ldrb	r3, [r7, #14]
 8000932:	733b      	strb	r3, [r7, #12]

		/* Wait on DMA Interrupt On Receive to Come */
		osEventFlagsWait( EventGroupHandle , DistanceCalcOnDMA , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <DPW_Check+0x7c>)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	2200      	movs	r2, #0
 800093e:	2101      	movs	r1, #1
 8000940:	f004 f954 	bl	8004bec <osEventFlagsWait>

		/*Check the Left Angles*/
		for (uint8_t Angle_Iterator = DPW_Maximium_Angle_L ;
 8000944:	232d      	movs	r3, #45	; 0x2d
 8000946:	72fb      	strb	r3, [r7, #11]
 8000948:	bf00      	nop
				Angle_Iterator >= DPW_Minimum_Angle_L ;
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	2b0e      	cmp	r3, #14
 800094e:	d902      	bls.n	8000956 <DPW_Check+0x42>
				Angle_Iterator--)
		{
			if (Distances_Buffer[Angle_Iterator] <= DPW_Threshold)
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWLeft = true;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
				break;
 8000954:	bf00      	nop
			}
		}
		/*Check the Right Angles*/
		for (uint16_t Angle_Iterator = DPW_Minimum_Angle_R ;
 8000956:	f240 133b 	movw	r3, #315	; 0x13b
 800095a:	813b      	strh	r3, [r7, #8]
 800095c:	bf00      	nop
				Angle_Iterator <= DPW_Maximium_Angle_R ;
 800095e:	893b      	ldrh	r3, [r7, #8]
 8000960:	f5b3 7fad 	cmp.w	r3, #346	; 0x15a
 8000964:	d202      	bcs.n	800096c <DPW_Check+0x58>
				Angle_Iterator++)
		{
			if (Distances_Buffer[Angle_Iterator] <= DPW_Threshold)
			{
				/*break the loop and invoke DPW Left warning*/
				Local_DPWRight = true;
 8000966:	2301      	movs	r3, #1
 8000968:	73bb      	strb	r3, [r7, #14]
				break;
 800096a:	bf00      	nop
			}
		}

		if ( ( Local_DPWLeft == true ) && ( Local_DPWL_LastState != true ) )
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d004      	beq.n	800097c <DPW_Check+0x68>
 8000972:	7b7b      	ldrb	r3, [r7, #13]
 8000974:	f083 0301 	eor.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
		else
		{
			/* Do Nothing */
		}

		if ( ( Local_DPWRight == true ) && ( Local_DPWR_LastState != true ) )
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0d4      	beq.n	800092c <DPW_Check+0x18>
 8000982:	7b3b      	ldrb	r3, [r7, #12]
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
		Local_DPWL_LastState = Local_DPWLeft ;
 800098c:	e7ce      	b.n	800092c <DPW_Check+0x18>
 800098e:	bf00      	nop
 8000990:	200001a8 	.word	0x200001a8

08000994 <WirelessReceive>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_WirelessReceive */
void WirelessReceive(void *argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN WirelessReceive */
	/* Infinite loop */
	for(;;)
	{
		if(NRF24_available()){
 800099c:	f000 fe04 	bl	80015a8 <NRF24_available>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 80eb 	beq.w	8000b7e <WirelessReceive+0x1ea>
			uint8_t Received_Data[32] = {0};
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]
 80009be:	619a      	str	r2, [r3, #24]

			osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY);
 80009c0:	4b71      	ldr	r3, [pc, #452]	; (8000b88 <WirelessReceive+0x1f4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	4618      	mov	r0, r3
 80009ca:	f004 fa1f 	bl	8004e0c <osMutexAcquire>
			NRF24_read(Received_Data, 32);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2120      	movs	r1, #32
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 fdef 	bl	80015b8 <NRF24_read>
			osMutexRelease(NRF_MutexHandle) ;
 80009da:	4b6b      	ldr	r3, [pc, #428]	; (8000b88 <WirelessReceive+0x1f4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4618      	mov	r0, r3
 80009e0:	f004 fa72 	bl	8004ec8 <osMutexRelease>

			switch(Received_Data[1])
 80009e4:	7b7b      	ldrb	r3, [r7, #13]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d002      	beq.n	80009f0 <WirelessReceive+0x5c>
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d06c      	beq.n	8000ac8 <WirelessReceive+0x134>
					/*
					 * Stop immediately
					 */
				}
			default:
				break;
 80009ee:	e0c5      	b.n	8000b7c <WirelessReceive+0x1e8>
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 80009f0:	7cbb      	ldrb	r3, [r7, #18]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b65      	ldr	r3, [pc, #404]	; (8000b8c <WirelessReceive+0x1f8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3b07      	subs	r3, #7
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 80009fc:	429a      	cmp	r2, r3
 80009fe:	db07      	blt.n	8000a10 <WirelessReceive+0x7c>
 8000a00:	7cbb      	ldrb	r3, [r7, #18]
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b61      	ldr	r3, [pc, #388]	; (8000b8c <WirelessReceive+0x1f8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	3307      	adds	r3, #7
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dd11      	ble.n	8000a34 <WirelessReceive+0xa0>
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000a10:	7cfb      	ldrb	r3, [r7, #19]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <WirelessReceive+0x1f8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	3b07      	subs	r3, #7
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	db0a      	blt.n	8000a38 <WirelessReceive+0xa4>
								(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000a22:	7c7b      	ldrb	r3, [r7, #17]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <WirelessReceive+0x1f8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3307      	adds	r3, #7
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3307      	adds	r3, #7
						((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dc01      	bgt.n	8000a38 <WirelessReceive+0xa4>
						(Received_Data[BACK+2] <= Obstcales_Detection[FRONT] + 7)) ||
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <WirelessReceive+0xa6>
 8000a38:	2300      	movs	r3, #0
				bool Is_Front = ((Received_Data[BACK+2] >= Obstcales_Detection[FRONT] - 7) &&
 8000a3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000a3e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000a4a:	7bbb      	ldrb	r3, [r7, #14]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	; (8000b8c <WirelessReceive+0x1f8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3304      	adds	r3, #4
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3b07      	subs	r3, #7
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	db08      	blt.n	8000a6e <WirelessReceive+0xda>
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <WirelessReceive+0x1f8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3304      	adds	r3, #4
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	3307      	adds	r3, #7
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dd11      	ble.n	8000a92 <WirelessReceive+0xfe>
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000a6e:	7cfb      	ldrb	r3, [r7, #19]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <WirelessReceive+0x1f8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3b07      	subs	r3, #7
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	db0a      	blt.n	8000a96 <WirelessReceive+0x102>
										(Received_Data[BACK_LEFT+2] <= Obstcales_Detection[FRONT_RIGHT] + 7)) ;
 8000a80:	7c7b      	ldrb	r3, [r7, #17]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <WirelessReceive+0x1f8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3307      	adds	r3, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3307      	adds	r3, #7
								((Received_Data[BACK_RIGHT+2] >= Obstcales_Detection[FRONT_LEFT] - 7) &&
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dc01      	bgt.n	8000a96 <WirelessReceive+0x102>
						(Received_Data[FRONT+2] <= Obstcales_Detection[BACK] + 7)) ||
 8000a92:	2301      	movs	r3, #1
 8000a94:	e000      	b.n	8000a98 <WirelessReceive+0x104>
 8000a96:	2300      	movs	r3, #0
				bool Is_Back = ((Received_Data[FRONT+2] >= Obstcales_Detection[BACK] - 7) &&
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(Is_Front){
 8000aa8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <WirelessReceive+0x124>
					Front_Car_ID = Received_Data[0];
 8000ab0:	7b3a      	ldrb	r2, [r7, #12]
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <WirelessReceive+0x1fc>)
 8000ab4:	701a      	strb	r2, [r3, #0]
				break;
 8000ab6:	e05f      	b.n	8000b78 <WirelessReceive+0x1e4>
				else if(Is_Back){
 8000ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d05b      	beq.n	8000b78 <WirelessReceive+0x1e4>
					Back_Car_ID = Received_Data[0];
 8000ac0:	7b3a      	ldrb	r2, [r7, #12]
 8000ac2:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <WirelessReceive+0x200>)
 8000ac4:	701a      	strb	r2, [r3, #0]
				break;
 8000ac6:	e057      	b.n	8000b78 <WirelessReceive+0x1e4>
				bool TX_Flag =0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				bool RX_Flag =0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				bool TX_Fail = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				if(	(CAR_ID == Received_Data[2] && RX_Flag))
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	2b11      	cmp	r3, #17
 8000ade:	d12c      	bne.n	8000b3a <WirelessReceive+0x1a6>
 8000ae0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d028      	beq.n	8000b3a <WirelessReceive+0x1a6>
					uint8_t ASK_Direction_Frame[4] ={0};
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[0] = CAR_ID ;
 8000aec:	2311      	movs	r3, #17
 8000aee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					ASK_Direction_Frame[1] = ASK_DIRECTION_OPERATION_ID ;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					ASK_Direction_Frame[2] = Front_Car_ID ;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <WirelessReceive+0x1fc>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					ASK_Direction_Frame[3] = My_Direction ;
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <WirelessReceive+0x204>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					osMutexAcquire(NRF_MutexHandle, HAL_MAX_DELAY) ;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <WirelessReceive+0x1f4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	4618      	mov	r0, r3
 8000b12:	f004 f97b 	bl	8004e0c <osMutexAcquire>
					NRF24_stopListening();
 8000b16:	f000 fcef 	bl	80014f8 <NRF24_stopListening>
					NRF24_writeAckPayload(1, ASK_Direction_Frame, 4);
 8000b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1e:	2204      	movs	r2, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	f000 ffe9 	bl	8001afa <NRF24_writeAckPayload>
					NRF24_startListening();
 8000b28:	f000 fcc0 	bl	80014ac <NRF24_startListening>
					osMutexRelease(NRF_MutexHandle) ;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <WirelessReceive+0x1f4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 f9c9 	bl	8004ec8 <osMutexRelease>
				{
 8000b36:	bf00      	nop
				break;
 8000b38:	e020      	b.n	8000b7c <WirelessReceive+0x1e8>
				else if ((CAR_ID == Received_Data[2] && TX_Flag))
 8000b3a:	7bbb      	ldrb	r3, [r7, #14]
 8000b3c:	2b11      	cmp	r3, #17
 8000b3e:	d11d      	bne.n	8000b7c <WirelessReceive+0x1e8>
 8000b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d019      	beq.n	8000b7c <WirelessReceive+0x1e8>
					if (	Received_Data[3]==	My_Direction)
 8000b48:	7bfa      	ldrb	r2, [r7, #15]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <WirelessReceive+0x204>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d106      	bne.n	8000b60 <WirelessReceive+0x1cc>
						osEventFlagsSet(EventGroupHandle, EEBL_ASSERTED ) ;
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <WirelessReceive+0x208>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2102      	movs	r1, #2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 ffef 	bl	8004b3c <osEventFlagsSet>
				break;
 8000b5e:	e00d      	b.n	8000b7c <WirelessReceive+0x1e8>
					else if(Received_Data[3]	!=	My_Direction)
 8000b60:	7bfa      	ldrb	r2, [r7, #15]
 8000b62:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <WirelessReceive+0x204>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d008      	beq.n	8000b7c <WirelessReceive+0x1e8>
						osEventFlagsSet(EventGroupHandle, FCW_ASSERTED ) ;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <WirelessReceive+0x208>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2103      	movs	r1, #3
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 ffe3 	bl	8004b3c <osEventFlagsSet>
				break;
 8000b76:	e001      	b.n	8000b7c <WirelessReceive+0x1e8>
				break;
 8000b78:	bf00      	nop
 8000b7a:	e000      	b.n	8000b7e <WirelessReceive+0x1ea>
				break;
 8000b7c:	bf00      	nop
			}

		}
		osDelay(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f003 ff5c 	bl	8004a3c <osDelay>
		if(NRF24_available()){
 8000b84:	e70a      	b.n	800099c <WirelessReceive+0x8>
 8000b86:	bf00      	nop
 8000b88:	200001a4 	.word	0x200001a4
 8000b8c:	20000318 	.word	0x20000318
 8000b90:	2000031c 	.word	0x2000031c
 8000b94:	2000031d 	.word	0x2000031d
 8000b98:	20000314 	.word	0x20000314
 8000b9c:	200001a8 	.word	0x200001a8

08000ba0 <FCW_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FCW_Task */
void FCW_Task(void *argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FCW_Task */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, FCW_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <FCW_Task+0x1c>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2103      	movs	r1, #3
 8000bb4:	f004 f81a 	bl	8004bec <osEventFlagsWait>
 8000bb8:	e7f6      	b.n	8000ba8 <FCW_Task+0x8>
 8000bba:	bf00      	nop
 8000bbc:	200001a8 	.word	0x200001a8

08000bc0 <EEBL_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EEBL_Task */
void EEBL_Task(void *argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN EEBL_Task */
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(EventGroupHandle, EEBL_ASSERTED , osFlagsWaitAny , HAL_MAX_DELAY ) ;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <EEBL_Task+0x1c>)
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	f004 f80a 	bl	8004bec <osEventFlagsWait>
 8000bd8:	e7f6      	b.n	8000bc8 <EEBL_Task+0x8>
 8000bda:	bf00      	nop
 8000bdc:	200001a8 	.word	0x200001a8

08000be0 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000bf2:	f001 f817 	bl	8001c24 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40000800 	.word	0x40000800

08000c04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_MspInit+0x68>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_MspInit+0x68>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_MspInit+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x68>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <HAL_MspInit+0x68>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x68>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	f06f 0001 	mvn.w	r0, #1
 8000c4e:	f001 f8de 	bl	8001e0e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_MspInit+0x6c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_MspInit+0x6c>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000

08000c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <HAL_SPI_MspInit+0x88>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d12f      	bne.n	8000d00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000ca6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <HAL_SPI_MspInit+0x8c>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cd0:	23a0      	movs	r3, #160	; 0xa0
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_SPI_MspInit+0x90>)
 8000ce4:	f001 faac 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <HAL_SPI_MspInit+0x90>)
 8000cfc:	f001 faa0 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800

08000d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <HAL_TIM_Base_MspInit+0x44>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d113      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_TIM_Base_MspInit+0x48>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <HAL_TIM_Base_MspInit+0x48>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_TIM_Base_MspInit+0x48>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	201d      	movs	r0, #29
 8000d44:	f001 f863 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d48:	201d      	movs	r0, #29
 8000d4a:	f001 f87c 	bl	8001e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40000400 	.word	0x40000400
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <HAL_UART_MspInit+0xd8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d157      	bne.n	8000e30 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d80:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_UART_MspInit+0xdc>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a2d      	ldr	r2, [pc, #180]	; (8000e3c <HAL_UART_MspInit+0xdc>)
 8000d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b2b      	ldr	r3, [pc, #172]	; (8000e3c <HAL_UART_MspInit+0xdc>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <HAL_UART_MspInit+0xdc>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_UART_MspInit+0xdc>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_UART_MspInit+0xdc>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	481e      	ldr	r0, [pc, #120]	; (8000e40 <HAL_UART_MspInit+0xe0>)
 8000dc6:	f001 fa3b 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0xe0>)
 8000de0:	f001 fa2e 	bl	8002240 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000de6:	4a18      	ldr	r2, [pc, #96]	; (8000e48 <HAL_UART_MspInit+0xe8>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000e16:	f001 f825 	bl	8001e64 <HAL_DMA_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000e20:	f7ff fef0 	bl	8000c04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000e28:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_UART_MspInit+0xe4>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010800 	.word	0x40010800
 8000e44:	2000013c 	.word	0x2000013c
 8000e48:	40020058 	.word	0x40020058

08000e4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08e      	sub	sp, #56	; 0x38
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000e62:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <HAL_InitTick+0xe8>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a33      	ldr	r2, [pc, #204]	; (8000f34 <HAL_InitTick+0xe8>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <HAL_InitTick+0xe8>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e7a:	f107 0210 	add.w	r2, r7, #16
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 ff81 	bl	8002d8c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d103      	bne.n	8000e9c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e94:	f001 ff52 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8000e98:	6378      	str	r0, [r7, #52]	; 0x34
 8000e9a:	e004      	b.n	8000ea6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e9c:	f001 ff4e 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea8:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <HAL_InitTick+0xec>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	0c9b      	lsrs	r3, r3, #18
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <HAL_InitTick+0xf0>)
 8000eb6:	4a22      	ldr	r2, [pc, #136]	; (8000f40 <HAL_InitTick+0xf4>)
 8000eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000eba:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <HAL_InitTick+0xf0>)
 8000ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	; (8000f3c <HAL_InitTick+0xf0>)
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <HAL_InitTick+0xf0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <HAL_InitTick+0xf0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_InitTick+0xf0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000eda:	4818      	ldr	r0, [pc, #96]	; (8000f3c <HAL_InitTick+0xf0>)
 8000edc:	f002 fd2c 	bl	8003938 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d11b      	bne.n	8000f26 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000eee:	4813      	ldr	r0, [pc, #76]	; (8000f3c <HAL_InitTick+0xf0>)
 8000ef0:	f002 fd72 	bl	80039d8 <HAL_TIM_Base_Start_IT>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000efa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d111      	bne.n	8000f26 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f02:	201e      	movs	r0, #30
 8000f04:	f000 ff9f 	bl	8001e46 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d808      	bhi.n	8000f20 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	201e      	movs	r0, #30
 8000f14:	f000 ff7b 	bl	8001e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_InitTick+0xf8>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e002      	b.n	8000f26 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3738      	adds	r7, #56	; 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	20000328 	.word	0x20000328
 8000f40:	40000800 	.word	0x40000800
 8000f44:	2000002c 	.word	0x2000002c

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f76:	2004      	movs	r0, #4
 8000f78:	f001 fafe 	bl	8002578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Channel5_IRQHandler+0x10>)
 8000f86:	f001 f827 	bl	8001fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000013c 	.word	0x2000013c

08000f94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <TIM3_IRQHandler+0x18>)
 8000f9a:	f002 fd6f 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  ulHighFrequencyTimerTicks++;
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <TIM3_IRQHandler+0x1c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a02      	ldr	r2, [pc, #8]	; (8000fb0 <TIM3_IRQHandler+0x1c>)
 8000fa6:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000ac 	.word	0x200000ac
 8000fb0:	20000370 	.word	0x20000370

08000fb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM4_IRQHandler+0x10>)
 8000fba:	f002 fd5f 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000328 	.word	0x20000328

08000fc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd4:	f7ff fff8 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fda:	490c      	ldr	r1, [pc, #48]	; (800100c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ff0:	4c09      	ldr	r4, [pc, #36]	; (8001018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f007 fa3d 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001002:	f7ff f8bf 	bl	8000184 <main>
  bx lr
 8001006:	4770      	bx	lr
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001010:	08008754 	.word	0x08008754
  ldr r2, =_sbss
 8001014:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001018:	2000394c 	.word	0x2000394c

0800101c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC1_2_IRQHandler>
	...

08001020 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;
#endif
//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <NRF24_DelayMicroSeconds+0x38>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <NRF24_DelayMicroSeconds+0x3c>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	0c9a      	lsrs	r2, r3, #18
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001040:	bf00      	nop
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	60fa      	str	r2, [r7, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1fa      	bne.n	8001042 <NRF24_DelayMicroSeconds+0x22>
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000028 	.word	0x20000028
 800105c:	165e9f81 	.word	0x165e9f81

08001060 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d008      	beq.n	8001080 <NRF24_csn+0x20>
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <NRF24_csn+0x38>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <NRF24_csn+0x3c>)
 8001074:	8811      	ldrh	r1, [r2, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fa65 	bl	8002548 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800107e:	e007      	b.n	8001090 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <NRF24_csn+0x38>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a05      	ldr	r2, [pc, #20]	; (800109c <NRF24_csn+0x3c>)
 8001086:	8811      	ldrh	r1, [r2, #0]
 8001088:	2200      	movs	r2, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fa5c 	bl	8002548 <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000388 	.word	0x20000388
 800109c:	2000038c 	.word	0x2000038c

080010a0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <NRF24_ce+0x20>
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <NRF24_ce+0x38>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <NRF24_ce+0x3c>)
 80010b4:	8811      	ldrh	r1, [r2, #0]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fa45 	bl	8002548 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80010be:	e007      	b.n	80010d0 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <NRF24_ce+0x38>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <NRF24_ce+0x3c>)
 80010c6:	8811      	ldrh	r1, [r2, #0]
 80010c8:	2200      	movs	r2, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fa3c 	bl	8002548 <HAL_GPIO_WritePin>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000388 	.word	0x20000388
 80010dc:	2000038e 	.word	0x2000038e

080010e0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ffb8 	bl	8001060 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010fa:	f107 010c 	add.w	r1, r7, #12
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2201      	movs	r2, #1
 8001102:	480a      	ldr	r0, [pc, #40]	; (800112c <NRF24_read_register+0x4c>)
 8001104:	f001 ff14 	bl	8002f30 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	1c59      	adds	r1, r3, #1
 800110e:	2364      	movs	r3, #100	; 0x64
 8001110:	2201      	movs	r2, #1
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <NRF24_read_register+0x4c>)
 8001114:	f002 f84f 	bl	80031b6 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001118:	7b7b      	ldrb	r3, [r7, #13]
 800111a:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff ff9f 	bl	8001060 <NRF24_csn>
	return retData;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000390 	.word	0x20000390

08001130 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff ff8d 	bl	8001060 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	b2db      	uxtb	r3, r3
 800114e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001150:	f107 010c 	add.w	r1, r7, #12
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	2201      	movs	r2, #1
 8001158:	4808      	ldr	r0, [pc, #32]	; (800117c <NRF24_read_registerN+0x4c>)
 800115a:	f001 fee9 	bl	8002f30 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	b29a      	uxth	r2, r3
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	6839      	ldr	r1, [r7, #0]
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <NRF24_read_registerN+0x4c>)
 8001168:	f002 f825 	bl	80031b6 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff77 	bl	8001060 <NRF24_csn>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000390 	.word	0x20000390

08001180 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	4613      	mov	r3, r2
 800118e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ff65 	bl	8001060 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	b2db      	uxtb	r3, r3
 800119e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80011a4:	f107 010c 	add.w	r1, r7, #12
 80011a8:	2364      	movs	r3, #100	; 0x64
 80011aa:	2202      	movs	r2, #2
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <NRF24_write_register+0x40>)
 80011ae:	f001 febf 	bl	8002f30 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff ff54 	bl	8001060 <NRF24_csn>
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000390 	.word	0x20000390

080011c4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(NRF_CSN_LOW);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ff43 	bl	8001060 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011e4:	f107 010c 	add.w	r1, r7, #12
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	2201      	movs	r2, #1
 80011ec:	4808      	ldr	r0, [pc, #32]	; (8001210 <NRF24_write_registerN+0x4c>)
 80011ee:	f001 fe9f 	bl	8002f30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	2364      	movs	r3, #100	; 0x64
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <NRF24_write_registerN+0x4c>)
 80011fc:	f001 fe98 	bl	8002f30 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001200:	2001      	movs	r0, #1
 8001202:	f7ff ff2d 	bl	8001060 <NRF24_csn>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000390 	.word	0x20000390

08001214 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(NRF_CSN_LOW);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff1d 	bl	8001060 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800122a:	f107 010f 	add.w	r1, r7, #15
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	2201      	movs	r2, #1
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <NRF24_write_payload+0x40>)
 8001234:	f001 fe7c 	bl	8002f30 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	b29a      	uxth	r2, r3
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <NRF24_write_payload+0x40>)
 8001242:	f001 fe75 	bl	8002f30 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(NRF_CSN_HIGH);
 8001246:	2001      	movs	r0, #1
 8001248:	f7ff ff0a 	bl	8001060 <NRF24_csn>
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000390 	.word	0x20000390

08001258 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001264:	f000 fa80 	bl	8001768 <NRF24_getPayloadSize>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	4293      	cmp	r3, r2
 8001270:	d303      	bcc.n	800127a <NRF24_read_payload+0x22>
 8001272:	f000 fa79 	bl	8001768 <NRF24_getPayloadSize>
 8001276:	4603      	mov	r3, r0
 8001278:	e000      	b.n	800127c <NRF24_read_payload+0x24>
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff feee 	bl	8001060 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001284:	2361      	movs	r3, #97	; 0x61
 8001286:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001288:	f107 010e 	add.w	r1, r7, #14
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	2201      	movs	r2, #1
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <NRF24_read_payload+0x5c>)
 8001292:	f001 fe4d 	bl	8002f30 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	b29a      	uxth	r2, r3
 800129a:	2364      	movs	r3, #100	; 0x64
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <NRF24_read_payload+0x5c>)
 80012a0:	f001 ff89 	bl	80031b6 <HAL_SPI_Receive>
	NRF24_csn(NRF_CSN_HIGH);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff fedb 	bl	8001060 <NRF24_csn>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000390 	.word	0x20000390

080012b8 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80012bc:	21ff      	movs	r1, #255	; 0xff
 80012be:	20e1      	movs	r0, #225	; 0xe1
 80012c0:	f7ff ff5e 	bl	8001180 <NRF24_write_register>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80012cc:	21ff      	movs	r1, #255	; 0xff
 80012ce:	20e2      	movs	r0, #226	; 0xe2
 80012d0:	f7ff ff56 	bl	8001180 <NRF24_write_register>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80012de:	2007      	movs	r0, #7
 80012e0:	f7ff fefe 	bl	80010e0 <NRF24_read_register>
 80012e4:	4603      	mov	r3, r0
 80012e6:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <NRF24_begin>:

//12. Begin function
void NRF24_begin(SPI_HandleTypeDef nrfSPI)
{
 80012f4:	b084      	sub	sp, #16
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	f107 0c10 	add.w	ip, r7, #16
 8001300:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//Copy SPI handle variable
	//Copy SPI handle variable
		memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001304:	4b64      	ldr	r3, [pc, #400]	; (8001498 <NRF24_begin+0x1a4>)
 8001306:	4618      	mov	r0, r3
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2258      	movs	r2, #88	; 0x58
 800130e:	4619      	mov	r1, r3
 8001310:	f007 f8d8 	bl	80084c4 <memcpy>
		//Copy Pins and Port variables
		nrf24_PORT = NRF_PORT;
 8001314:	4b61      	ldr	r3, [pc, #388]	; (800149c <NRF24_begin+0x1a8>)
 8001316:	4a62      	ldr	r2, [pc, #392]	; (80014a0 <NRF24_begin+0x1ac>)
 8001318:	601a      	str	r2, [r3, #0]
		nrf24_CSN_PIN = NRF_CSN_PIN_Pin;
 800131a:	4b62      	ldr	r3, [pc, #392]	; (80014a4 <NRF24_begin+0x1b0>)
 800131c:	2208      	movs	r2, #8
 800131e:	801a      	strh	r2, [r3, #0]
		nrf24_CE_PIN = NRF_CE_PIN_Pin;
 8001320:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <NRF24_begin+0x1b4>)
 8001322:	2210      	movs	r2, #16
 8001324:	801a      	strh	r2, [r3, #0]

	//Put pins to idle state
	NRF24_csn(NRF_CSN_HIGH);
 8001326:	2001      	movs	r0, #1
 8001328:	f7ff fe9a 	bl	8001060 <NRF24_csn>
	NRF24_ce(0);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff feb7 	bl	80010a0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001332:	2005      	movs	r0, #5
 8001334:	f000 fc92 	bl	8001c5c <HAL_Delay>
/**************************************************************/
/**************************************************************/
/**************************************************************/
	//**** Soft Reset Registers default values ****//
    //Pages    53 to 58
	NRF24_write_register(REG_CONFIG, 0x08);
 8001338:	2108      	movs	r1, #8
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff ff20 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_EN_AA, 0x3f);
 8001340:	213f      	movs	r1, #63	; 0x3f
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff ff1c 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_EN_RXADDR, 0x03);
 8001348:	2103      	movs	r1, #3
 800134a:	2002      	movs	r0, #2
 800134c:	f7ff ff18 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_AW, 0x03);
 8001350:	2103      	movs	r1, #3
 8001352:	2003      	movs	r0, #3
 8001354:	f7ff ff14 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_SETUP_RETR, 0x03);
 8001358:	2103      	movs	r1, #3
 800135a:	2004      	movs	r0, #4
 800135c:	f7ff ff10 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RF_CH, 0x02);
 8001360:	2102      	movs	r1, #2
 8001362:	2005      	movs	r0, #5
 8001364:	f7ff ff0c 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RF_SETUP, 0x0f);
 8001368:	210f      	movs	r1, #15
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff ff08 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_STATUS, 0x0e);
 8001370:	210e      	movs	r1, #14
 8001372:	2007      	movs	r0, #7
 8001374:	f7ff ff04 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_OBSERVE_TX, 0x00);
 8001378:	2100      	movs	r1, #0
 800137a:	2008      	movs	r0, #8
 800137c:	f7ff ff00 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_CD, 0x00);
 8001380:	2100      	movs	r1, #0
 8001382:	2009      	movs	r0, #9
 8001384:	f7ff fefc 	bl	8001180 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8001388:	23e7      	movs	r3, #231	; 0xe7
 800138a:	713b      	strb	r3, [r7, #4]
 800138c:	23e7      	movs	r3, #231	; 0xe7
 800138e:	70fb      	strb	r3, [r7, #3]
 8001390:	23e7      	movs	r3, #231	; 0xe7
 8001392:	70bb      	strb	r3, [r7, #2]
 8001394:	23e7      	movs	r3, #231	; 0xe7
 8001396:	707b      	strb	r3, [r7, #1]
 8001398:	23e7      	movs	r3, #231	; 0xe7
 800139a:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P0, pipeAddrVar, 5);
 800139c:	463b      	mov	r3, r7
 800139e:	2205      	movs	r2, #5
 80013a0:	4619      	mov	r1, r3
 80013a2:	200a      	movs	r0, #10
 80013a4:	f7ff ff0e 	bl	80011c4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80013a8:	23c2      	movs	r3, #194	; 0xc2
 80013aa:	713b      	strb	r3, [r7, #4]
 80013ac:	23c2      	movs	r3, #194	; 0xc2
 80013ae:	70fb      	strb	r3, [r7, #3]
 80013b0:	23c2      	movs	r3, #194	; 0xc2
 80013b2:	70bb      	strb	r3, [r7, #2]
 80013b4:	23c2      	movs	r3, #194	; 0xc2
 80013b6:	707b      	strb	r3, [r7, #1]
 80013b8:	23c2      	movs	r3, #194	; 0xc2
 80013ba:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_RX_ADDR_P1, pipeAddrVar, 5);
 80013bc:	463b      	mov	r3, r7
 80013be:	2205      	movs	r2, #5
 80013c0:	4619      	mov	r1, r3
 80013c2:	200b      	movs	r0, #11
 80013c4:	f7ff fefe 	bl	80011c4 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_ADDR_P2, 0xC3);
 80013c8:	21c3      	movs	r1, #195	; 0xc3
 80013ca:	200c      	movs	r0, #12
 80013cc:	f7ff fed8 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P3, 0xC4);
 80013d0:	21c4      	movs	r1, #196	; 0xc4
 80013d2:	200d      	movs	r0, #13
 80013d4:	f7ff fed4 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P4, 0xC5);
 80013d8:	21c5      	movs	r1, #197	; 0xc5
 80013da:	200e      	movs	r0, #14
 80013dc:	f7ff fed0 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_ADDR_P5, 0xC6);
 80013e0:	21c6      	movs	r1, #198	; 0xc6
 80013e2:	200f      	movs	r0, #15
 80013e4:	f7ff fecc 	bl	8001180 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80013e8:	23e7      	movs	r3, #231	; 0xe7
 80013ea:	713b      	strb	r3, [r7, #4]
 80013ec:	23e7      	movs	r3, #231	; 0xe7
 80013ee:	70fb      	strb	r3, [r7, #3]
 80013f0:	23e7      	movs	r3, #231	; 0xe7
 80013f2:	70bb      	strb	r3, [r7, #2]
 80013f4:	23e7      	movs	r3, #231	; 0xe7
 80013f6:	707b      	strb	r3, [r7, #1]
 80013f8:	23e7      	movs	r3, #231	; 0xe7
 80013fa:	703b      	strb	r3, [r7, #0]
	NRF24_write_registerN(REG_TX_ADDR, pipeAddrVar, 5);
 80013fc:	463b      	mov	r3, r7
 80013fe:	2205      	movs	r2, #5
 8001400:	4619      	mov	r1, r3
 8001402:	2010      	movs	r0, #16
 8001404:	f7ff fede 	bl	80011c4 <NRF24_write_registerN>
	NRF24_write_register(REG_RX_PW_P0, 0);
 8001408:	2100      	movs	r1, #0
 800140a:	2011      	movs	r0, #17
 800140c:	f7ff feb8 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P1, 0);
 8001410:	2100      	movs	r1, #0
 8001412:	2012      	movs	r0, #18
 8001414:	f7ff feb4 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P2, 0);
 8001418:	2100      	movs	r1, #0
 800141a:	2013      	movs	r0, #19
 800141c:	f7ff feb0 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P3, 0);
 8001420:	2100      	movs	r1, #0
 8001422:	2014      	movs	r0, #20
 8001424:	f7ff feac 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P4, 0);
 8001428:	2100      	movs	r1, #0
 800142a:	2015      	movs	r0, #21
 800142c:	f7ff fea8 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_RX_PW_P5, 0);
 8001430:	2100      	movs	r1, #0
 8001432:	2016      	movs	r0, #22
 8001434:	f7ff fea4 	bl	8001180 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8001438:	f000 fbc4 	bl	8001bc4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(REG_DYNPD, 0);
 800143c:	2100      	movs	r1, #0
 800143e:	201c      	movs	r0, #28
 8001440:	f7ff fe9e 	bl	8001180 <NRF24_write_register>
	NRF24_write_register(REG_FEATURE, 0);
 8001444:	2100      	movs	r1, #0
 8001446:	201d      	movs	r0, #29
 8001448:	f7ff fe9a 	bl	8001180 <NRF24_write_register>
    //Debugging With UART
#if DEBUG_ENABLED ==	ENABLED
	printRadioSettings();
#endif
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800144c:	210f      	movs	r1, #15
 800144e:	200f      	movs	r0, #15
 8001450:	f000 f944 	bl	80016dc <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 fa26 	bl	80018a6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 fa5c 	bl	8001918 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001460:	2002      	movs	r0, #2
 8001462:	f000 fa9f 	bl	80019a4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001466:	f000 f9f1 	bl	800184c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800146a:	2020      	movs	r0, #32
 800146c:	f000 f966 	bl	800173c <NRF24_setPayloadSize>
//	Interrupts Handling
#if TX_INTERRUPT == ENABLED
	NRF24_ActivateTXInterrupt();
#endif
#if RX_INTERRUPT == ENABLED
	NRF24_ActivateRXInterrupt();
 8001470:	f000 fac0 	bl	80019f4 <NRF24_ActivateRXInterrupt>
#endif
#if MAX_RT_INTERRUPT == ENABLED
	NRF24_ActivateMaxInterrupt();
#endif
	//Reset status register
	NRF24_resetStatus();
 8001474:	f000 fb9e 	bl	8001bb4 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001478:	204c      	movs	r0, #76	; 0x4c
 800147a:	f000 f94a 	bl	8001712 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800147e:	f7ff ff1b 	bl	80012b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001482:	f7ff ff21 	bl	80012c8 <NRF24_flush_rx>

	NRF24_powerDown();
 8001486:	f000 faca 	bl	8001a1e <NRF24_powerDown>

}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001494:	b004      	add	sp, #16
 8001496:	4770      	bx	lr
 8001498:	20000390 	.word	0x20000390
 800149c:	20000388 	.word	0x20000388
 80014a0:	40010800 	.word	0x40010800
 80014a4:	2000038c 	.word	0x2000038c
 80014a8:	2000038e 	.word	0x2000038e

080014ac <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fe15 	bl	80010e0 <NRF24_read_register>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f043 0303 	orr.w	r3, r3, #3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff fe5d 	bl	8001180 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <NRF24_startListening+0x48>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	d004      	beq.n	80014da <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80014d0:	2205      	movs	r2, #5
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <NRF24_startListening+0x48>)
 80014d4:	200a      	movs	r0, #10
 80014d6:	f7ff fe75 	bl	80011c4 <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 80014da:	f7ff feed 	bl	80012b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014de:	f7ff fef3 	bl	80012c8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f7ff fddc 	bl	80010a0 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80014e8:	2096      	movs	r0, #150	; 0x96
 80014ea:	f7ff fd99 	bl	8001020 <NRF24_DelayMicroSeconds>
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000378 	.word	0x20000378

080014f8 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff fdcf 	bl	80010a0 <NRF24_ce>
	NRF24_flush_tx();
 8001502:	f7ff fed9 	bl	80012b8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001506:	f7ff fedf 	bl	80012c8 <NRF24_flush_rx>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 800151c:	f000 fb4a 	bl	8001bb4 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fab9 	bl	8001a9c <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800152a:	f000 fb8d 	bl	8001c48 <HAL_GetTick>
 800152e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001530:	230a      	movs	r3, #10
 8001532:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001534:	f107 030d 	add.w	r3, r7, #13
 8001538:	2201      	movs	r2, #1
 800153a:	4619      	mov	r1, r3
 800153c:	2008      	movs	r0, #8
 800153e:	f7ff fdf7 	bl	8001130 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001542:	f7ff fec9 	bl	80012d8 <NRF24_get_status>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001550:	2b00      	cmp	r3, #0
 8001552:	d107      	bne.n	8001564 <NRF24_write+0x54>
 8001554:	f000 fb78 	bl	8001c48 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d8e7      	bhi.n	8001534 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001564:	f107 010b 	add.w	r1, r7, #11
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <NRF24_write+0x90>)
 800156e:	4618      	mov	r0, r3
 8001570:	f000 faed 	bl	8001b4e <NRF24_whatHappened>
	retStatus = tx_ok;
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <NRF24_write+0x90>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001580:	f000 f8fc 	bl	800177c <NRF24_getDynamicPayloadSize>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <NRF24_write+0x94>)
 800158a:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 800158c:	f000 f80c 	bl	80015a8 <NRF24_available>
	NRF24_flush_tx();
 8001590:	f7ff fe92 	bl	80012b8 <NRF24_flush_tx>
	return retStatus;
 8001594:	7bbb      	ldrb	r3, [r7, #14]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000380 	.word	0x20000380
 80015a4:	20000381 	.word	0x20000381

080015a8 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f000 fa45 	bl	8001a3c <NRF24_availablePipe>
 80015b2:	4603      	mov	r3, r0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fe45 	bl	8001258 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80015ce:	2017      	movs	r0, #23
 80015d0:	f7ff fd86 	bl	80010e0 <NRF24_read_register>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80015dc:	f7ff fe74 	bl	80012c8 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80015e0:	f000 f8cc 	bl	800177c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf14      	ite	ne
 80015ea:	2301      	movne	r3, #1
 80015ec:	2300      	moveq	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001602:	463b      	mov	r3, r7
 8001604:	2205      	movs	r2, #5
 8001606:	4619      	mov	r1, r3
 8001608:	200a      	movs	r0, #10
 800160a:	f7ff fddb 	bl	80011c4 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800160e:	463b      	mov	r3, r7
 8001610:	2205      	movs	r2, #5
 8001612:	4619      	mov	r1, r3
 8001614:	2010      	movs	r0, #16
 8001616:	f7ff fdd5 	bl	80011c4 <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 800161a:	2320      	movs	r3, #32
 800161c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <NRF24_openWritingPipe+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	4293      	cmp	r3, r2
 8001626:	bf28      	it	cs
 8001628:	4613      	movcs	r3, r2
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	2011      	movs	r0, #17
 8001630:	f7ff fda6 	bl	8001180 <NRF24_write_register>
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000382 	.word	0x20000382

08001640 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4601      	mov	r1, r0
 8001648:	e9c7 2300 	strd	r2, r3, [r7]
 800164c:	460b      	mov	r3, r1
 800164e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800165a:	491c      	ldr	r1, [pc, #112]	; (80016cc <NRF24_openReadingPipe+0x8c>)
 800165c:	e9c1 2300 	strd	r2, r3, [r1]

	if(number <= 6)
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d82d      	bhi.n	80016c2 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d808      	bhi.n	800167e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <NRF24_openReadingPipe+0x90>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	4639      	mov	r1, r7
 8001674:	2205      	movs	r2, #5
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fda4 	bl	80011c4 <NRF24_write_registerN>
 800167c:	e007      	b.n	800168e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <NRF24_openReadingPipe+0x90>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	4639      	mov	r1, r7
 8001686:	2201      	movs	r2, #1
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fd9b 	bl	80011c4 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <NRF24_openReadingPipe+0x94>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <NRF24_openReadingPipe+0x98>)
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fd70 	bl	8001180 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80016a0:	2002      	movs	r0, #2
 80016a2:	f7ff fd1d 	bl	80010e0 <NRF24_read_register>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b25a      	sxtb	r2, r3
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2101      	movs	r1, #1
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4619      	mov	r1, r3
 80016bc:	2002      	movs	r0, #2
 80016be:	f7ff fd5f 	bl	8001180 <NRF24_write_register>
	}

}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000378 	.word	0x20000378
 80016d0:	08008728 	.word	0x08008728
 80016d4:	08008730 	.word	0x08008730
 80016d8:	20000382 	.word	0x20000382

080016dc <NRF24_setRetries>:
/**************************************************************/
/**************************************************************/
//20 set transmit retries (rf24_Retries_e) and delay
//retransmits a packet if an ACK packet is not received
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	460a      	mov	r2, r1
 80016e6:	71fb      	strb	r3, [r7, #7]
 80016e8:	4613      	mov	r3, r2
 80016ea:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	2004      	movs	r0, #4
 8001706:	f7ff fd3b 	bl	8001180 <NRF24_write_register>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <NRF24_setChannel>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 800171c:	237f      	movs	r3, #127	; 0x7f
 800171e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4293      	cmp	r3, r2
 8001726:	bf28      	it	cs
 8001728:	4613      	movcs	r3, r2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4619      	mov	r1, r3
 800172e:	2005      	movs	r0, #5
 8001730:	f7ff fd26 	bl	8001180 <NRF24_write_register>
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <NRF24_setPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//22. Set payload size global variable that will be used in SPI Transmission
void NRF24_setPayloadSize(uint8_t size)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001746:	2320      	movs	r3, #32
 8001748:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4293      	cmp	r3, r2
 8001750:	bf28      	it	cs
 8001752:	4613      	movcs	r3, r2
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b03      	ldr	r3, [pc, #12]	; (8001764 <NRF24_setPayloadSize+0x28>)
 8001758:	701a      	strb	r2, [r3, #0]
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	20000382 	.word	0x20000382

08001768 <NRF24_getPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	return payload_size;
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <NRF24_getPayloadSize+0x10>)
 800176e:	781b      	ldrb	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	20000382 	.word	0x20000382

0800177c <NRF24_getDynamicPayloadSize>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001780:	2060      	movs	r0, #96	; 0x60
 8001782:	f7ff fcad 	bl	80010e0 <NRF24_read_register>
 8001786:	4603      	mov	r3, r0
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}

0800178c <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001790:	201d      	movs	r0, #29
 8001792:	f7ff fca5 	bl	80010e0 <NRF24_read_register>
 8001796:	4603      	mov	r3, r0
 8001798:	f043 0306 	orr.w	r3, r3, #6
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	201d      	movs	r0, #29
 80017a2:	f7ff fced 	bl	8001180 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80017a6:	201d      	movs	r0, #29
 80017a8:	f7ff fc9a 	bl	80010e0 <NRF24_read_register>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80017b2:	f000 fa07 	bl	8001bc4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80017b6:	201d      	movs	r0, #29
 80017b8:	f7ff fc92 	bl	80010e0 <NRF24_read_register>
 80017bc:	4603      	mov	r3, r0
 80017be:	f043 0306 	orr.w	r3, r3, #6
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4619      	mov	r1, r3
 80017c6:	201d      	movs	r0, #29
 80017c8:	f7ff fcda 	bl	8001180 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80017cc:	201c      	movs	r0, #28
 80017ce:	f7ff fc87 	bl	80010e0 <NRF24_read_register>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f043 0303 	orr.w	r3, r3, #3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4619      	mov	r1, r3
 80017dc:	201c      	movs	r0, #28
 80017de:	f7ff fccf 	bl	8001180 <NRF24_write_register>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <NRF24_enableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80017ec:	201d      	movs	r0, #29
 80017ee:	f7ff fc77 	bl	80010e0 <NRF24_read_register>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	201d      	movs	r0, #29
 80017fe:	f7ff fcbf 	bl	8001180 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001802:	201d      	movs	r0, #29
 8001804:	f7ff fc6c 	bl	80010e0 <NRF24_read_register>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10c      	bne.n	8001828 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800180e:	f000 f9d9 	bl	8001bc4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001812:	201d      	movs	r0, #29
 8001814:	f7ff fc64 	bl	80010e0 <NRF24_read_register>
 8001818:	4603      	mov	r3, r0
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	b2db      	uxtb	r3, r3
 8001820:	4619      	mov	r1, r3
 8001822:	201d      	movs	r0, #29
 8001824:	f7ff fcac 	bl	8001180 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001828:	201c      	movs	r0, #28
 800182a:	f7ff fc59 	bl	80010e0 <NRF24_read_register>
 800182e:	4603      	mov	r3, r0
 8001830:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	201c      	movs	r0, #28
 800183a:	f7ff fca1 	bl	8001180 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800183e:	4b02      	ldr	r3, [pc, #8]	; (8001848 <NRF24_enableDynamicPayloads+0x60>)
 8001840:	2201      	movs	r2, #1
 8001842:	701a      	strb	r2, [r3, #0]

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000383 	.word	0x20000383

0800184c <NRF24_disableDynamicPayloads>:
/**************************************************************/
/**************************************************************/
/**************************************************************/
void NRF24_disableDynamicPayloads(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001850:	201d      	movs	r0, #29
 8001852:	f7ff fc45 	bl	80010e0 <NRF24_read_register>
 8001856:	4603      	mov	r3, r0
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4619      	mov	r1, r3
 8001860:	201d      	movs	r0, #29
 8001862:	f7ff fc8d 	bl	8001180 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8001866:	2100      	movs	r1, #0
 8001868:	201c      	movs	r0, #28
 800186a:	f7ff fc89 	bl	8001180 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800186e:	4b02      	ldr	r3, [pc, #8]	; (8001878 <NRF24_disableDynamicPayloads+0x2c>)
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000383 	.word	0x20000383

0800187c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800188c:	213f      	movs	r1, #63	; 0x3f
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fc76 	bl	8001180 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001894:	e003      	b.n	800189e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001896:	2100      	movs	r1, #0
 8001898:	2001      	movs	r0, #1
 800189a:	f7ff fc71 	bl	8001180 <NRF24_write_register>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80018b0:	2006      	movs	r0, #6
 80018b2:	f7ff fc15 	bl	80010e0 <NRF24_read_register>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f023 0306 	bic.w	r3, r3, #6
 80018c0:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d104      	bne.n	80018d2 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	f043 0306 	orr.w	r3, r3, #6
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e019      	b.n	8001906 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d104      	bne.n	80018e2 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e011      	b.n	8001906 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d104      	bne.n	80018f2 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e009      	b.n	8001906 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d103      	bne.n	8001906 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	f043 0306 	orr.w	r3, r3, #6
 8001904:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	4619      	mov	r1, r3
 800190a:	2006      	movs	r0, #6
 800190c:	f7ff fc38 	bl	8001180 <NRF24_write_register>
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001926:	2006      	movs	r0, #6
 8001928:	f7ff fbda 	bl	80010e0 <NRF24_read_register>
 800192c:	4603      	mov	r3, r0
 800192e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <NRF24_setDataRate+0x88>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001936:	7bbb      	ldrb	r3, [r7, #14]
 8001938:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800193c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d107      	bne.n	8001954 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <NRF24_setDataRate+0x88>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800194a:	7bbb      	ldrb	r3, [r7, #14]
 800194c:	f043 0320 	orr.w	r3, r3, #32
 8001950:	73bb      	strb	r3, [r7, #14]
 8001952:	e00d      	b.n	8001970 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <NRF24_setDataRate+0x88>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	f043 0308 	orr.w	r3, r3, #8
 8001966:	73bb      	strb	r3, [r7, #14]
 8001968:	e002      	b.n	8001970 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <NRF24_setDataRate+0x88>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001970:	7bbb      	ldrb	r3, [r7, #14]
 8001972:	4619      	mov	r1, r3
 8001974:	2006      	movs	r0, #6
 8001976:	f7ff fc03 	bl	8001180 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800197a:	2006      	movs	r0, #6
 800197c:	f7ff fbb0 	bl	80010e0 <NRF24_read_register>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	4293      	cmp	r3, r2
 8001988:	d102      	bne.n	8001990 <NRF24_setDataRate+0x78>
  {
    result = true;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e002      	b.n	8001996 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <NRF24_setDataRate+0x88>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000384 	.word	0x20000384

080019a4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fb96 	bl	80010e0 <NRF24_read_register>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f023 030c 	bic.w	r3, r3, #12
 80019ba:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00f      	beq.n	80019e2 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d104      	bne.n	80019d2 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e007      	b.n	80019e2 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4619      	mov	r1, r3
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fbca 	bl	8001180 <NRF24_write_register>
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <NRF24_ActivateRXInterrupt>:
void NRF24_ActivateRXInterrupt(void){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	int8_t config = NRF24_read_register(REG_CONFIG);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fb70 	bl	80010e0 <NRF24_read_register>
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
	config |= _BV(6);	//6 is the bit of the MASK_RX_DR
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a0a:	71fb      	strb	r3, [r7, #7]
	NRF24_write_register(REG_CONFIG, config);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fbb5 	bl	8001180 <NRF24_write_register>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fb5c 	bl	80010e0 <NRF24_read_register>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f023 0302 	bic.w	r3, r3, #2
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff fba4 	bl	8001180 <NRF24_write_register>
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001a44:	f7ff fc48 	bl	80012d8 <NRF24_get_status>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d017      	beq.n	8001a92 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001a78:	2140      	movs	r1, #64	; 0x40
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f7ff fb80 	bl	8001180 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001a8a:	2120      	movs	r1, #32
 8001a8c:	2007      	movs	r0, #7
 8001a8e:	f7ff fb77 	bl	8001180 <NRF24_write_register>
    }
  }
  return result;
 8001a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff faf9 	bl	80010a0 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fb16 	bl	80010e0 <NRF24_read_register>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fb5b 	bl	8001180 <NRF24_write_register>
  NRF24_ce(1);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fae8 	bl	80010a0 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001ad0:	2096      	movs	r0, #150	; 0x96
 8001ad2:	f7ff faa5 	bl	8001020 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001ad6:	78fb      	ldrb	r3, [r7, #3]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fb9a 	bl	8001214 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff fadd 	bl	80010a0 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f7ff fa9a 	bl	8001020 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff fad7 	bl	80010a0 <NRF24_ce>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <NRF24_writeAckPayload>:
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	6039      	str	r1, [r7, #0]
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	4613      	mov	r3, r2
 8001b08:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8001b0e:	2320      	movs	r3, #32
 8001b10:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001b12:	7afa      	ldrb	r2, [r7, #11]
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	bf28      	it	cs
 8001b1a:	4613      	movcs	r3, r2
 8001b1c:	72bb      	strb	r3, [r7, #10]

  NRF24_csn(NRF_CSN_LOW);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fa9e 	bl	8001060 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	7aba      	ldrb	r2, [r7, #10]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fb42 	bl	80011c4 <NRF24_write_registerN>
  NRF24_csn(NRF_CSN_HIGH);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff fa8d 	bl	8001060 <NRF24_csn>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001b5a:	f7ff fbbd 	bl	80012d8 <NRF24_get_status>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001b68:	2170      	movs	r1, #112	; 0x70
 8001b6a:	2007      	movs	r0, #7
 8001b6c:	f7ff fb08 	bl	8001180 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	bf14      	ite	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	2300      	moveq	r3, #0
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	701a      	strb	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001bb8:	2170      	movs	r1, #112	; 0x70
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f7ff fae0 	bl	8001180 <NRF24_write_register>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <NRF24_ACTIVATE_cmd>:
/**************************************************************/
/**************************************************************/
//47. ACTIVATE cmd
//Page 46 in Datasheet
void NRF24_ACTIVATE_cmd(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(NRF_CSN_LOW);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff fa48 	bl	8001060 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001bd0:	2350      	movs	r3, #80	; 0x50
 8001bd2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001bd4:	2373      	movs	r3, #115	; 0x73
 8001bd6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001bd8:	1d39      	adds	r1, r7, #4
 8001bda:	2364      	movs	r3, #100	; 0x64
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <NRF24_ACTIVATE_cmd+0x30>)
 8001be0:	f001 f9a6 	bl	8002f30 <HAL_SPI_Transmit>
	NRF24_csn(NRF_CSN_HIGH);
 8001be4:	2001      	movs	r0, #1
 8001be6:	f7ff fa3b 	bl	8001060 <NRF24_csn>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000390 	.word	0x20000390

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x28>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f8f5 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f7ff f91c 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7fe fffc 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x1c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x20>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_IncTick+0x20>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000030 	.word	0x20000030
 8001c44:	200003e8 	.word	0x200003e8

08001c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <HAL_GetTick+0x10>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	200003e8 	.word	0x200003e8

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffe0 	bl	8001c48 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000030 	.word	0x20000030

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4906      	ldr	r1, [pc, #24]	; (8001d3c <__NVIC_EnableIRQ+0x34>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff4f 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff64 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ffb2 	bl	8001d94 <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff81 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff57 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e043      	b.n	8001f02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_DMA_Init+0xa8>)
 8001e82:	4413      	add	r3, r2
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_DMA_Init+0xac>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	009a      	lsls	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <HAL_DMA_Init+0xb0>)
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001eae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001eb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	bffdfff8 	.word	0xbffdfff8
 8001f10:	cccccccd 	.word	0xcccccccd
 8001f14:	40020000 	.word	0x40020000

08001f18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Start_IT+0x20>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e04b      	b.n	8001fd0 <HAL_DMA_Start_IT+0xb8>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d13a      	bne.n	8001fc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f937 	bl	80021e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 020e 	orr.w	r2, r2, #14
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00f      	b.n	8001fb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0204 	bic.w	r2, r2, #4
 8001f9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 020a 	orr.w	r2, r2, #10
 8001fae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e005      	b.n	8001fce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d04f      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xc8>
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04a      	beq.n	80020a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0204 	bic.w	r2, r2, #4
 8002026:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a66      	ldr	r2, [pc, #408]	; (80021c8 <HAL_DMA_IRQHandler+0x1f0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d029      	beq.n	8002086 <HAL_DMA_IRQHandler+0xae>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a65      	ldr	r2, [pc, #404]	; (80021cc <HAL_DMA_IRQHandler+0x1f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d022      	beq.n	8002082 <HAL_DMA_IRQHandler+0xaa>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a63      	ldr	r2, [pc, #396]	; (80021d0 <HAL_DMA_IRQHandler+0x1f8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01a      	beq.n	800207c <HAL_DMA_IRQHandler+0xa4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a62      	ldr	r2, [pc, #392]	; (80021d4 <HAL_DMA_IRQHandler+0x1fc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d012      	beq.n	8002076 <HAL_DMA_IRQHandler+0x9e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a60      	ldr	r2, [pc, #384]	; (80021d8 <HAL_DMA_IRQHandler+0x200>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00a      	beq.n	8002070 <HAL_DMA_IRQHandler+0x98>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5f      	ldr	r2, [pc, #380]	; (80021dc <HAL_DMA_IRQHandler+0x204>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d102      	bne.n	800206a <HAL_DMA_IRQHandler+0x92>
 8002064:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002068:	e00e      	b.n	8002088 <HAL_DMA_IRQHandler+0xb0>
 800206a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800206e:	e00b      	b.n	8002088 <HAL_DMA_IRQHandler+0xb0>
 8002070:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002074:	e008      	b.n	8002088 <HAL_DMA_IRQHandler+0xb0>
 8002076:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800207a:	e005      	b.n	8002088 <HAL_DMA_IRQHandler+0xb0>
 800207c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002080:	e002      	b.n	8002088 <HAL_DMA_IRQHandler+0xb0>
 8002082:	2340      	movs	r3, #64	; 0x40
 8002084:	e000      	b.n	8002088 <HAL_DMA_IRQHandler+0xb0>
 8002086:	2304      	movs	r3, #4
 8002088:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <HAL_DMA_IRQHandler+0x208>)
 800208a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8094 	beq.w	80021be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800209e:	e08e      	b.n	80021be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	2202      	movs	r2, #2
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d056      	beq.n	800215e <HAL_DMA_IRQHandler+0x186>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d051      	beq.n	800215e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10b      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 020a 	bic.w	r2, r2, #10
 80020d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <HAL_DMA_IRQHandler+0x1f0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d029      	beq.n	800213e <HAL_DMA_IRQHandler+0x166>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a37      	ldr	r2, [pc, #220]	; (80021cc <HAL_DMA_IRQHandler+0x1f4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <HAL_DMA_IRQHandler+0x162>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a35      	ldr	r2, [pc, #212]	; (80021d0 <HAL_DMA_IRQHandler+0x1f8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01a      	beq.n	8002134 <HAL_DMA_IRQHandler+0x15c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <HAL_DMA_IRQHandler+0x1fc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d012      	beq.n	800212e <HAL_DMA_IRQHandler+0x156>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_DMA_IRQHandler+0x200>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00a      	beq.n	8002128 <HAL_DMA_IRQHandler+0x150>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a31      	ldr	r2, [pc, #196]	; (80021dc <HAL_DMA_IRQHandler+0x204>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d102      	bne.n	8002122 <HAL_DMA_IRQHandler+0x14a>
 800211c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002120:	e00e      	b.n	8002140 <HAL_DMA_IRQHandler+0x168>
 8002122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002126:	e00b      	b.n	8002140 <HAL_DMA_IRQHandler+0x168>
 8002128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212c:	e008      	b.n	8002140 <HAL_DMA_IRQHandler+0x168>
 800212e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002132:	e005      	b.n	8002140 <HAL_DMA_IRQHandler+0x168>
 8002134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002138:	e002      	b.n	8002140 <HAL_DMA_IRQHandler+0x168>
 800213a:	2320      	movs	r3, #32
 800213c:	e000      	b.n	8002140 <HAL_DMA_IRQHandler+0x168>
 800213e:	2302      	movs	r3, #2
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_DMA_IRQHandler+0x208>)
 8002142:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d034      	beq.n	80021be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800215c:	e02f      	b.n	80021be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	2208      	movs	r2, #8
 8002164:	409a      	lsls	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d028      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x1e8>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d023      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020e 	bic.w	r2, r2, #14
 8002186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d004      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
    }
  }
  return;
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
}
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40020008 	.word	0x40020008
 80021cc:	4002001c 	.word	0x4002001c
 80021d0:	40020030 	.word	0x40020030
 80021d4:	40020044 	.word	0x40020044
 80021d8:	40020058 	.word	0x40020058
 80021dc:	4002006c 	.word	0x4002006c
 80021e0:	40020000 	.word	0x40020000

080021e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d108      	bne.n	8002224 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002222:	e007      	b.n	8002234 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	60da      	str	r2, [r3, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	; 0x2c
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002252:	e169      	b.n	8002528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002254:	2201      	movs	r2, #1
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8158 	bne.w	8002522 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a9a      	ldr	r2, [pc, #616]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d05e      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 800227c:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d875      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 8002282:	4a98      	ldr	r2, [pc, #608]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d058      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002288:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d86f      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800228e:	4a96      	ldr	r2, [pc, #600]	; (80024e8 <HAL_GPIO_Init+0x2a8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d052      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002294:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_GPIO_Init+0x2a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d869      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800229a:	4a94      	ldr	r2, [pc, #592]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d04c      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022a0:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d863      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022a6:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d046      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022ac:	4a90      	ldr	r2, [pc, #576]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d85d      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d82a      	bhi.n	800230c <HAL_GPIO_Init+0xcc>
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d859      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <HAL_GPIO_Init+0x80>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	0800233b 	.word	0x0800233b
 80022c4:	08002315 	.word	0x08002315
 80022c8:	08002327 	.word	0x08002327
 80022cc:	08002369 	.word	0x08002369
 80022d0:	0800236f 	.word	0x0800236f
 80022d4:	0800236f 	.word	0x0800236f
 80022d8:	0800236f 	.word	0x0800236f
 80022dc:	0800236f 	.word	0x0800236f
 80022e0:	0800236f 	.word	0x0800236f
 80022e4:	0800236f 	.word	0x0800236f
 80022e8:	0800236f 	.word	0x0800236f
 80022ec:	0800236f 	.word	0x0800236f
 80022f0:	0800236f 	.word	0x0800236f
 80022f4:	0800236f 	.word	0x0800236f
 80022f8:	0800236f 	.word	0x0800236f
 80022fc:	0800236f 	.word	0x0800236f
 8002300:	0800236f 	.word	0x0800236f
 8002304:	0800231d 	.word	0x0800231d
 8002308:	08002331 	.word	0x08002331
 800230c:	4a79      	ldr	r2, [pc, #484]	; (80024f4 <HAL_GPIO_Init+0x2b4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002312:	e02c      	b.n	800236e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e029      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	3304      	adds	r3, #4
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e024      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	3308      	adds	r3, #8
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e01f      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	330c      	adds	r3, #12
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e01a      	b.n	8002370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002342:	2304      	movs	r3, #4
 8002344:	623b      	str	r3, [r7, #32]
          break;
 8002346:	e013      	b.n	8002370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002350:	2308      	movs	r3, #8
 8002352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	611a      	str	r2, [r3, #16]
          break;
 800235a:	e009      	b.n	8002370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	615a      	str	r2, [r3, #20]
          break;
 8002366:	e003      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
          break;
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x130>
          break;
 800236e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2bff      	cmp	r3, #255	; 0xff
 8002374:	d801      	bhi.n	800237a <HAL_GPIO_Init+0x13a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	e001      	b.n	800237e <HAL_GPIO_Init+0x13e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d802      	bhi.n	800238c <HAL_GPIO_Init+0x14c>
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x152>
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3b08      	subs	r3, #8
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	210f      	movs	r1, #15
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80b1 	beq.w	8002522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c0:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d8:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_GPIO_Init+0x2bc>)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a40      	ldr	r2, [pc, #256]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x1ec>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3f      	ldr	r2, [pc, #252]	; (8002504 <HAL_GPIO_Init+0x2c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1e8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3e      	ldr	r2, [pc, #248]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1e4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3d      	ldr	r2, [pc, #244]	; (800250c <HAL_GPIO_Init+0x2cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1e0>
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002420:	2304      	movs	r3, #4
 8002422:	e004      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002424:	2302      	movs	r3, #2
 8002426:	e002      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 800242c:	2300      	movs	r3, #0
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	f002 0203 	and.w	r2, r2, #3
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	4093      	lsls	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800243e:	492f      	ldr	r1, [pc, #188]	; (80024fc <HAL_GPIO_Init+0x2bc>)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	492c      	ldr	r1, [pc, #176]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4928      	ldr	r1, [pc, #160]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002470:	4013      	ands	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	43db      	mvns	r3, r3
 8002496:	491e      	ldr	r1, [pc, #120]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002498:	4013      	ands	r3, r2
 800249a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4918      	ldr	r1, [pc, #96]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	43db      	mvns	r3, r3
 80024be:	4914      	ldr	r1, [pc, #80]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d021      	beq.n	8002514 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e021      	b.n	8002522 <HAL_GPIO_Init+0x2e2>
 80024de:	bf00      	nop
 80024e0:	10320000 	.word	0x10320000
 80024e4:	10310000 	.word	0x10310000
 80024e8:	10220000 	.word	0x10220000
 80024ec:	10210000 	.word	0x10210000
 80024f0:	10120000 	.word	0x10120000
 80024f4:	10110000 	.word	0x10110000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	40010800 	.word	0x40010800
 8002504:	40010c00 	.word	0x40010c00
 8002508:	40011000 	.word	0x40011000
 800250c:	40011400 	.word	0x40011400
 8002510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_GPIO_Init+0x304>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	43db      	mvns	r3, r3
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <HAL_GPIO_Init+0x304>)
 800251e:	4013      	ands	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f47f ae8e 	bne.w	8002254 <HAL_GPIO_Init+0x14>
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	372c      	adds	r7, #44	; 0x2c
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40010400 	.word	0x40010400

08002548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	807b      	strh	r3, [r7, #2]
 8002554:	4613      	mov	r3, r2
 8002556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002558:	787b      	ldrb	r3, [r7, #1]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002564:	e003      	b.n	800256e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002566:	887b      	ldrh	r3, [r7, #2]
 8002568:	041a      	lsls	r2, r3, #16
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe f804 	bl	80005a4 <HAL_GPIO_EXTI_Callback>
  }
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010400 	.word	0x40010400

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e272      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x12c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e24c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x76>
 8002610:	4b80      	ldr	r3, [pc, #512]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7f      	ldr	r2, [pc, #508]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b78      	ldr	r3, [pc, #480]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xbc>
 800264a:	4b72      	ldr	r3, [pc, #456]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a71      	ldr	r2, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002664:	4b6b      	ldr	r3, [pc, #428]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a67      	ldr	r2, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7ff fae0 	bl	8001c48 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fadc 	bl	8001c48 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e200      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe4>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff facc 	bl	8001c48 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff fac8 	bl	8001c48 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1ec      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x10c>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c0      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4939      	ldr	r1, [pc, #228]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7ff fa81 	bl	8001c48 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7ff fa7d 	bl	8001c48 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4927      	ldr	r1, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7ff fa60 	bl	8001c48 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7ff fa5c 	bl	8001c48 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e180      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03a      	beq.n	800282c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7ff fa40 	bl	8001c48 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7ff fa3c 	bl	8001c48 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e160      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 fafe 	bl	8002dec <RCC_Delay>
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff fa26 	bl	8001c48 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7ff fa22 	bl	8001c48 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e146      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	42420000 	.word	0x42420000
 800281c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e9      	bne.n	8002800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a6 	beq.w	8002986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b8b      	ldr	r3, [pc, #556]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a87      	ldr	r2, [pc, #540]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7e      	ldr	r2, [pc, #504]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7ff f9e3 	bl	8001c48 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7ff f9df 	bl	8001c48 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e103      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b75      	ldr	r3, [pc, #468]	; (8002a70 <HAL_RCC_OscConfig+0x4c8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x334>
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b67      	ldr	r3, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a66      	ldr	r2, [pc, #408]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x356>
 80028e4:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a60      	ldr	r2, [pc, #384]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a5d      	ldr	r2, [pc, #372]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028fe:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a5a      	ldr	r2, [pc, #360]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a57      	ldr	r2, [pc, #348]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7ff f993 	bl	8001c48 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7ff f98f 	bl	8001c48 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0b1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x37e>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7ff f97d 	bl	8001c48 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7ff f979 	bl	8001c48 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e09b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b3c      	ldr	r3, [pc, #240]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a3b      	ldr	r2, [pc, #236]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8087 	beq.w	8002a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d061      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7ff f94d 	bl	8001c48 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7ff f949 	bl	8001c48 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e06d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4921      	ldr	r1, [pc, #132]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a19      	ldr	r1, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	430b      	orrs	r3, r1
 80029fe:	491b      	ldr	r1, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7ff f91d 	bl	8001c48 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7ff f919 	bl	8001c48 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e03d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
 8002a30:	e035      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff f906 	bl	8001c48 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff f902 	bl	8001c48 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e026      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x498>
 8002a5e:	e01e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d107      	bne.n	8002a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e019      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x500>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d0      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d910      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b67      	ldr	r3, [pc, #412]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 0207 	bic.w	r2, r3, #7
 8002ad6:	4965      	ldr	r1, [pc, #404]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0b8      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b20:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a52      	ldr	r2, [pc, #328]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	494d      	ldr	r1, [pc, #308]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d040      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d115      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e07f      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e073      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06b      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8a:	4b39      	ldr	r3, [pc, #228]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 0203 	bic.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	4936      	ldr	r1, [pc, #216]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b9c:	f7ff f854 	bl	8001c48 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba4:	f7ff f850 	bl	8001c48 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e053      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 020c 	and.w	r2, r3, #12
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1eb      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b27      	ldr	r3, [pc, #156]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d210      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4922      	ldr	r1, [pc, #136]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e032      	b.n	8002c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4916      	ldr	r1, [pc, #88]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	490e      	ldr	r1, [pc, #56]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c3a:	f000 f821 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	490a      	ldr	r1, [pc, #40]	; (8002c74 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	5ccb      	ldrb	r3, [r1, r3]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1cc>)
 8002c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x1d0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe f8f6 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08008710 	.word	0x08008710
 8002c78:	20000028 	.word	0x20000028
 8002c7c:	2000002c 	.word	0x2000002c

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8002cae:	e027      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	e027      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cc0:	5cd3      	ldrb	r3, [r2, r3]
 8002cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	0c5b      	lsrs	r3, r3, #17
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e004      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cf4:	fb02 f303 	mul.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d02:	613b      	str	r3, [r7, #16]
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	693b      	ldr	r3, [r7, #16]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	007a1200 	.word	0x007a1200
 8002d1c:	08008738 	.word	0x08008738
 8002d20:	08008748 	.word	0x08008748
 8002d24:	003d0900 	.word	0x003d0900

08002d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	20000028 	.word	0x20000028

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff2 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	0a1b      	lsrs	r3, r3, #8
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	08008720 	.word	0x08008720

08002d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d68:	f7ff ffde 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0adb      	lsrs	r3, r3, #11
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4903      	ldr	r1, [pc, #12]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08008720 	.word	0x08008720

08002d8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	220f      	movs	r2, #15
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <HAL_RCC_GetClockConfig+0x58>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_RCC_GetClockConfig+0x58>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <HAL_RCC_GetClockConfig+0x58>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_RCC_GetClockConfig+0x58>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	08db      	lsrs	r3, r3, #3
 8002dc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_RCC_GetClockConfig+0x5c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0207 	and.w	r2, r3, #7
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40022000 	.word	0x40022000

08002dec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <RCC_Delay+0x34>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <RCC_Delay+0x38>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a5b      	lsrs	r3, r3, #9
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e08:	bf00      	nop
  }
  while (Delay --);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	60fa      	str	r2, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <RCC_Delay+0x1c>
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	20000028 	.word	0x20000028
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e076      	b.n	8002f28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e4a:	d009      	beq.n	8002e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
 8002e52:	e005      	b.n	8002e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd ff00 	bl	8000c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	ea42 0103 	orr.w	r1, r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	0c1a      	lsrs	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f002 0204 	and.w	r2, r2, #4
 8002f06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_SPI_Transmit+0x22>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e12d      	b.n	80031ae <HAL_SPI_Transmit+0x27e>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f5a:	f7fe fe75 	bl	8001c48 <HAL_GetTick>
 8002f5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d002      	beq.n	8002f76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
 8002f72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f74:	e116      	b.n	80031a4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Transmit+0x52>
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f86:	e10d      	b.n	80031a4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fce:	d10f      	bne.n	8002ff0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d007      	beq.n	800300e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800300c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003016:	d14f      	bne.n	80030b8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_SPI_Transmit+0xf6>
 8003020:	8afb      	ldrh	r3, [r7, #22]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d142      	bne.n	80030ac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	881a      	ldrh	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	1c9a      	adds	r2, r3, #2
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800304a:	e02f      	b.n	80030ac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d112      	bne.n	8003080 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	881a      	ldrh	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	1c9a      	adds	r2, r3, #2
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	86da      	strh	r2, [r3, #54]	; 0x36
 800307e:	e015      	b.n	80030ac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003080:	f7fe fde2 	bl	8001c48 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d803      	bhi.n	8003098 <HAL_SPI_Transmit+0x168>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d102      	bne.n	800309e <HAL_SPI_Transmit+0x16e>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030aa:	e07b      	b.n	80031a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ca      	bne.n	800304c <HAL_SPI_Transmit+0x11c>
 80030b6:	e050      	b.n	800315a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_Transmit+0x196>
 80030c0:	8afb      	ldrh	r3, [r7, #22]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d144      	bne.n	8003150 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80030ec:	e030      	b.n	8003150 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d113      	bne.n	8003124 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	86da      	strh	r2, [r3, #54]	; 0x36
 8003122:	e015      	b.n	8003150 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003124:	f7fe fd90 	bl	8001c48 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d803      	bhi.n	800313c <HAL_SPI_Transmit+0x20c>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Transmit+0x212>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800314e:	e029      	b.n	80031a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1c9      	bne.n	80030ee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fbcc 	bl	80038fc <SPI_EndRxTxTransaction>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e003      	b.n	80031a4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d002      	beq.n	80031dc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031da:	e0fb      	b.n	80033d4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e4:	d112      	bne.n	800320c <HAL_SPI_Receive+0x56>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10e      	bne.n	800320c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2204      	movs	r2, #4
 80031f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f8ef 	bl	80033e6 <HAL_SPI_TransmitReceive>
 8003208:	4603      	mov	r3, r0
 800320a:	e0e8      	b.n	80033de <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_SPI_Receive+0x64>
 8003216:	2302      	movs	r3, #2
 8003218:	e0e1      	b.n	80033de <HAL_SPI_Receive+0x228>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003222:	f7fe fd11 	bl	8001c48 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <HAL_SPI_Receive+0x7e>
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003238:	e0cc      	b.n	80033d4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2204      	movs	r2, #4
 800323e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003280:	d10f      	bne.n	80032a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	d007      	beq.n	80032c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d16a      	bne.n	800339e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80032c8:	e032      	b.n	8003330 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d115      	bne.n	8003304 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f103 020c 	add.w	r2, r3, #12
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	7812      	ldrb	r2, [r2, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003302:	e015      	b.n	8003330 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003304:	f7fe fca0 	bl	8001c48 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d803      	bhi.n	800331c <HAL_SPI_Receive+0x166>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d102      	bne.n	8003322 <HAL_SPI_Receive+0x16c>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800332e:	e051      	b.n	80033d4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1c7      	bne.n	80032ca <HAL_SPI_Receive+0x114>
 800333a:	e035      	b.n	80033a8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d113      	bne.n	8003372 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	b292      	uxth	r2, r2
 8003356:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003370:	e015      	b.n	800339e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003372:	f7fe fc69 	bl	8001c48 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d803      	bhi.n	800338a <HAL_SPI_Receive+0x1d4>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d102      	bne.n	8003390 <HAL_SPI_Receive+0x1da>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800339c:	e01a      	b.n	80033d4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1c9      	bne.n	800333c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	6839      	ldr	r1, [r7, #0]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fa53 	bl	8003858 <SPI_EndRxTransaction>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
 80033ca:	e003      	b.n	80033d4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08c      	sub	sp, #48	; 0x30
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033f4:	2301      	movs	r3, #1
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_SPI_TransmitReceive+0x26>
 8003408:	2302      	movs	r3, #2
 800340a:	e198      	b.n	800373e <HAL_SPI_TransmitReceive+0x358>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003414:	f7fe fc18 	bl	8001c48 <HAL_GetTick>
 8003418:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800342e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003432:	2b01      	cmp	r3, #1
 8003434:	d00f      	beq.n	8003456 <HAL_SPI_TransmitReceive+0x70>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343c:	d107      	bne.n	800344e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_SPI_TransmitReceive+0x68>
 8003446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800344a:	2b04      	cmp	r3, #4
 800344c:	d003      	beq.n	8003456 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003454:	e16d      	b.n	8003732 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x82>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x82>
 8003462:	887b      	ldrh	r3, [r7, #2]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800346e:	e160      	b.n	8003732 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b04      	cmp	r3, #4
 800347a:	d003      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2205      	movs	r2, #5
 8003480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	887a      	ldrh	r2, [r7, #2]
 800349a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	887a      	ldrh	r2, [r7, #2]
 80034a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d007      	beq.n	80034d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e0:	d17c      	bne.n	80035dc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x10a>
 80034ea:	8b7b      	ldrh	r3, [r7, #26]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d16a      	bne.n	80035c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	1c9a      	adds	r2, r3, #2
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003514:	e057      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b02      	cmp	r3, #2
 8003522:	d11b      	bne.n	800355c <HAL_SPI_TransmitReceive+0x176>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_SPI_TransmitReceive+0x176>
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d113      	bne.n	800355c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	881a      	ldrh	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	1c9a      	adds	r2, r3, #2
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d119      	bne.n	800359e <HAL_SPI_TransmitReceive+0x1b8>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d014      	beq.n	800359e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	b292      	uxth	r2, r2
 8003580:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	1c9a      	adds	r2, r3, #2
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800359a:	2301      	movs	r3, #1
 800359c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800359e:	f7fe fb53 	bl	8001c48 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d80b      	bhi.n	80035c6 <HAL_SPI_TransmitReceive+0x1e0>
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d007      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80035c4:	e0b5      	b.n	8003732 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1a2      	bne.n	8003516 <HAL_SPI_TransmitReceive+0x130>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d19d      	bne.n	8003516 <HAL_SPI_TransmitReceive+0x130>
 80035da:	e080      	b.n	80036de <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x204>
 80035e4:	8b7b      	ldrh	r3, [r7, #26]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d16f      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	7812      	ldrb	r2, [r2, #0]
 80035f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003610:	e05b      	b.n	80036ca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b02      	cmp	r3, #2
 800361e:	d11c      	bne.n	800365a <HAL_SPI_TransmitReceive+0x274>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003624:	b29b      	uxth	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d017      	beq.n	800365a <HAL_SPI_TransmitReceive+0x274>
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d114      	bne.n	800365a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	7812      	ldrb	r2, [r2, #0]
 800363c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d119      	bne.n	800369c <HAL_SPI_TransmitReceive+0x2b6>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d014      	beq.n	800369c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003698:	2301      	movs	r3, #1
 800369a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800369c:	f7fe fad4 	bl	8001c48 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d803      	bhi.n	80036b4 <HAL_SPI_TransmitReceive+0x2ce>
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d102      	bne.n	80036ba <HAL_SPI_TransmitReceive+0x2d4>
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80036c8:	e033      	b.n	8003732 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d19e      	bne.n	8003612 <HAL_SPI_TransmitReceive+0x22c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d199      	bne.n	8003612 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f90a 	bl	80038fc <SPI_EndRxTxTransaction>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036fa:	e01a      	b.n	8003732 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003728:	e003      	b.n	8003732 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800373a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800373e:	4618      	mov	r0, r3
 8003740:	3730      	adds	r7, #48	; 0x30
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003758:	f7fe fa76 	bl	8001c48 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003768:	f7fe fa6e 	bl	8001c48 <HAL_GetTick>
 800376c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800376e:	4b39      	ldr	r3, [pc, #228]	; (8003854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	015b      	lsls	r3, r3, #5
 8003774:	0d1b      	lsrs	r3, r3, #20
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800377e:	e054      	b.n	800382a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003786:	d050      	beq.n	800382a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003788:	f7fe fa5e 	bl	8001c48 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	429a      	cmp	r2, r3
 8003796:	d902      	bls.n	800379e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d13d      	bne.n	800381a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b6:	d111      	bne.n	80037dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c0:	d004      	beq.n	80037cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ca:	d107      	bne.n	80037dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e4:	d10f      	bne.n	8003806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e017      	b.n	800384a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3b01      	subs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	429a      	cmp	r2, r3
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	429a      	cmp	r2, r3
 8003846:	d19b      	bne.n	8003780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000028 	.word	0x20000028

08003858 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386c:	d111      	bne.n	8003892 <SPI_EndRxTransaction+0x3a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003876:	d004      	beq.n	8003882 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003880:	d107      	bne.n	8003892 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003890:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389a:	d117      	bne.n	80038cc <SPI_EndRxTransaction+0x74>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a4:	d112      	bne.n	80038cc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2101      	movs	r1, #1
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f7ff ff49 	bl	8003748 <SPI_WaitFlagStateUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01a      	beq.n	80038f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e013      	b.n	80038f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff ff36 	bl	8003748 <SPI_WaitFlagStateUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e000      	b.n	80038f4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2200      	movs	r2, #0
 8003910:	2180      	movs	r1, #128	; 0x80
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff ff18 	bl	8003748 <SPI_WaitFlagStateUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f043 0220 	orr.w	r2, r3, #32
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e000      	b.n	8003930 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e041      	b.n	80039ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7fd f9d8 	bl	8000d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 f9ee 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d001      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e03a      	b.n	8003a66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <HAL_TIM_Base_Start_IT+0x98>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00e      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x58>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1a:	d009      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x58>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d004      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0x58>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d111      	bne.n	8003a54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d010      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a52:	e007      	b.n	8003a64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0202 	mvn.w	r2, #2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f92f 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f922 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f931 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f905 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8f8 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f907 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0208 	mvn.w	r2, #8
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8db 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8ce 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8dd 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0210 	mvn.w	r2, #16
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8b1 	bl	8003d22 <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8a4 	bl	8003d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f8b3 	bl	8003d34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10e      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d107      	bne.n	8003c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0201 	mvn.w	r2, #1
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fc fff0 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d10e      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 fa6d 	bl	8004106 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f877 	bl	8003d46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0220 	mvn.w	r2, #32
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa38 	bl	80040f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e031      	b.n	8003d08 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003cb4:	6839      	ldr	r1, [r7, #0]
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f8b0 	bl	8003e1c <TIM_SlaveTimer_SetConfig>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e018      	b.n	8003d08 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cf4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <TIM_Base_SetConfig+0xbc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <TIM_Base_SetConfig+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <TIM_Base_SetConfig+0xbc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_Base_SetConfig+0xc0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d103      	bne.n	8003e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	615a      	str	r2, [r3, #20]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e38:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 0307 	bic.w	r3, r3, #7
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b70      	cmp	r3, #112	; 0x70
 8003e64:	d01a      	beq.n	8003e9c <TIM_SlaveTimer_SetConfig+0x80>
 8003e66:	2b70      	cmp	r3, #112	; 0x70
 8003e68:	d860      	bhi.n	8003f2c <TIM_SlaveTimer_SetConfig+0x110>
 8003e6a:	2b60      	cmp	r3, #96	; 0x60
 8003e6c:	d054      	beq.n	8003f18 <TIM_SlaveTimer_SetConfig+0xfc>
 8003e6e:	2b60      	cmp	r3, #96	; 0x60
 8003e70:	d85c      	bhi.n	8003f2c <TIM_SlaveTimer_SetConfig+0x110>
 8003e72:	2b50      	cmp	r3, #80	; 0x50
 8003e74:	d046      	beq.n	8003f04 <TIM_SlaveTimer_SetConfig+0xe8>
 8003e76:	2b50      	cmp	r3, #80	; 0x50
 8003e78:	d858      	bhi.n	8003f2c <TIM_SlaveTimer_SetConfig+0x110>
 8003e7a:	2b40      	cmp	r3, #64	; 0x40
 8003e7c:	d019      	beq.n	8003eb2 <TIM_SlaveTimer_SetConfig+0x96>
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d854      	bhi.n	8003f2c <TIM_SlaveTimer_SetConfig+0x110>
 8003e82:	2b30      	cmp	r3, #48	; 0x30
 8003e84:	d055      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x116>
 8003e86:	2b30      	cmp	r3, #48	; 0x30
 8003e88:	d850      	bhi.n	8003f2c <TIM_SlaveTimer_SetConfig+0x110>
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d051      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x116>
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d84c      	bhi.n	8003f2c <TIM_SlaveTimer_SetConfig+0x110>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04d      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x116>
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d04b      	beq.n	8003f32 <TIM_SlaveTimer_SetConfig+0x116>
 8003e9a:	e047      	b.n	8003f2c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003eac:	f000 f8a4 	bl	8003ff8 <TIM_ETR_SetConfig>
      break;
 8003eb0:	e040      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d101      	bne.n	8003ebe <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e03b      	b.n	8003f36 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]
      break;
 8003f02:	e017      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f10:	461a      	mov	r2, r3
 8003f12:	f000 f814 	bl	8003f3e <TIM_TI1_ConfigInputStage>
      break;
 8003f16:	e00d      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f24:	461a      	mov	r2, r3
 8003f26:	f000 f838 	bl	8003f9a <TIM_TI2_ConfigInputStage>
      break;
 8003f2a:	e003      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f30:	e000      	b.n	8003f34 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003f32:	bf00      	nop
  }

  return status;
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b087      	sub	sp, #28
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f023 0201 	bic.w	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 030a 	bic.w	r3, r3, #10
 8003f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b087      	sub	sp, #28
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f023 0210 	bic.w	r2, r3, #16
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	031b      	lsls	r3, r3, #12
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	621a      	str	r2, [r3, #32]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004012:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	021a      	lsls	r2, r3, #8
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	609a      	str	r2, [r3, #8]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
	...

08004038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e046      	b.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d009      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10c      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	40012c00 	.word	0x40012c00
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800

080040f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e042      	b.n	80041b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fc fe0e 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2224      	movs	r2, #36	; 0x24
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800415a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 fa8f 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004170:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695a      	ldr	r2, [r3, #20]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004180:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004190:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b20      	cmp	r3, #32
 80041d0:	d112      	bne.n	80041f8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_UART_Receive_DMA+0x26>
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e00b      	b.n	80041fa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	461a      	mov	r2, r3
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f922 	bl	8004438 <UART_Start_Receive_DMA>
 80041f4:	4603      	mov	r3, r0
 80041f6:	e000      	b.n	80041fa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr

0800423c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b09c      	sub	sp, #112	; 0x70
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d172      	bne.n	800433e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800425a:	2200      	movs	r2, #0
 800425c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004274:	66bb      	str	r3, [r7, #104]	; 0x68
 8004276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800427e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004280:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004284:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800428c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	667b      	str	r3, [r7, #100]	; 0x64
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80042b2:	647a      	str	r2, [r7, #68]	; 0x44
 80042b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	623b      	str	r3, [r7, #32]
   return(result);
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042dc:	663b      	str	r3, [r7, #96]	; 0x60
 80042de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042e6:	633a      	str	r2, [r7, #48]	; 0x30
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	2b01      	cmp	r3, #1
 8004308:	d119      	bne.n	800433e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	60fb      	str	r3, [r7, #12]
   return(result);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f023 0310 	bic.w	r3, r3, #16
 8004320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800432a:	61fa      	str	r2, [r7, #28]
 800432c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	69b9      	ldr	r1, [r7, #24]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	617b      	str	r3, [r7, #20]
   return(result);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e5      	bne.n	800430a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	2200      	movs	r2, #0
 8004342:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	2b01      	cmp	r3, #1
 800434a:	d106      	bne.n	800435a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800434c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004350:	4619      	mov	r1, r3
 8004352:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004354:	f7ff ff67 	bl	8004226 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004358:	e002      	b.n	8004360 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800435a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800435c:	f7fc f92c 	bl	80005b8 <HAL_UART_RxCpltCallback>
}
 8004360:	bf00      	nop
 8004362:	3770      	adds	r7, #112	; 0x70
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2b01      	cmp	r3, #1
 8004382:	d108      	bne.n	8004396 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	b29b      	uxth	r3, r3
 800438c:	4619      	mov	r1, r3
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff ff49 	bl	8004226 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004394:	e002      	b.n	800439c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff ff33 	bl	8004202 <HAL_UART_RxHalfCpltCallback>
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b21      	cmp	r3, #33	; 0x21
 80043d6:	d108      	bne.n	80043ea <UART_DMAError+0x46>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80043e4:	68b8      	ldr	r0, [r7, #8]
 80043e6:	f000 f8c1 	bl	800456c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b22      	cmp	r3, #34	; 0x22
 800440a:	d108      	bne.n	800441e <UART_DMAError+0x7a>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2200      	movs	r2, #0
 8004416:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004418:	68b8      	ldr	r0, [r7, #8]
 800441a:	f000 f8ce 	bl	80045ba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800442a:	68b8      	ldr	r0, [r7, #8]
 800442c:	f7ff fef2 	bl	8004214 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b098      	sub	sp, #96	; 0x60
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	88fa      	ldrh	r2, [r7, #6]
 8004450:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2222      	movs	r2, #34	; 0x22
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	4a3e      	ldr	r2, [pc, #248]	; (8004560 <UART_Start_Receive_DMA+0x128>)
 8004466:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	4a3d      	ldr	r2, [pc, #244]	; (8004564 <UART_Start_Receive_DMA+0x12c>)
 800446e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004474:	4a3c      	ldr	r2, [pc, #240]	; (8004568 <UART_Start_Receive_DMA+0x130>)
 8004476:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	2200      	movs	r2, #0
 800447e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	f7fd fd3e 	bl	8001f18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d019      	beq.n	80044ee <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80044e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e5      	bne.n	80044ba <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	657b      	str	r3, [r7, #84]	; 0x54
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800450e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	617b      	str	r3, [r7, #20]
   return(result);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004538:	653b      	str	r3, [r7, #80]	; 0x50
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004542:	627a      	str	r2, [r7, #36]	; 0x24
 8004544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6a39      	ldr	r1, [r7, #32]
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e5      	bne.n	8004522 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3760      	adds	r7, #96	; 0x60
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	0800423d 	.word	0x0800423d
 8004564:	08004369 	.word	0x08004369
 8004568:	080043a5 	.word	0x080043a5

0800456c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	; 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	60bb      	str	r3, [r7, #8]
   return(result);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	61ba      	str	r2, [r7, #24]
 8004596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6979      	ldr	r1, [r7, #20]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	613b      	str	r3, [r7, #16]
   return(result);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80045b0:	bf00      	nop
 80045b2:	3724      	adds	r7, #36	; 0x24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b095      	sub	sp, #84	; 0x54
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e2:	643a      	str	r2, [r7, #64]	; 0x40
 80045e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3314      	adds	r3, #20
 80045fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	61fb      	str	r3, [r7, #28]
   return(result);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	64bb      	str	r3, [r7, #72]	; 0x48
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462e:	2b01      	cmp	r3, #1
 8004630:	d119      	bne.n	8004666 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	60bb      	str	r3, [r7, #8]
   return(result);
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f023 0310 	bic.w	r3, r3, #16
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004652:	61ba      	str	r2, [r7, #24]
 8004654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	e841 2300 	strex	r3, r2, [r1]
 800465e:	613b      	str	r3, [r7, #16]
   return(result);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e5      	bne.n	8004632 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004674:	bf00      	nop
 8004676:	3754      	adds	r7, #84	; 0x54
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
	...

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ba:	f023 030c 	bic.w	r3, r3, #12
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <UART_SetConfig+0x114>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d103      	bne.n	80046f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046e8:	f7fe fb3c 	bl	8002d64 <HAL_RCC_GetPCLK2Freq>
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	e002      	b.n	80046f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046f0:	f7fe fb24 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80046f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	009a      	lsls	r2, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	4a22      	ldr	r2, [pc, #136]	; (8004798 <UART_SetConfig+0x118>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	0119      	lsls	r1, r3, #4
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	fbb2 f2f3 	udiv	r2, r2, r3
 800472c:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <UART_SetConfig+0x118>)
 800472e:	fba3 0302 	umull	r0, r3, r3, r2
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	2064      	movs	r0, #100	; 0x64
 8004736:	fb00 f303 	mul.w	r3, r0, r3
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	3332      	adds	r3, #50	; 0x32
 8004740:	4a15      	ldr	r2, [pc, #84]	; (8004798 <UART_SetConfig+0x118>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474c:	4419      	add	r1, r3
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009a      	lsls	r2, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	fbb2 f2f3 	udiv	r2, r2, r3
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <UART_SetConfig+0x118>)
 8004766:	fba3 0302 	umull	r0, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	2064      	movs	r0, #100	; 0x64
 800476e:	fb00 f303 	mul.w	r3, r0, r3
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	3332      	adds	r3, #50	; 0x32
 8004778:	4a07      	ldr	r2, [pc, #28]	; (8004798 <UART_SetConfig+0x118>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	f003 020f 	and.w	r2, r3, #15
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	440a      	add	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40013800 	.word	0x40013800
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a2:	f3ef 8305 	mrs	r3, IPSR
 80047a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80047a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ae:	f3ef 8310 	mrs	r3, PRIMASK
 80047b2:	607b      	str	r3, [r7, #4]
  return(result);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <osKernelInitialize+0x32>
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <osKernelInitialize+0x60>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d109      	bne.n	80047d6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047c2:	f3ef 8311 	mrs	r3, BASEPRI
 80047c6:	603b      	str	r3, [r7, #0]
  return(result);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80047ce:	f06f 0305 	mvn.w	r3, #5
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e00c      	b.n	80047f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <osKernelInitialize+0x60>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d105      	bne.n	80047ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <osKernelInitialize+0x60>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e002      	b.n	80047f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295
 80047ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	200003ec 	.word	0x200003ec

08004800 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004806:	f3ef 8305 	mrs	r3, IPSR
 800480a:	60bb      	str	r3, [r7, #8]
  return(result);
 800480c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004812:	f3ef 8310 	mrs	r3, PRIMASK
 8004816:	607b      	str	r3, [r7, #4]
  return(result);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <osKernelStart+0x32>
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <osKernelStart+0x64>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d109      	bne.n	800483a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004826:	f3ef 8311 	mrs	r3, BASEPRI
 800482a:	603b      	str	r3, [r7, #0]
  return(result);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004832:	f06f 0305 	mvn.w	r3, #5
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00e      	b.n	8004858 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <osKernelStart+0x64>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d107      	bne.n	8004852 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004842:	4b08      	ldr	r3, [pc, #32]	; (8004864 <osKernelStart+0x64>)
 8004844:	2202      	movs	r2, #2
 8004846:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004848:	f001 fffa 	bl	8006840 <vTaskStartScheduler>
      stat = osOK;
 800484c:	2300      	movs	r3, #0
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e002      	b.n	8004858 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004858:	68fb      	ldr	r3, [r7, #12]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	200003ec 	.word	0x200003ec

08004868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b092      	sub	sp, #72	; 0x48
 800486c:	af04      	add	r7, sp, #16
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004878:	f3ef 8305 	mrs	r3, IPSR
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004880:	2b00      	cmp	r3, #0
 8004882:	f040 8094 	bne.w	80049ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004886:	f3ef 8310 	mrs	r3, PRIMASK
 800488a:	623b      	str	r3, [r7, #32]
  return(result);
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 808d 	bne.w	80049ae <osThreadNew+0x146>
 8004894:	4b48      	ldr	r3, [pc, #288]	; (80049b8 <osThreadNew+0x150>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d106      	bne.n	80048aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800489c:	f3ef 8311 	mrs	r3, BASEPRI
 80048a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 8082 	bne.w	80049ae <osThreadNew+0x146>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d07e      	beq.n	80049ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80048b4:	2318      	movs	r3, #24
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80048b8:	2300      	movs	r3, #0
 80048ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80048bc:	f107 031b 	add.w	r3, r7, #27
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d045      	beq.n	800495a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <osThreadNew+0x74>
        name = attr->name;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <osThreadNew+0x9a>
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	2b38      	cmp	r3, #56	; 0x38
 80048f4:	d805      	bhi.n	8004902 <osThreadNew+0x9a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <osThreadNew+0x9e>
        return (NULL);
 8004902:	2300      	movs	r3, #0
 8004904:	e054      	b.n	80049b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00e      	beq.n	800493c <osThreadNew+0xd4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	2b63      	cmp	r3, #99	; 0x63
 8004924:	d90a      	bls.n	800493c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <osThreadNew+0xd4>
        mem = 1;
 8004936:	2301      	movs	r3, #1
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
 800493a:	e010      	b.n	800495e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <osThreadNew+0xf6>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d108      	bne.n	800495e <osThreadNew+0xf6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <osThreadNew+0xf6>
          mem = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
 8004958:	e001      	b.n	800495e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	2b01      	cmp	r3, #1
 8004962:	d110      	bne.n	8004986 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800496c:	9202      	str	r2, [sp, #8]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004978:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f001 fcc2 	bl	8006304 <xTaskCreateStatic>
 8004980:	4603      	mov	r3, r0
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	e013      	b.n	80049ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	2b00      	cmp	r3, #0
 800498a:	d110      	bne.n	80049ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	b29a      	uxth	r2, r3
 8004990:	f107 0314 	add.w	r3, r7, #20
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f001 fd0c 	bl	80063bc <xTaskCreate>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <osThreadNew+0x146>
          hTask = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049ae:	697b      	ldr	r3, [r7, #20]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3738      	adds	r7, #56	; 0x38
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	200003ec 	.word	0x200003ec

080049bc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c8:	f3ef 8305 	mrs	r3, IPSR
 80049cc:	613b      	str	r3, [r7, #16]
  return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10f      	bne.n	80049f4 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049d4:	f3ef 8310 	mrs	r3, PRIMASK
 80049d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d109      	bne.n	80049f4 <osThreadTerminate+0x38>
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <osThreadTerminate+0x7c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d109      	bne.n	80049fc <osThreadTerminate+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049e8:	f3ef 8311 	mrs	r3, BASEPRI
 80049ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <osThreadTerminate+0x40>
    stat = osErrorISR;
 80049f4:	f06f 0305 	mvn.w	r3, #5
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e017      	b.n	8004a2c <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 8004a02:	f06f 0303 	mvn.w	r3, #3
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e010      	b.n	8004a2c <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8004a0a:	69b8      	ldr	r0, [r7, #24]
 8004a0c:	f001 febe 	bl	800678c <eTaskGetState>
 8004a10:	4603      	mov	r3, r0
 8004a12:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8004a14:	7dfb      	ldrb	r3, [r7, #23]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d005      	beq.n	8004a26 <osThreadTerminate+0x6a>
      stat = osOK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 8004a1e:	69b8      	ldr	r0, [r7, #24]
 8004a20:	f001 fe0e 	bl	8006640 <vTaskDelete>
 8004a24:	e002      	b.n	8004a2c <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8004a26:	f06f 0302 	mvn.w	r3, #2
 8004a2a:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200003ec 	.word	0x200003ec

08004a3c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a44:	f3ef 8305 	mrs	r3, IPSR
 8004a48:	613b      	str	r3, [r7, #16]
  return(result);
 8004a4a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10f      	bne.n	8004a70 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a50:	f3ef 8310 	mrs	r3, PRIMASK
 8004a54:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <osDelay+0x34>
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <osDelay+0x58>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d109      	bne.n	8004a78 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a64:	f3ef 8311 	mrs	r3, BASEPRI
 8004a68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <osDelay+0x3c>
    stat = osErrorISR;
 8004a70:	f06f 0305 	mvn.w	r3, #5
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e007      	b.n	8004a88 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 fe4e 	bl	8006724 <vTaskDelay>
    }
  }

  return (stat);
 8004a88:	697b      	ldr	r3, [r7, #20]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200003ec 	.word	0x200003ec

08004a98 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b088      	sub	sp, #32
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa4:	f3ef 8305 	mrs	r3, IPSR
 8004aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8004aaa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d13d      	bne.n	8004b2c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d137      	bne.n	8004b2c <osEventFlagsNew+0x94>
 8004abc:	4b1e      	ldr	r3, [pc, #120]	; (8004b38 <osEventFlagsNew+0xa0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d105      	bne.n	8004ad0 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d12d      	bne.n	8004b2c <osEventFlagsNew+0x94>
    mem = -1;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d015      	beq.n	8004b08 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d006      	beq.n	8004af2 <osEventFlagsNew+0x5a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b1f      	cmp	r3, #31
 8004aea:	d902      	bls.n	8004af2 <osEventFlagsNew+0x5a>
        mem = 1;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e00c      	b.n	8004b0c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <osEventFlagsNew+0x74>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <osEventFlagsNew+0x74>
          mem = 0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e001      	b.n	8004b0c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fa58 	bl	8004fcc <xEventGroupCreateStatic>
 8004b1c:	61f8      	str	r0, [r7, #28]
 8004b1e:	e005      	b.n	8004b2c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8004b26:	f000 fa88 	bl	800503a <xEventGroupCreate>
 8004b2a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004b2c:	69fb      	ldr	r3, [r7, #28]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	200003ec 	.word	0x200003ec

08004b3c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <osEventFlagsSet+0x1e>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004b5a:	f06f 0303 	mvn.w	r3, #3
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	e03a      	b.n	8004bd8 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b62:	f3ef 8305 	mrs	r3, IPSR
 8004b66:	617b      	str	r3, [r7, #20]
  return(result);
 8004b68:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10f      	bne.n	8004b8e <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b72:	613b      	str	r3, [r7, #16]
  return(result);
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d109      	bne.n	8004b8e <osEventFlagsSet+0x52>
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <osEventFlagsSet+0xa8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d123      	bne.n	8004bca <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b82:	f3ef 8311 	mrs	r3, BASEPRI
 8004b86:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01d      	beq.n	8004bca <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	461a      	mov	r2, r3
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	69b8      	ldr	r0, [r7, #24]
 8004b9c:	f000 fbf0 	bl	8005380 <xEventGroupSetBitsFromISR>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8004ba6:	f06f 0302 	mvn.w	r3, #2
 8004baa:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004bac:	e013      	b.n	8004bd6 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00e      	beq.n	8004bd6 <osEventFlagsSet+0x9a>
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	; (8004be8 <osEventFlagsSet+0xac>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004bc8:	e005      	b.n	8004bd6 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	69b8      	ldr	r0, [r7, #24]
 8004bce:	f000 fb1d 	bl	800520c <xEventGroupSetBits>
 8004bd2:	61f8      	str	r0, [r7, #28]
 8004bd4:	e000      	b.n	8004bd8 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8004bd6:	bf00      	nop
  }

  return (rflags);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200003ec 	.word	0x200003ec
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08e      	sub	sp, #56	; 0x38
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <osEventFlagsWait+0x22>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004c0e:	f06f 0303 	mvn.w	r3, #3
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	e059      	b.n	8004cca <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c16:	f3ef 8305 	mrs	r3, IPSR
 8004c1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c22:	f3ef 8310 	mrs	r3, PRIMASK
 8004c26:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <osEventFlagsWait+0x56>
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <osEventFlagsWait+0xe8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d109      	bne.n	8004c4a <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c36:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3a:	617b      	str	r3, [r7, #20]
  return(result);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8004c42:	f06f 0305 	mvn.w	r3, #5
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
 8004c48:	e03f      	b.n	8004cca <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c58:	e001      	b.n	8004c5e <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6c:	e001      	b.n	8004c72 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	6a38      	ldr	r0, [r7, #32]
 8004c7e:	f000 f9f7 	bl	8005070 <xEventGroupWaitBits>
 8004c82:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00e      	beq.n	8004cac <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d019      	beq.n	8004cca <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8004c9c:	f06f 0301 	mvn.w	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	e012      	b.n	8004cca <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004ca4:	f06f 0302 	mvn.w	r3, #2
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8004caa:	e00e      	b.n	8004cca <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8004cbc:	f06f 0301 	mvn.w	r3, #1
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc2:	e002      	b.n	8004cca <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004cc4:	f06f 0302 	mvn.w	r3, #2
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3730      	adds	r7, #48	; 0x30
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	200003ec 	.word	0x200003ec

08004cd8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce4:	f3ef 8305 	mrs	r3, IPSR
 8004ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 8085 	bne.w	8004dfc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d17e      	bne.n	8004dfc <osMutexNew+0x124>
 8004cfe:	4b42      	ldr	r3, [pc, #264]	; (8004e08 <osMutexNew+0x130>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d105      	bne.n	8004d12 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d06:	f3ef 8311 	mrs	r3, BASEPRI
 8004d0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d174      	bne.n	8004dfc <osMutexNew+0x124>
    if (attr != NULL) {
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	e001      	b.n	8004d24 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <osMutexNew+0x5c>
      rmtx = 1U;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	e001      	b.n	8004d38 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d15c      	bne.n	8004dfc <osMutexNew+0x124>
      mem = -1;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d015      	beq.n	8004d7a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <osMutexNew+0x8c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b4f      	cmp	r3, #79	; 0x4f
 8004d5c:	d902      	bls.n	8004d64 <osMutexNew+0x8c>
          mem = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	e00c      	b.n	8004d7e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d108      	bne.n	8004d7e <osMutexNew+0xa6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <osMutexNew+0xa6>
            mem = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	e001      	b.n	8004d7e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d112      	bne.n	8004daa <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	2004      	movs	r0, #4
 8004d92:	f000 fd2b 	bl	80057ec <xQueueCreateMutexStatic>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24
 8004d98:	e016      	b.n	8004dc8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	2001      	movs	r0, #1
 8004da2:	f000 fd23 	bl	80057ec <xQueueCreateMutexStatic>
 8004da6:	6278      	str	r0, [r7, #36]	; 0x24
 8004da8:	e00e      	b.n	8004dc8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004db6:	2004      	movs	r0, #4
 8004db8:	f000 fd00 	bl	80057bc <xQueueCreateMutex>
 8004dbc:	6278      	str	r0, [r7, #36]	; 0x24
 8004dbe:	e003      	b.n	8004dc8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004dc0:	2001      	movs	r0, #1
 8004dc2:	f000 fcfb 	bl	80057bc <xQueueCreateMutex>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <osMutexNew+0x110>
        if (attr != NULL) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <osMutexNew+0x104>
          name = attr->name;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e001      	b.n	8004de0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de4:	f001 fa32 	bl	800624c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <osMutexNew+0x124>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200003ec 	.word	0x200003ec

08004e0c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e2a:	f3ef 8305 	mrs	r3, IPSR
 8004e2e:	613b      	str	r3, [r7, #16]
  return(result);
 8004e30:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10f      	bne.n	8004e56 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e36:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <osMutexAcquire+0x4a>
 8004e42:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <osMutexAcquire+0xb8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d109      	bne.n	8004e5e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004e56:	f06f 0305 	mvn.w	r3, #5
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e02c      	b.n	8004eb8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004e64:	f06f 0303 	mvn.w	r3, #3
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	e025      	b.n	8004eb8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	69b8      	ldr	r0, [r7, #24]
 8004e76:	f000 fd08 	bl	800588a <xQueueTakeMutexRecursive>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d01b      	beq.n	8004eb8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004e86:	f06f 0301 	mvn.w	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	e014      	b.n	8004eb8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004e8e:	f06f 0302 	mvn.w	r3, #2
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e010      	b.n	8004eb8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004e96:	6839      	ldr	r1, [r7, #0]
 8004e98:	69b8      	ldr	r0, [r7, #24]
 8004e9a:	f000 ffa3 	bl	8005de4 <xQueueSemaphoreTake>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d009      	beq.n	8004eb8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004eaa:	f06f 0301 	mvn.w	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e002      	b.n	8004eb8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004eb2:	f06f 0302 	mvn.w	r3, #2
 8004eb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200003ec 	.word	0x200003ec

08004ec8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ee4:	f3ef 8305 	mrs	r3, IPSR
 8004ee8:	613b      	str	r3, [r7, #16]
  return(result);
 8004eea:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10f      	bne.n	8004f10 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <osMutexRelease+0x48>
 8004efc:	4b19      	ldr	r3, [pc, #100]	; (8004f64 <osMutexRelease+0x9c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d109      	bne.n	8004f18 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f04:	f3ef 8311 	mrs	r3, BASEPRI
 8004f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004f10:	f06f 0305 	mvn.w	r3, #5
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e01f      	b.n	8004f58 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004f1e:	f06f 0303 	mvn.w	r3, #3
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e018      	b.n	8004f58 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004f2c:	69b8      	ldr	r0, [r7, #24]
 8004f2e:	f000 fc78 	bl	8005822 <xQueueGiveMutexRecursive>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d00f      	beq.n	8004f58 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004f38:	f06f 0302 	mvn.w	r3, #2
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e00b      	b.n	8004f58 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004f40:	2300      	movs	r3, #0
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	69b8      	ldr	r0, [r7, #24]
 8004f48:	f000 fcd6 	bl	80058f8 <xQueueGenericSend>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d002      	beq.n	8004f58 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004f52:	f06f 0302 	mvn.w	r3, #2
 8004f56:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004f58:	69fb      	ldr	r3, [r7, #28]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200003ec 	.word	0x200003ec

08004f68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <vApplicationGetIdleTaskMemory+0x28>)
 8004f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2280      	movs	r2, #128	; 0x80
 8004f84:	601a      	str	r2, [r3, #0]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	200003f0 	.word	0x200003f0
 8004f94:	20000454 	.word	0x20000454

08004f98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4a06      	ldr	r2, [pc, #24]	; (8004fc8 <vApplicationGetTimerTaskMemory+0x30>)
 8004fae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fb6:	601a      	str	r2, [r3, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000654 	.word	0x20000654
 8004fc8:	200006b8 	.word	0x200006b8

08004fcc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004ff0:	2320      	movs	r3, #32
 8004ff2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d00a      	beq.n	8005010 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60fb      	str	r3, [r7, #12]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f000 f9bf 	bl	80053a8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2201      	movs	r2, #1
 800502e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005030:	697b      	ldr	r3, [r7, #20]
	}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005040:	2020      	movs	r0, #32
 8005042:	f003 f83b 	bl	80080bc <pvPortMalloc>
 8005046:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3304      	adds	r3, #4
 8005058:	4618      	mov	r0, r3
 800505a:	f000 f9a5 	bl	80053a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005064:	687b      	ldr	r3, [r7, #4]
	}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
	...

08005070 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b090      	sub	sp, #64	; 0x40
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005086:	2300      	movs	r3, #0
 8005088:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	623b      	str	r3, [r7, #32]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	61fb      	str	r3, [r7, #28]
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61bb      	str	r3, [r7, #24]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050e2:	f002 f8c5 	bl	8007270 <xTaskGetSchedulerState>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <xEventGroupWaitBits+0x82>
 80050ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <xEventGroupWaitBits+0x86>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xEventGroupWaitBits+0x88>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	617b      	str	r3, [r7, #20]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005112:	f001 fbfd 	bl	8006910 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005122:	f000 f90b 	bl	800533c <prvTestWaitCondition>
 8005126:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00e      	beq.n	800514c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005132:	2300      	movs	r3, #0
 8005134:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d028      	beq.n	800518e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	43db      	mvns	r3, r3
 8005144:	401a      	ands	r2, r3
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e020      	b.n	800518e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800514c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005156:	2301      	movs	r3, #1
 8005158:	633b      	str	r3, [r7, #48]	; 0x30
 800515a:	e018      	b.n	800518e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005176:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517a:	1d18      	adds	r0, r3, #4
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	4313      	orrs	r3, r2
 8005182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005184:	4619      	mov	r1, r3
 8005186:	f001 fdd7 	bl	8006d38 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800518e:	f001 fbcd 	bl	800692c <xTaskResumeAll>
 8005192:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005196:	2b00      	cmp	r3, #0
 8005198:	d031      	beq.n	80051fe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <xEventGroupWaitBits+0x198>)
 80051a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80051b0:	f002 f9de 	bl	8007570 <uxTaskResetEventItemValue>
 80051b4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11a      	bne.n	80051f6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80051c0:	f002 fe7c 	bl	8007ebc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80051d0:	f000 f8b4 	bl	800533c <prvTestWaitCondition>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d009      	beq.n	80051ee <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	43db      	mvns	r3, r3
 80051e8:	401a      	ands	r2, r3
 80051ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80051f2:	f002 fe93 	bl	8007f1c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80051f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005200:	4618      	mov	r0, r3
 8005202:	3740      	adds	r7, #64	; 0x40
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	; 0x38
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005216:	2300      	movs	r3, #0
 8005218:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800521e:	2300      	movs	r3, #0
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xEventGroupSetBits+0x32>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	613b      	str	r3, [r7, #16]
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <xEventGroupSetBits+0x52>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60fb      	str	r3, [r7, #12]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	3304      	adds	r3, #4
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	3308      	adds	r3, #8
 8005268:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800526a:	f001 fb51 	bl	8006910 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	431a      	orrs	r2, r3
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005280:	e03c      	b.n	80052fc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005298:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80052b8:	2301      	movs	r3, #1
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052bc:	e008      	b.n	80052d0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	4013      	ands	r3, r2
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d101      	bne.n	80052d0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052f0:	4619      	mov	r1, r3
 80052f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052f4:	f001 fdec 	bl	8006ed0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80052fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	429a      	cmp	r2, r3
 8005302:	d1be      	bne.n	8005282 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	43db      	mvns	r3, r3
 800530c:	401a      	ands	r2, r3
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005312:	f001 fb0b 	bl	800692c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	681b      	ldr	r3, [r3, #0]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3738      	adds	r7, #56	; 0x38
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b082      	sub	sp, #8
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff ff6c 	bl	800520c <xEventGroupSetBits>
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d107      	bne.n	8005362 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800535c:	2301      	movs	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	e007      	b.n	8005372 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4013      	ands	r3, r2
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d101      	bne.n	8005372 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800536e:	2301      	movs	r3, #1
 8005370:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005372:	697b      	ldr	r3, [r7, #20]
}
 8005374:	4618      	mov	r0, r3
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr
	...

08005380 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	4804      	ldr	r0, [pc, #16]	; (80053a4 <xEventGroupSetBitsFromISR+0x24>)
 8005394:	f002 fc7e 	bl	8007c94 <xTimerPendFunctionCallFromISR>
 8005398:	6178      	str	r0, [r7, #20]

		return xReturn;
 800539a:	697b      	ldr	r3, [r7, #20]
	}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	08005323 	.word	0x08005323

080053a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f103 0208 	add.w	r2, r3, #8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 0208 	add.w	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f103 0208 	add.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d103      	bne.n	8005464 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e00c      	b.n	800547e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3308      	adds	r3, #8
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e002      	b.n	8005472 <vListInsert+0x2e>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d2f6      	bcs.n	800546c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6892      	ldr	r2, [r2, #8]
 80054ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6852      	ldr	r2, [r2, #4]
 80054d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d103      	bne.n	80054e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1e5a      	subs	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
	...

08005508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueGenericReset+0x2a>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60bb      	str	r3, [r7, #8]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005532:	f002 fcc3 	bl	8007ebc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	441a      	add	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	3b01      	subs	r3, #1
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	441a      	add	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	22ff      	movs	r2, #255	; 0xff
 8005576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	22ff      	movs	r2, #255	; 0xff
 800557e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d114      	bne.n	80055b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01a      	beq.n	80055c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3310      	adds	r3, #16
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fc37 	bl	8006e08 <xTaskRemoveFromEventList>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d012      	beq.n	80055c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <xQueueGenericReset+0xcc>)
 80055a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	e009      	b.n	80055c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3310      	adds	r3, #16
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fef6 	bl	80053a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3324      	adds	r3, #36	; 0x24
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fef1 	bl	80053a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055c6:	f002 fca9 	bl	8007f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055ca:	2301      	movs	r3, #1
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	e000ed04 	.word	0xe000ed04

080055d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08e      	sub	sp, #56	; 0x38
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
 80055e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <xQueueGenericCreateStatic+0x52>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <xQueueGenericCreateStatic+0x56>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueGenericCreateStatic+0x58>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	623b      	str	r3, [r7, #32]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <xQueueGenericCreateStatic+0x7e>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <xQueueGenericCreateStatic+0x82>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <xQueueGenericCreateStatic+0x84>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	61fb      	str	r3, [r7, #28]
}
 8005672:	bf00      	nop
 8005674:	e7fe      	b.n	8005674 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005676:	2350      	movs	r3, #80	; 0x50
 8005678:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b50      	cmp	r3, #80	; 0x50
 800567e:	d00a      	beq.n	8005696 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	61bb      	str	r3, [r7, #24]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00d      	beq.n	80056bc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f843 	bl	8005742 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80056be:	4618      	mov	r0, r3
 80056c0:	3730      	adds	r7, #48	; 0x30
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b08a      	sub	sp, #40	; 0x28
 80056ca:	af02      	add	r7, sp, #8
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	4613      	mov	r3, r2
 80056d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	613b      	str	r3, [r7, #16]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	e004      	b.n	8005706 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	fb02 f303 	mul.w	r3, r2, r3
 8005704:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3350      	adds	r3, #80	; 0x50
 800570a:	4618      	mov	r0, r3
 800570c:	f002 fcd6 	bl	80080bc <pvPortMalloc>
 8005710:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00f      	beq.n	8005738 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	3350      	adds	r3, #80	; 0x50
 800571c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005726:	79fa      	ldrb	r2, [r7, #7]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f805 	bl	8005742 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005738:	69bb      	ldr	r3, [r7, #24]
	}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e002      	b.n	8005764 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005770:	2101      	movs	r1, #1
 8005772:	69b8      	ldr	r0, [r7, #24]
 8005774:	f7ff fec8 	bl	8005508 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80057a8:	2300      	movs	r3, #0
 80057aa:	2200      	movs	r2, #0
 80057ac:	2100      	movs	r1, #0
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f8a2 	bl	80058f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057c6:	2301      	movs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	461a      	mov	r2, r3
 80057d2:	6939      	ldr	r1, [r7, #16]
 80057d4:	6978      	ldr	r0, [r7, #20]
 80057d6:	f7ff ff76 	bl	80056c6 <xQueueGenericCreate>
 80057da:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ffd3 	bl	8005788 <prvInitialiseMutex>

		return pxNewQueue;
 80057e2:	68fb      	ldr	r3, [r7, #12]
	}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b088      	sub	sp, #32
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	4603      	mov	r3, r0
 80057f4:	6039      	str	r1, [r7, #0]
 80057f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057f8:	2301      	movs	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	6939      	ldr	r1, [r7, #16]
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f7ff fee4 	bl	80055d8 <xQueueGenericCreateStatic>
 8005810:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff ffb8 	bl	8005788 <prvInitialiseMutex>

		return pxNewQueue;
 8005818:	68fb      	ldr	r3, [r7, #12]
	}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005822:	b590      	push	{r4, r7, lr}
 8005824:	b087      	sub	sp, #28
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	60fb      	str	r3, [r7, #12]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	685c      	ldr	r4, [r3, #4]
 800584e:	f001 fd01 	bl	8007254 <xTaskGetCurrentTaskHandle>
 8005852:	4603      	mov	r3, r0
 8005854:	429c      	cmp	r4, r3
 8005856:	d111      	bne.n	800587c <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	1e5a      	subs	r2, r3, #1
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800586a:	2300      	movs	r3, #0
 800586c:	2200      	movs	r2, #0
 800586e:	2100      	movs	r1, #0
 8005870:	6938      	ldr	r0, [r7, #16]
 8005872:	f000 f841 	bl	80058f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005876:	2301      	movs	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e001      	b.n	8005880 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005880:	697b      	ldr	r3, [r7, #20]
	}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd90      	pop	{r4, r7, pc}

0800588a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800588a:	b590      	push	{r4, r7, lr}
 800588c:	b087      	sub	sp, #28
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60fb      	str	r3, [r7, #12]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	685c      	ldr	r4, [r3, #4]
 80058b8:	f001 fccc 	bl	8007254 <xTaskGetCurrentTaskHandle>
 80058bc:	4603      	mov	r3, r0
 80058be:	429c      	cmp	r4, r3
 80058c0:	d107      	bne.n	80058d2 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80058cc:	2301      	movs	r3, #1
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e00c      	b.n	80058ec <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6938      	ldr	r0, [r7, #16]
 80058d6:	f000 fa85 	bl	8005de4 <xQueueSemaphoreTake>
 80058da:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80058ec:	697b      	ldr	r3, [r7, #20]
	}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd90      	pop	{r4, r7, pc}
	...

080058f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08e      	sub	sp, #56	; 0x38
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005906:	2300      	movs	r3, #0
 8005908:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <xQueueGenericSend+0x32>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <xQueueGenericSend+0x40>
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <xQueueGenericSend+0x44>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <xQueueGenericSend+0x46>
 800593c:	2300      	movs	r3, #0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <xQueueGenericSend+0x60>
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005954:	bf00      	nop
 8005956:	e7fe      	b.n	8005956 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d103      	bne.n	8005966 <xQueueGenericSend+0x6e>
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <xQueueGenericSend+0x72>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <xQueueGenericSend+0x74>
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <xQueueGenericSend+0x8e>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	623b      	str	r3, [r7, #32]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005986:	f001 fc73 	bl	8007270 <xTaskGetSchedulerState>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <xQueueGenericSend+0x9e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <xQueueGenericSend+0xa2>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <xQueueGenericSend+0xa4>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10a      	bne.n	80059b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	61fb      	str	r3, [r7, #28]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059b6:	f002 fa81 	bl	8007ebc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <xQueueGenericSend+0xd4>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d129      	bne.n	8005a20 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d2:	f000 fb2a 	bl	800602a <prvCopyDataToQueue>
 80059d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d010      	beq.n	8005a02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 fa0f 	bl	8006e08 <xTaskRemoveFromEventList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <xQueueGenericSend+0x1f8>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	e00a      	b.n	8005a18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a08:	4b39      	ldr	r3, [pc, #228]	; (8005af0 <xQueueGenericSend+0x1f8>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a18:	f002 fa80 	bl	8007f1c <vPortExitCritical>
				return pdPASS;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e063      	b.n	8005ae8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a26:	f002 fa79 	bl	8007f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e05c      	b.n	8005ae8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 faab 	bl	8006f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a42:	f002 fa6b 	bl	8007f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a46:	f000 ff63 	bl	8006910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a4a:	f002 fa37 	bl	8007ebc <vPortEnterCritical>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d103      	bne.n	8005a64 <xQueueGenericSend+0x16c>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a6a:	b25b      	sxtb	r3, r3
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d103      	bne.n	8005a7a <xQueueGenericSend+0x182>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a7a:	f002 fa4f 	bl	8007f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a7e:	1d3a      	adds	r2, r7, #4
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fa9a 	bl	8006fc0 <xTaskCheckForTimeOut>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d124      	bne.n	8005adc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a94:	f000 fbc1 	bl	800621a <prvIsQueueFull>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	3310      	adds	r3, #16
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 f922 	bl	8006cf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aae:	f000 fb4c 	bl	800614a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ab2:	f000 ff3b 	bl	800692c <xTaskResumeAll>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f af7c 	bne.w	80059b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <xQueueGenericSend+0x1f8>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	e772      	b.n	80059b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ad2:	f000 fb3a 	bl	800614a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ad6:	f000 ff29 	bl	800692c <xTaskResumeAll>
 8005ada:	e76c      	b.n	80059b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ade:	f000 fb34 	bl	800614a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ae2:	f000 ff23 	bl	800692c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ae6:	2300      	movs	r3, #0
		}
	}
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3738      	adds	r7, #56	; 0x38
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <xQueueGenericSendFromISR+0x3c>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <xQueueGenericSendFromISR+0x40>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <xQueueGenericSendFromISR+0x42>
 8005b34:	2300      	movs	r3, #0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	623b      	str	r3, [r7, #32]
}
 8005b4c:	bf00      	nop
 8005b4e:	e7fe      	b.n	8005b4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d103      	bne.n	8005b5e <xQueueGenericSendFromISR+0x6a>
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <xQueueGenericSendFromISR+0x6e>
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e000      	b.n	8005b64 <xQueueGenericSendFromISR+0x70>
 8005b62:	2300      	movs	r3, #0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	61fb      	str	r3, [r7, #28]
}
 8005b7a:	bf00      	nop
 8005b7c:	e7fe      	b.n	8005b7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b7e:	f002 fa5f 	bl	8008040 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b82:	f3ef 8211 	mrs	r2, BASEPRI
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	61ba      	str	r2, [r7, #24]
 8005b98:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <xQueueGenericSendFromISR+0xbc>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d12c      	bne.n	8005c0a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bc0:	f000 fa33 	bl	800602a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bcc:	d112      	bne.n	8005bf4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	3324      	adds	r3, #36	; 0x24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 f914 	bl	8006e08 <xTaskRemoveFromEventList>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00e      	beq.n	8005c04 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e007      	b.n	8005c04 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	b25a      	sxtb	r2, r3
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c04:	2301      	movs	r3, #1
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c08:	e001      	b.n	8005c0e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3738      	adds	r7, #56	; 0x38
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08c      	sub	sp, #48	; 0x30
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c30:	2300      	movs	r3, #0
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <xQueueReceive+0x30>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	623b      	str	r3, [r7, #32]
}
 8005c50:	bf00      	nop
 8005c52:	e7fe      	b.n	8005c52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <xQueueReceive+0x3e>
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <xQueueReceive+0x42>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <xQueueReceive+0x44>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xQueueReceive+0x5e>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	61fb      	str	r3, [r7, #28]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c82:	f001 faf5 	bl	8007270 <xTaskGetSchedulerState>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <xQueueReceive+0x6e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <xQueueReceive+0x72>
 8005c92:	2301      	movs	r3, #1
 8005c94:	e000      	b.n	8005c98 <xQueueReceive+0x74>
 8005c96:	2300      	movs	r3, #0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <xQueueReceive+0x8e>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	61bb      	str	r3, [r7, #24]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cb2:	f002 f903 	bl	8007ebc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d01f      	beq.n	8005d02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cc6:	f000 fa1a 	bl	80060fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1e5a      	subs	r2, r3, #1
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00f      	beq.n	8005cfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	3310      	adds	r3, #16
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f892 	bl	8006e08 <xTaskRemoveFromEventList>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cea:	4b3d      	ldr	r3, [pc, #244]	; (8005de0 <xQueueReceive+0x1bc>)
 8005cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cfa:	f002 f90f 	bl	8007f1c <vPortExitCritical>
				return pdPASS;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e069      	b.n	8005dd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d103      	bne.n	8005d10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d08:	f002 f908 	bl	8007f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e062      	b.n	8005dd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d16:	f107 0310 	add.w	r3, r7, #16
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 f93a 	bl	8006f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d20:	2301      	movs	r3, #1
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d24:	f002 f8fa 	bl	8007f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d28:	f000 fdf2 	bl	8006910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d2c:	f002 f8c6 	bl	8007ebc <vPortEnterCritical>
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d36:	b25b      	sxtb	r3, r3
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d103      	bne.n	8005d46 <xQueueReceive+0x122>
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d4c:	b25b      	sxtb	r3, r3
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d103      	bne.n	8005d5c <xQueueReceive+0x138>
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d5c:	f002 f8de 	bl	8007f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d60:	1d3a      	adds	r2, r7, #4
 8005d62:	f107 0310 	add.w	r3, r7, #16
 8005d66:	4611      	mov	r1, r2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 f929 	bl	8006fc0 <xTaskCheckForTimeOut>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d123      	bne.n	8005dbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d76:	f000 fa3a 	bl	80061ee <prvIsQueueEmpty>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d017      	beq.n	8005db0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	3324      	adds	r3, #36	; 0x24
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 ffb1 	bl	8006cf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d90:	f000 f9db 	bl	800614a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d94:	f000 fdca 	bl	800692c <xTaskResumeAll>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d189      	bne.n	8005cb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <xQueueReceive+0x1bc>)
 8005da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	e780      	b.n	8005cb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db2:	f000 f9ca 	bl	800614a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005db6:	f000 fdb9 	bl	800692c <xTaskResumeAll>
 8005dba:	e77a      	b.n	8005cb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dbe:	f000 f9c4 	bl	800614a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dc2:	f000 fdb3 	bl	800692c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc8:	f000 fa11 	bl	80061ee <prvIsQueueEmpty>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f43f af6f 	beq.w	8005cb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3730      	adds	r7, #48	; 0x30
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	e000ed04 	.word	0xe000ed04

08005de4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08e      	sub	sp, #56	; 0x38
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	623b      	str	r3, [r7, #32]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	61fb      	str	r3, [r7, #28]
}
 8005e30:	bf00      	nop
 8005e32:	e7fe      	b.n	8005e32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e34:	f001 fa1c 	bl	8007270 <xTaskGetSchedulerState>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <xQueueSemaphoreTake+0x60>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <xQueueSemaphoreTake+0x64>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <xQueueSemaphoreTake+0x66>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	61bb      	str	r3, [r7, #24]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e64:	f002 f82a 	bl	8007ebc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d024      	beq.n	8005ebe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	1e5a      	subs	r2, r3, #1
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005e84:	f001 fb8c 	bl	80075a0 <pvTaskIncrementMutexHeldCount>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e8c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00f      	beq.n	8005eb6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e98:	3310      	adds	r3, #16
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ffb4 	bl	8006e08 <xTaskRemoveFromEventList>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ea6:	4b54      	ldr	r3, [pc, #336]	; (8005ff8 <xQueueSemaphoreTake+0x214>)
 8005ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005eb6:	f002 f831 	bl	8007f1c <vPortExitCritical>
				return pdPASS;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e097      	b.n	8005fee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d111      	bne.n	8005ee8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	617b      	str	r3, [r7, #20]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ee0:	f002 f81c 	bl	8007f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e082      	b.n	8005fee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eee:	f107 030c 	add.w	r3, r7, #12
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 f84e 	bl	8006f94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005efc:	f002 f80e 	bl	8007f1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f00:	f000 fd06 	bl	8006910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f04:	f001 ffda 	bl	8007ebc <vPortEnterCritical>
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d103      	bne.n	8005f1e <xQueueSemaphoreTake+0x13a>
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f24:	b25b      	sxtb	r3, r3
 8005f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2a:	d103      	bne.n	8005f34 <xQueueSemaphoreTake+0x150>
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f34:	f001 fff2 	bl	8007f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f38:	463a      	mov	r2, r7
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f83d 	bl	8006fc0 <xTaskCheckForTimeOut>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d132      	bne.n	8005fb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f4e:	f000 f94e 	bl	80061ee <prvIsQueueEmpty>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d026      	beq.n	8005fa6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005f60:	f001 ffac 	bl	8007ebc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f001 f99f 	bl	80072ac <xTaskPriorityInherit>
 8005f6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f70:	f001 ffd4 	bl	8007f1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	3324      	adds	r3, #36	; 0x24
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 feb7 	bl	8006cf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f84:	f000 f8e1 	bl	800614a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f88:	f000 fcd0 	bl	800692c <xTaskResumeAll>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f47f af68 	bne.w	8005e64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <xQueueSemaphoreTake+0x214>)
 8005f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	e75e      	b.n	8005e64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fa8:	f000 f8cf 	bl	800614a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fac:	f000 fcbe 	bl	800692c <xTaskResumeAll>
 8005fb0:	e758      	b.n	8005e64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fb4:	f000 f8c9 	bl	800614a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fb8:	f000 fcb8 	bl	800692c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fbe:	f000 f916 	bl	80061ee <prvIsQueueEmpty>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f43f af4d 	beq.w	8005e64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00d      	beq.n	8005fec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005fd0:	f001 ff74 	bl	8007ebc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fd6:	f000 f811 	bl	8005ffc <prvGetDisinheritPriorityAfterTimeout>
 8005fda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fa3e 	bl	8007464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fe8:	f001 ff98 	bl	8007f1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3738      	adds	r7, #56	; 0x38
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e001      	b.n	800601e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800601e:	68fb      	ldr	r3, [r7, #12]
	}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr

0800602a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006036:	2300      	movs	r3, #0
 8006038:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10d      	bne.n	8006064 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d14d      	bne.n	80060ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4618      	mov	r0, r3
 8006056:	f001 f997 	bl	8007388 <xTaskPriorityDisinherit>
 800605a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	e043      	b.n	80060ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d119      	bne.n	800609e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6898      	ldr	r0, [r3, #8]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	461a      	mov	r2, r3
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	f002 fa25 	bl	80084c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	441a      	add	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d32b      	bcc.n	80060ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	e026      	b.n	80060ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68d8      	ldr	r0, [r3, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	461a      	mov	r2, r3
 80060a8:	68b9      	ldr	r1, [r7, #8]
 80060aa:	f002 fa0b 	bl	80084c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	425b      	negs	r3, r3
 80060b8:	441a      	add	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d207      	bcs.n	80060da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	425b      	negs	r3, r3
 80060d4:	441a      	add	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d105      	bne.n	80060ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80060f4:	697b      	ldr	r3, [r7, #20]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d018      	beq.n	8006142 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	441a      	add	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d303      	bcc.n	8006132 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68d9      	ldr	r1, [r3, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	461a      	mov	r2, r3
 800613c:	6838      	ldr	r0, [r7, #0]
 800613e:	f002 f9c1 	bl	80084c4 <memcpy>
	}
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006152:	f001 feb3 	bl	8007ebc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800615c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800615e:	e011      	b.n	8006184 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	d012      	beq.n	800618e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fe4b 	bl	8006e08 <xTaskRemoveFromEventList>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006178:	f000 ff84 	bl	8007084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	3b01      	subs	r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006188:	2b00      	cmp	r3, #0
 800618a:	dce9      	bgt.n	8006160 <prvUnlockQueue+0x16>
 800618c:	e000      	b.n	8006190 <prvUnlockQueue+0x46>
					break;
 800618e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	22ff      	movs	r2, #255	; 0xff
 8006194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006198:	f001 fec0 	bl	8007f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800619c:	f001 fe8e 	bl	8007ebc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061a8:	e011      	b.n	80061ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d012      	beq.n	80061d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3310      	adds	r3, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fe26 	bl	8006e08 <xTaskRemoveFromEventList>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061c2:	f000 ff5f 	bl	8007084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061c6:	7bbb      	ldrb	r3, [r7, #14]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	dce9      	bgt.n	80061aa <prvUnlockQueue+0x60>
 80061d6:	e000      	b.n	80061da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80061e2:	f001 fe9b 	bl	8007f1c <vPortExitCritical>
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061f6:	f001 fe61 	bl	8007ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d102      	bne.n	8006208 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e001      	b.n	800620c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800620c:	f001 fe86 	bl	8007f1c <vPortExitCritical>

	return xReturn;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006222:	f001 fe4b 	bl	8007ebc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622e:	429a      	cmp	r2, r3
 8006230:	d102      	bne.n	8006238 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	e001      	b.n	800623c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800623c:	f001 fe6e 	bl	8007f1c <vPortExitCritical>

	return xReturn;
 8006240:	68fb      	ldr	r3, [r7, #12]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e014      	b.n	8006286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800625c:	4a0e      	ldr	r2, [pc, #56]	; (8006298 <vQueueAddToRegistry+0x4c>)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006268:	490b      	ldr	r1, [pc, #44]	; (8006298 <vQueueAddToRegistry+0x4c>)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006272:	4a09      	ldr	r2, [pc, #36]	; (8006298 <vQueueAddToRegistry+0x4c>)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4413      	add	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800627e:	e006      	b.n	800628e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b07      	cmp	r3, #7
 800628a:	d9e7      	bls.n	800625c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800628c:	bf00      	nop
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr
 8006298:	20000ab8 	.word	0x20000ab8

0800629c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062ac:	f001 fe06 	bl	8007ebc <vPortEnterCritical>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b6:	b25b      	sxtb	r3, r3
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d103      	bne.n	80062c6 <vQueueWaitForMessageRestricted+0x2a>
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d2:	d103      	bne.n	80062dc <vQueueWaitForMessageRestricted+0x40>
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062dc:	f001 fe1e 	bl	8007f1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	3324      	adds	r3, #36	; 0x24
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fd5d 	bl	8006db0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062f6:	6978      	ldr	r0, [r7, #20]
 80062f8:	f7ff ff27 	bl	800614a <prvUnlockQueue>
	}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006304:	b580      	push	{r7, lr}
 8006306:	b08e      	sub	sp, #56	; 0x38
 8006308:	af04      	add	r7, sp, #16
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10a      	bne.n	800632e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	623b      	str	r3, [r7, #32]
}
 800632a:	bf00      	nop
 800632c:	e7fe      	b.n	800632c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <xTaskCreateStatic+0x46>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	61fb      	str	r3, [r7, #28]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800634a:	2364      	movs	r3, #100	; 0x64
 800634c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b64      	cmp	r3, #100	; 0x64
 8006352:	d00a      	beq.n	800636a <xTaskCreateStatic+0x66>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	61bb      	str	r3, [r7, #24]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <xTaskCreateStatic+0xaa>
 8006370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01b      	beq.n	80063ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	2202      	movs	r2, #2
 8006384:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006388:	2300      	movs	r3, #0
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	9302      	str	r3, [sp, #8]
 8006390:	f107 0314 	add.w	r3, r7, #20
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f850 	bl	8006446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063a8:	f000 f8da 	bl	8006560 <prvAddNewTaskToReadyList>
 80063ac:	e001      	b.n	80063b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063b2:	697b      	ldr	r3, [r7, #20]
	}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3728      	adds	r7, #40	; 0x28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08c      	sub	sp, #48	; 0x30
 80063c0:	af04      	add	r7, sp, #16
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 fe73 	bl	80080bc <pvPortMalloc>
 80063d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00e      	beq.n	80063fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80063de:	2064      	movs	r0, #100	; 0x64
 80063e0:	f001 fe6c 	bl	80080bc <pvPortMalloc>
 80063e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
 80063f2:	e005      	b.n	8006400 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063f4:	6978      	ldr	r0, [r7, #20]
 80063f6:	f001 ff25 	bl	8008244 <vPortFree>
 80063fa:	e001      	b.n	8006400 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	2300      	movs	r3, #0
 8006412:	9303      	str	r3, [sp, #12]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	9302      	str	r3, [sp, #8]
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	9301      	str	r3, [sp, #4]
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f80e 	bl	8006446 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800642a:	69f8      	ldr	r0, [r7, #28]
 800642c:	f000 f898 	bl	8006560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006430:	2301      	movs	r3, #1
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e002      	b.n	800643c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295
 800643a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800643c:	69bb      	ldr	r3, [r7, #24]
	}
 800643e:	4618      	mov	r0, r3
 8006440:	3720      	adds	r7, #32
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b088      	sub	sp, #32
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	461a      	mov	r2, r3
 800645e:	21a5      	movs	r1, #165	; 0xa5
 8006460:	f002 f804 	bl	800846c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800646e:	3b01      	subs	r3, #1
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f023 0307 	bic.w	r3, r3, #7
 800647c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <prvInitialiseNewTask+0x58>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	617b      	str	r3, [r7, #20]
}
 800649a:	bf00      	nop
 800649c:	e7fe      	b.n	800649c <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064a4:	2300      	movs	r3, #0
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	e012      	b.n	80064d0 <prvInitialiseNewTask+0x8a>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	4413      	add	r3, r2
 80064b0:	7819      	ldrb	r1, [r3, #0]
 80064b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	3334      	adds	r3, #52	; 0x34
 80064ba:	460a      	mov	r2, r1
 80064bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d006      	beq.n	80064d8 <prvInitialiseNewTask+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3301      	adds	r3, #1
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d9e9      	bls.n	80064aa <prvInitialiseNewTask+0x64>
 80064d6:	e000      	b.n	80064da <prvInitialiseNewTask+0x94>
		{
			break;
 80064d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	2b37      	cmp	r3, #55	; 0x37
 80064e6:	d901      	bls.n	80064ec <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064e8:	2337      	movs	r3, #55	; 0x37
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064f6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	2200      	movs	r2, #0
 80064fc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	3304      	adds	r3, #4
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe ff6f 	bl	80053e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	3318      	adds	r3, #24
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe ff6a 	bl	80053e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	2200      	movs	r2, #0
 800652c:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	2200      	movs	r2, #0
 8006532:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	69b8      	ldr	r0, [r7, #24]
 8006542:	f001 fbc7 	bl	8007cd4 <pxPortInitialiseStack>
 8006546:	4602      	mov	r2, r0
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <prvInitialiseNewTask+0x112>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006556:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006558:	bf00      	nop
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006568:	f001 fca8 	bl	8007ebc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800656c:	4b2d      	ldr	r3, [pc, #180]	; (8006624 <prvAddNewTaskToReadyList+0xc4>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	4a2c      	ldr	r2, [pc, #176]	; (8006624 <prvAddNewTaskToReadyList+0xc4>)
 8006574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006576:	4b2c      	ldr	r3, [pc, #176]	; (8006628 <prvAddNewTaskToReadyList+0xc8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800657e:	4a2a      	ldr	r2, [pc, #168]	; (8006628 <prvAddNewTaskToReadyList+0xc8>)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006584:	4b27      	ldr	r3, [pc, #156]	; (8006624 <prvAddNewTaskToReadyList+0xc4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d110      	bne.n	80065ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800658c:	f000 fda0 	bl	80070d0 <prvInitialiseTaskLists>
 8006590:	e00d      	b.n	80065ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006592:	4b26      	ldr	r3, [pc, #152]	; (800662c <prvAddNewTaskToReadyList+0xcc>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800659a:	4b23      	ldr	r3, [pc, #140]	; (8006628 <prvAddNewTaskToReadyList+0xc8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d802      	bhi.n	80065ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <prvAddNewTaskToReadyList+0xc8>)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065ae:	4b20      	ldr	r3, [pc, #128]	; (8006630 <prvAddNewTaskToReadyList+0xd0>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <prvAddNewTaskToReadyList+0xd0>)
 80065b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80065b8:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <prvAddNewTaskToReadyList+0xd0>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	4b1b      	ldr	r3, [pc, #108]	; (8006634 <prvAddNewTaskToReadyList+0xd4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d903      	bls.n	80065d4 <prvAddNewTaskToReadyList+0x74>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	4a18      	ldr	r2, [pc, #96]	; (8006634 <prvAddNewTaskToReadyList+0xd4>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4a15      	ldr	r2, [pc, #84]	; (8006638 <prvAddNewTaskToReadyList+0xd8>)
 80065e2:	441a      	add	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fe ff07 	bl	80053fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065f0:	f001 fc94 	bl	8007f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065f4:	4b0d      	ldr	r3, [pc, #52]	; (800662c <prvAddNewTaskToReadyList+0xcc>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00e      	beq.n	800661a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <prvAddNewTaskToReadyList+0xc8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	429a      	cmp	r2, r3
 8006608:	d207      	bcs.n	800661a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800660a:	4b0c      	ldr	r3, [pc, #48]	; (800663c <prvAddNewTaskToReadyList+0xdc>)
 800660c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000fcc 	.word	0x20000fcc
 8006628:	20000af8 	.word	0x20000af8
 800662c:	20000fd8 	.word	0x20000fd8
 8006630:	20000fe8 	.word	0x20000fe8
 8006634:	20000fd4 	.word	0x20000fd4
 8006638:	20000afc 	.word	0x20000afc
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006648:	f001 fc38 	bl	8007ebc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <vTaskDelete+0x18>
 8006652:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <vTaskDelete+0xc4>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	e000      	b.n	800665a <vTaskDelete+0x1a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3304      	adds	r3, #4
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe ff27 	bl	80054b4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d004      	beq.n	8006678 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3318      	adds	r3, #24
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe ff1e 	bl	80054b4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006678:	4b23      	ldr	r3, [pc, #140]	; (8006708 <vTaskDelete+0xc8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	4a22      	ldr	r2, [pc, #136]	; (8006708 <vTaskDelete+0xc8>)
 8006680:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006682:	4b20      	ldr	r3, [pc, #128]	; (8006704 <vTaskDelete+0xc4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d10b      	bne.n	80066a4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3304      	adds	r3, #4
 8006690:	4619      	mov	r1, r3
 8006692:	481e      	ldr	r0, [pc, #120]	; (800670c <vTaskDelete+0xcc>)
 8006694:	f7fe feb3 	bl	80053fe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006698:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <vTaskDelete+0xd0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3301      	adds	r3, #1
 800669e:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <vTaskDelete+0xd0>)
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e009      	b.n	80066b8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80066a4:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <vTaskDelete+0xd4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <vTaskDelete+0xd4>)
 80066ac:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fd7c 	bl	80071ac <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80066b4:	f000 fdaa 	bl	800720c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80066b8:	f001 fc30 	bl	8007f1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80066bc:	4b16      	ldr	r3, [pc, #88]	; (8006718 <vTaskDelete+0xd8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01b      	beq.n	80066fc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <vTaskDelete+0xc4>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d116      	bne.n	80066fc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <vTaskDelete+0xdc>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <vTaskDelete+0xac>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60bb      	str	r3, [r7, #8]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80066ec:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <vTaskDelete+0xe0>)
 80066ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20000af8 	.word	0x20000af8
 8006708:	20000fe8 	.word	0x20000fe8
 800670c:	20000fa0 	.word	0x20000fa0
 8006710:	20000fb4 	.word	0x20000fb4
 8006714:	20000fcc 	.word	0x20000fcc
 8006718:	20000fd8 	.word	0x20000fd8
 800671c:	20000ff4 	.word	0x20000ff4
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d017      	beq.n	8006766 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006736:	4b13      	ldr	r3, [pc, #76]	; (8006784 <vTaskDelay+0x60>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00a      	beq.n	8006754 <vTaskDelay+0x30>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	60bb      	str	r3, [r7, #8]
}
 8006750:	bf00      	nop
 8006752:	e7fe      	b.n	8006752 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006754:	f000 f8dc 	bl	8006910 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006758:	2100      	movs	r1, #0
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 ff34 	bl	80075c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006760:	f000 f8e4 	bl	800692c <xTaskResumeAll>
 8006764:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <vTaskDelay+0x64>)
 800676e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20000ff4 	.word	0x20000ff4
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <eTaskGetState+0x28>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	60bb      	str	r3, [r7, #8]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <eTaskGetState+0xa0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d102      	bne.n	80067c4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80067be:	2300      	movs	r3, #0
 80067c0:	75fb      	strb	r3, [r7, #23]
 80067c2:	e02d      	b.n	8006820 <eTaskGetState+0x94>
		}
		else
		{
			taskENTER_CRITICAL();
 80067c4:	f001 fb7a 	bl	8007ebc <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80067ce:	f001 fba5 	bl	8007f1c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <eTaskGetState+0xa4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d004      	beq.n	80067e6 <eTaskGetState+0x5a>
 80067dc:	4b15      	ldr	r3, [pc, #84]	; (8006834 <eTaskGetState+0xa8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d102      	bne.n	80067ec <eTaskGetState+0x60>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80067e6:	2302      	movs	r3, #2
 80067e8:	75fb      	strb	r3, [r7, #23]
 80067ea:	e019      	b.n	8006820 <eTaskGetState+0x94>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a12      	ldr	r2, [pc, #72]	; (8006838 <eTaskGetState+0xac>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d109      	bne.n	8006808 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <eTaskGetState+0x76>
					{
						eReturn = eSuspended;
 80067fc:	2303      	movs	r3, #3
 80067fe:	75fb      	strb	r3, [r7, #23]
 8006800:	e00e      	b.n	8006820 <eTaskGetState+0x94>
					}
					else
					{
						eReturn = eBlocked;
 8006802:	2302      	movs	r3, #2
 8006804:	75fb      	strb	r3, [r7, #23]
 8006806:	e00b      	b.n	8006820 <eTaskGetState+0x94>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4a0c      	ldr	r2, [pc, #48]	; (800683c <eTaskGetState+0xb0>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d002      	beq.n	8006816 <eTaskGetState+0x8a>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d102      	bne.n	800681c <eTaskGetState+0x90>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006816:	2304      	movs	r3, #4
 8006818:	75fb      	strb	r3, [r7, #23]
 800681a:	e001      	b.n	8006820 <eTaskGetState+0x94>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800681c:	2301      	movs	r3, #1
 800681e:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000af8 	.word	0x20000af8
 8006830:	20000f84 	.word	0x20000f84
 8006834:	20000f88 	.word	0x20000f88
 8006838:	20000fb8 	.word	0x20000fb8
 800683c:	20000fa0 	.word	0x20000fa0

08006840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800684e:	463a      	mov	r2, r7
 8006850:	1d39      	adds	r1, r7, #4
 8006852:	f107 0308 	add.w	r3, r7, #8
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fb86 	bl	8004f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800685c:	6839      	ldr	r1, [r7, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	9202      	str	r2, [sp, #8]
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	2300      	movs	r3, #0
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	2300      	movs	r3, #0
 800686c:	460a      	mov	r2, r1
 800686e:	4922      	ldr	r1, [pc, #136]	; (80068f8 <vTaskStartScheduler+0xb8>)
 8006870:	4822      	ldr	r0, [pc, #136]	; (80068fc <vTaskStartScheduler+0xbc>)
 8006872:	f7ff fd47 	bl	8006304 <xTaskCreateStatic>
 8006876:	4603      	mov	r3, r0
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <vTaskStartScheduler+0xc0>)
 800687a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800687c:	4b20      	ldr	r3, [pc, #128]	; (8006900 <vTaskStartScheduler+0xc0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e001      	b.n	800688e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d102      	bne.n	800689a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006894:	f000 feec 	bl	8007670 <xTimerCreateTimerTask>
 8006898:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d118      	bne.n	80068d2 <vTaskStartScheduler+0x92>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068b4:	4b13      	ldr	r3, [pc, #76]	; (8006904 <vTaskStartScheduler+0xc4>)
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068bc:	4b12      	ldr	r3, [pc, #72]	; (8006908 <vTaskStartScheduler+0xc8>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80068c2:	4b12      	ldr	r3, [pc, #72]	; (800690c <vTaskStartScheduler+0xcc>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80068c8:	f7f9 fc42 	bl	8000150 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068cc:	f001 fa84 	bl	8007dd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068d0:	e00e      	b.n	80068f0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d10a      	bne.n	80068f0 <vTaskStartScheduler+0xb0>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	60fb      	str	r3, [r7, #12]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <vTaskStartScheduler+0xae>
}
 80068f0:	bf00      	nop
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	0800856c 	.word	0x0800856c
 80068fc:	0800709d 	.word	0x0800709d
 8006900:	20000ff0 	.word	0x20000ff0
 8006904:	20000fec 	.word	0x20000fec
 8006908:	20000fd8 	.word	0x20000fd8
 800690c:	20000fd0 	.word	0x20000fd0

08006910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <vTaskSuspendAll+0x18>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a03      	ldr	r2, [pc, #12]	; (8006928 <vTaskSuspendAll+0x18>)
 800691c:	6013      	str	r3, [r2, #0]
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	bc80      	pop	{r7}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000ff4 	.word	0x20000ff4

0800692c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800693a:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <xTaskResumeAll+0x118>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <xTaskResumeAll+0x2c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	603b      	str	r3, [r7, #0]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006958:	f001 fab0 	bl	8007ebc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800695c:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <xTaskResumeAll+0x118>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3b01      	subs	r3, #1
 8006962:	4a38      	ldr	r2, [pc, #224]	; (8006a44 <xTaskResumeAll+0x118>)
 8006964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <xTaskResumeAll+0x118>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d162      	bne.n	8006a34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800696e:	4b36      	ldr	r3, [pc, #216]	; (8006a48 <xTaskResumeAll+0x11c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d05e      	beq.n	8006a34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006976:	e02f      	b.n	80069d8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006978:	4b34      	ldr	r3, [pc, #208]	; (8006a4c <xTaskResumeAll+0x120>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3318      	adds	r3, #24
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fd95 	bl	80054b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3304      	adds	r3, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fd90 	bl	80054b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <xTaskResumeAll+0x124>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d903      	bls.n	80069a8 <xTaskResumeAll+0x7c>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <xTaskResumeAll+0x124>)
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4a27      	ldr	r2, [pc, #156]	; (8006a54 <xTaskResumeAll+0x128>)
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7fe fd1d 	bl	80053fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	4b23      	ldr	r3, [pc, #140]	; (8006a58 <xTaskResumeAll+0x12c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d302      	bcc.n	80069d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069d2:	4b22      	ldr	r3, [pc, #136]	; (8006a5c <xTaskResumeAll+0x130>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069d8:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <xTaskResumeAll+0x120>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1cb      	bne.n	8006978 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069e6:	f000 fc11 	bl	800720c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <xTaskResumeAll+0x134>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d010      	beq.n	8006a18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069f6:	f000 f845 	bl	8006a84 <xTaskIncrementTick>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a00:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <xTaskResumeAll+0x130>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f1      	bne.n	80069f6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <xTaskResumeAll+0x134>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a18:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <xTaskResumeAll+0x130>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d009      	beq.n	8006a34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <xTaskResumeAll+0x138>)
 8006a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a34:	f001 fa72 	bl	8007f1c <vPortExitCritical>

	return xAlreadyYielded;
 8006a38:	68bb      	ldr	r3, [r7, #8]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000ff4 	.word	0x20000ff4
 8006a48:	20000fcc 	.word	0x20000fcc
 8006a4c:	20000f8c 	.word	0x20000f8c
 8006a50:	20000fd4 	.word	0x20000fd4
 8006a54:	20000afc 	.word	0x20000afc
 8006a58:	20000af8 	.word	0x20000af8
 8006a5c:	20000fe0 	.word	0x20000fe0
 8006a60:	20000fdc 	.word	0x20000fdc
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <xTaskGetTickCount+0x18>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a74:	687b      	ldr	r3, [r7, #4]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr
 8006a80:	20000fd0 	.word	0x20000fd0

08006a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a8e:	4b51      	ldr	r3, [pc, #324]	; (8006bd4 <xTaskIncrementTick+0x150>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 808e 	bne.w	8006bb4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a98:	4b4f      	ldr	r3, [pc, #316]	; (8006bd8 <xTaskIncrementTick+0x154>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006aa0:	4a4d      	ldr	r2, [pc, #308]	; (8006bd8 <xTaskIncrementTick+0x154>)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d120      	bne.n	8006aee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006aac:	4b4b      	ldr	r3, [pc, #300]	; (8006bdc <xTaskIncrementTick+0x158>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <xTaskIncrementTick+0x48>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	603b      	str	r3, [r7, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <xTaskIncrementTick+0x46>
 8006acc:	4b43      	ldr	r3, [pc, #268]	; (8006bdc <xTaskIncrementTick+0x158>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	4b43      	ldr	r3, [pc, #268]	; (8006be0 <xTaskIncrementTick+0x15c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a41      	ldr	r2, [pc, #260]	; (8006bdc <xTaskIncrementTick+0x158>)
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4a41      	ldr	r2, [pc, #260]	; (8006be0 <xTaskIncrementTick+0x15c>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	4b40      	ldr	r3, [pc, #256]	; (8006be4 <xTaskIncrementTick+0x160>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	4a3f      	ldr	r2, [pc, #252]	; (8006be4 <xTaskIncrementTick+0x160>)
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	f000 fb8f 	bl	800720c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006aee:	4b3e      	ldr	r3, [pc, #248]	; (8006be8 <xTaskIncrementTick+0x164>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d34e      	bcc.n	8006b96 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006af8:	4b38      	ldr	r3, [pc, #224]	; (8006bdc <xTaskIncrementTick+0x158>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xTaskIncrementTick+0x82>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xTaskIncrementTick+0x84>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b0c:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <xTaskIncrementTick+0x164>)
 8006b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b12:	601a      	str	r2, [r3, #0]
					break;
 8006b14:	e03f      	b.n	8006b96 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b16:	4b31      	ldr	r3, [pc, #196]	; (8006bdc <xTaskIncrementTick+0x158>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d203      	bcs.n	8006b36 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b2e:	4a2e      	ldr	r2, [pc, #184]	; (8006be8 <xTaskIncrementTick+0x164>)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6013      	str	r3, [r2, #0]
						break;
 8006b34:	e02f      	b.n	8006b96 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fcba 	bl	80054b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d004      	beq.n	8006b52 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	3318      	adds	r3, #24
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe fcb1 	bl	80054b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b56:	4b25      	ldr	r3, [pc, #148]	; (8006bec <xTaskIncrementTick+0x168>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d903      	bls.n	8006b66 <xTaskIncrementTick+0xe2>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	4a22      	ldr	r2, [pc, #136]	; (8006bec <xTaskIncrementTick+0x168>)
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4a1f      	ldr	r2, [pc, #124]	; (8006bf0 <xTaskIncrementTick+0x16c>)
 8006b74:	441a      	add	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f7fe fc3e 	bl	80053fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <xTaskIncrementTick+0x170>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d3b3      	bcc.n	8006af8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b94:	e7b0      	b.n	8006af8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b96:	4b17      	ldr	r3, [pc, #92]	; (8006bf4 <xTaskIncrementTick+0x170>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4914      	ldr	r1, [pc, #80]	; (8006bf0 <xTaskIncrementTick+0x16c>)
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d907      	bls.n	8006bbe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e004      	b.n	8006bbe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006bb4:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <xTaskIncrementTick+0x174>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <xTaskIncrementTick+0x174>)
 8006bbc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006bbe:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <xTaskIncrementTick+0x178>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006bca:	697b      	ldr	r3, [r7, #20]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000ff4 	.word	0x20000ff4
 8006bd8:	20000fd0 	.word	0x20000fd0
 8006bdc:	20000f84 	.word	0x20000f84
 8006be0:	20000f88 	.word	0x20000f88
 8006be4:	20000fe4 	.word	0x20000fe4
 8006be8:	20000fec 	.word	0x20000fec
 8006bec:	20000fd4 	.word	0x20000fd4
 8006bf0:	20000afc 	.word	0x20000afc
 8006bf4:	20000af8 	.word	0x20000af8
 8006bf8:	20000fdc 	.word	0x20000fdc
 8006bfc:	20000fe0 	.word	0x20000fe0

08006c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c06:	4b33      	ldr	r3, [pc, #204]	; (8006cd4 <vTaskSwitchContext+0xd4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c0e:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <vTaskSwitchContext+0xd8>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c14:	e05a      	b.n	8006ccc <vTaskSwitchContext+0xcc>
		xYieldPending = pdFALSE;
 8006c16:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <vTaskSwitchContext+0xd8>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006c1c:	f7f9 faa2 	bl	8000164 <getRunTimeCounterValue>
 8006c20:	4603      	mov	r3, r0
 8006c22:	4a2e      	ldr	r2, [pc, #184]	; (8006cdc <vTaskSwitchContext+0xdc>)
 8006c24:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006c26:	4b2d      	ldr	r3, [pc, #180]	; (8006cdc <vTaskSwitchContext+0xdc>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ce0 <vTaskSwitchContext+0xe0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d909      	bls.n	8006c46 <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006c32:	4b2c      	ldr	r3, [pc, #176]	; (8006ce4 <vTaskSwitchContext+0xe4>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006c38:	4a28      	ldr	r2, [pc, #160]	; (8006cdc <vTaskSwitchContext+0xdc>)
 8006c3a:	6810      	ldr	r0, [r2, #0]
 8006c3c:	4a28      	ldr	r2, [pc, #160]	; (8006ce0 <vTaskSwitchContext+0xe0>)
 8006c3e:	6812      	ldr	r2, [r2, #0]
 8006c40:	1a82      	subs	r2, r0, r2
 8006c42:	440a      	add	r2, r1
 8006c44:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 8006c46:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <vTaskSwitchContext+0xdc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a25      	ldr	r2, [pc, #148]	; (8006ce0 <vTaskSwitchContext+0xe0>)
 8006c4c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c4e:	4b26      	ldr	r3, [pc, #152]	; (8006ce8 <vTaskSwitchContext+0xe8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	e010      	b.n	8006c78 <vTaskSwitchContext+0x78>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10a      	bne.n	8006c72 <vTaskSwitchContext+0x72>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	607b      	str	r3, [r7, #4]
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <vTaskSwitchContext+0x70>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	491c      	ldr	r1, [pc, #112]	; (8006cec <vTaskSwitchContext+0xec>)
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	440b      	add	r3, r1
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0e4      	beq.n	8006c56 <vTaskSwitchContext+0x56>
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4a15      	ldr	r2, [pc, #84]	; (8006cec <vTaskSwitchContext+0xec>)
 8006c98:	4413      	add	r3, r2
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	605a      	str	r2, [r3, #4]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	3308      	adds	r3, #8
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d104      	bne.n	8006cbc <vTaskSwitchContext+0xbc>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <vTaskSwitchContext+0xe4>)
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	4a08      	ldr	r2, [pc, #32]	; (8006ce8 <vTaskSwitchContext+0xe8>)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6013      	str	r3, [r2, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000ff4 	.word	0x20000ff4
 8006cd8:	20000fe0 	.word	0x20000fe0
 8006cdc:	20000ffc 	.word	0x20000ffc
 8006ce0:	20000ff8 	.word	0x20000ff8
 8006ce4:	20000af8 	.word	0x20000af8
 8006ce8:	20000fd4 	.word	0x20000fd4
 8006cec:	20000afc 	.word	0x20000afc

08006cf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10a      	bne.n	8006d16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	60fb      	str	r3, [r7, #12]
}
 8006d12:	bf00      	nop
 8006d14:	e7fe      	b.n	8006d14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d16:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <vTaskPlaceOnEventList+0x44>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3318      	adds	r3, #24
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fe fb90 	bl	8005444 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d24:	2101      	movs	r1, #1
 8006d26:	6838      	ldr	r0, [r7, #0]
 8006d28:	f000 fc4e 	bl	80075c8 <prvAddCurrentTaskToDelayedList>
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000af8 	.word	0x20000af8

08006d38 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	617b      	str	r3, [r7, #20]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	613b      	str	r3, [r7, #16]
}
 8006d7a:	bf00      	nop
 8006d7c:	e7fe      	b.n	8006d7c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d88:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d8a:	4b08      	ldr	r3, [pc, #32]	; (8006dac <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3318      	adds	r3, #24
 8006d90:	4619      	mov	r1, r3
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7fe fb33 	bl	80053fe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d98:	2101      	movs	r1, #1
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc14 	bl	80075c8 <prvAddCurrentTaskToDelayedList>
}
 8006da0:	bf00      	nop
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000ff4 	.word	0x20000ff4
 8006dac:	20000af8 	.word	0x20000af8

08006db0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10a      	bne.n	8006dd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	617b      	str	r3, [r7, #20]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <vTaskPlaceOnEventListRestricted+0x54>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3318      	adds	r3, #24
 8006dde:	4619      	mov	r1, r3
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f7fe fb0c 	bl	80053fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006dec:	f04f 33ff 	mov.w	r3, #4294967295
 8006df0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	68b8      	ldr	r0, [r7, #8]
 8006df6:	f000 fbe7 	bl	80075c8 <prvAddCurrentTaskToDelayedList>
	}
 8006dfa:	bf00      	nop
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000af8 	.word	0x20000af8

08006e08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	60fb      	str	r3, [r7, #12]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3318      	adds	r3, #24
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe fb3b 	bl	80054b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3e:	4b1e      	ldr	r3, [pc, #120]	; (8006eb8 <xTaskRemoveFromEventList+0xb0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d11d      	bne.n	8006e82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fb32 	bl	80054b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <xTaskRemoveFromEventList+0xb4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <xTaskRemoveFromEventList+0x5c>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	4a16      	ldr	r2, [pc, #88]	; (8006ebc <xTaskRemoveFromEventList+0xb4>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a13      	ldr	r2, [pc, #76]	; (8006ec0 <xTaskRemoveFromEventList+0xb8>)
 8006e72:	441a      	add	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fabf 	bl	80053fe <vListInsertEnd>
 8006e80:	e005      	b.n	8006e8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	3318      	adds	r3, #24
 8006e86:	4619      	mov	r1, r3
 8006e88:	480e      	ldr	r0, [pc, #56]	; (8006ec4 <xTaskRemoveFromEventList+0xbc>)
 8006e8a:	f7fe fab8 	bl	80053fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4b0d      	ldr	r3, [pc, #52]	; (8006ec8 <xTaskRemoveFromEventList+0xc0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d905      	bls.n	8006ea8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <xTaskRemoveFromEventList+0xc4>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	e001      	b.n	8006eac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006eac:	697b      	ldr	r3, [r7, #20]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000ff4 	.word	0x20000ff4
 8006ebc:	20000fd4 	.word	0x20000fd4
 8006ec0:	20000afc 	.word	0x20000afc
 8006ec4:	20000f8c 	.word	0x20000f8c
 8006ec8:	20000af8 	.word	0x20000af8
 8006ecc:	20000fe0 	.word	0x20000fe0

08006ed0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006eda:	4b29      	ldr	r3, [pc, #164]	; (8006f80 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	613b      	str	r3, [r7, #16]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	60fb      	str	r3, [r7, #12]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f7fe fac5 	bl	80054b4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fac0 	bl	80054b4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d903      	bls.n	8006f48 <vTaskRemoveFromUnorderedEventList+0x78>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	4a0f      	ldr	r2, [pc, #60]	; (8006f84 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4a0c      	ldr	r2, [pc, #48]	; (8006f88 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006f56:	441a      	add	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f7fe fa4d 	bl	80053fe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d902      	bls.n	8006f78 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
	}
}
 8006f78:	bf00      	nop
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20000ff4 	.word	0x20000ff4
 8006f84:	20000fd4 	.word	0x20000fd4
 8006f88:	20000afc 	.word	0x20000afc
 8006f8c:	20000af8 	.word	0x20000af8
 8006f90:	20000fe0 	.word	0x20000fe0

08006f94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <vTaskInternalSetTimeOutState+0x24>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <vTaskInternalSetTimeOutState+0x28>)
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	605a      	str	r2, [r3, #4]
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000fe4 	.word	0x20000fe4
 8006fbc:	20000fd0 	.word	0x20000fd0

08006fc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	613b      	str	r3, [r7, #16]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10a      	bne.n	8007002 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60fb      	str	r3, [r7, #12]
}
 8006ffe:	bf00      	nop
 8007000:	e7fe      	b.n	8007000 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007002:	f000 ff5b 	bl	8007ebc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007006:	4b1d      	ldr	r3, [pc, #116]	; (800707c <xTaskCheckForTimeOut+0xbc>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701e:	d102      	bne.n	8007026 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007020:	2300      	movs	r3, #0
 8007022:	61fb      	str	r3, [r7, #28]
 8007024:	e023      	b.n	800706e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	4b15      	ldr	r3, [pc, #84]	; (8007080 <xTaskCheckForTimeOut+0xc0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d007      	beq.n	8007042 <xTaskCheckForTimeOut+0x82>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	429a      	cmp	r2, r3
 800703a:	d302      	bcc.n	8007042 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800703c:	2301      	movs	r3, #1
 800703e:	61fb      	str	r3, [r7, #28]
 8007040:	e015      	b.n	800706e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	429a      	cmp	r2, r3
 800704a:	d20b      	bcs.n	8007064 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff ff9b 	bl	8006f94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	61fb      	str	r3, [r7, #28]
 8007062:	e004      	b.n	800706e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800706a:	2301      	movs	r3, #1
 800706c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800706e:	f000 ff55 	bl	8007f1c <vPortExitCritical>

	return xReturn;
 8007072:	69fb      	ldr	r3, [r7, #28]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3720      	adds	r7, #32
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000fd0 	.word	0x20000fd0
 8007080:	20000fe4 	.word	0x20000fe4

08007084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007088:	4b03      	ldr	r3, [pc, #12]	; (8007098 <vTaskMissedYield+0x14>)
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
}
 800708e:	bf00      	nop
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000fe0 	.word	0x20000fe0

0800709c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070a4:	f000 f854 	bl	8007150 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070a8:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <prvIdleTask+0x2c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d907      	bls.n	80070c0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80070b0:	4b06      	ldr	r3, [pc, #24]	; (80070cc <prvIdleTask+0x30>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80070c0:	f7f9 f85a 	bl	8000178 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80070c4:	e7ee      	b.n	80070a4 <prvIdleTask+0x8>
 80070c6:	bf00      	nop
 80070c8:	20000afc 	.word	0x20000afc
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070d6:	2300      	movs	r3, #0
 80070d8:	607b      	str	r3, [r7, #4]
 80070da:	e00c      	b.n	80070f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4a12      	ldr	r2, [pc, #72]	; (8007130 <prvInitialiseTaskLists+0x60>)
 80070e8:	4413      	add	r3, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe f95c 	bl	80053a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3301      	adds	r3, #1
 80070f4:	607b      	str	r3, [r7, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b37      	cmp	r3, #55	; 0x37
 80070fa:	d9ef      	bls.n	80070dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070fc:	480d      	ldr	r0, [pc, #52]	; (8007134 <prvInitialiseTaskLists+0x64>)
 80070fe:	f7fe f953 	bl	80053a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007102:	480d      	ldr	r0, [pc, #52]	; (8007138 <prvInitialiseTaskLists+0x68>)
 8007104:	f7fe f950 	bl	80053a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007108:	480c      	ldr	r0, [pc, #48]	; (800713c <prvInitialiseTaskLists+0x6c>)
 800710a:	f7fe f94d 	bl	80053a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800710e:	480c      	ldr	r0, [pc, #48]	; (8007140 <prvInitialiseTaskLists+0x70>)
 8007110:	f7fe f94a 	bl	80053a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007114:	480b      	ldr	r0, [pc, #44]	; (8007144 <prvInitialiseTaskLists+0x74>)
 8007116:	f7fe f947 	bl	80053a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <prvInitialiseTaskLists+0x78>)
 800711c:	4a05      	ldr	r2, [pc, #20]	; (8007134 <prvInitialiseTaskLists+0x64>)
 800711e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007120:	4b0a      	ldr	r3, [pc, #40]	; (800714c <prvInitialiseTaskLists+0x7c>)
 8007122:	4a05      	ldr	r2, [pc, #20]	; (8007138 <prvInitialiseTaskLists+0x68>)
 8007124:	601a      	str	r2, [r3, #0]
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000afc 	.word	0x20000afc
 8007134:	20000f5c 	.word	0x20000f5c
 8007138:	20000f70 	.word	0x20000f70
 800713c:	20000f8c 	.word	0x20000f8c
 8007140:	20000fa0 	.word	0x20000fa0
 8007144:	20000fb8 	.word	0x20000fb8
 8007148:	20000f84 	.word	0x20000f84
 800714c:	20000f88 	.word	0x20000f88

08007150 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007156:	e019      	b.n	800718c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007158:	f000 feb0 	bl	8007ebc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800715c:	4b10      	ldr	r3, [pc, #64]	; (80071a0 <prvCheckTasksWaitingTermination+0x50>)
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3304      	adds	r3, #4
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe f9a3 	bl	80054b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800716e:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <prvCheckTasksWaitingTermination+0x54>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3b01      	subs	r3, #1
 8007174:	4a0b      	ldr	r2, [pc, #44]	; (80071a4 <prvCheckTasksWaitingTermination+0x54>)
 8007176:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007178:	4b0b      	ldr	r3, [pc, #44]	; (80071a8 <prvCheckTasksWaitingTermination+0x58>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	4a0a      	ldr	r2, [pc, #40]	; (80071a8 <prvCheckTasksWaitingTermination+0x58>)
 8007180:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007182:	f000 fecb 	bl	8007f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f810 	bl	80071ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <prvCheckTasksWaitingTermination+0x58>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e1      	bne.n	8007158 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000fa0 	.word	0x20000fa0
 80071a4:	20000fcc 	.word	0x20000fcc
 80071a8:	20000fb4 	.word	0x20000fb4

080071ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d108      	bne.n	80071d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f83e 	bl	8008244 <vPortFree>
				vPortFree( pxTCB );
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 f83b 	bl	8008244 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071ce:	e018      	b.n	8007202 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d103      	bne.n	80071e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 f832 	bl	8008244 <vPortFree>
	}
 80071e0:	e00f      	b.n	8007202 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d00a      	beq.n	8007202 <prvDeleteTCB+0x56>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60fb      	str	r3, [r7, #12]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <prvDeleteTCB+0x54>
	}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007212:	4b0e      	ldr	r3, [pc, #56]	; (800724c <prvResetNextTaskUnblockTime+0x40>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <prvResetNextTaskUnblockTime+0x14>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <prvResetNextTaskUnblockTime+0x16>
 8007220:	2300      	movs	r3, #0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007226:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <prvResetNextTaskUnblockTime+0x44>)
 8007228:	f04f 32ff 	mov.w	r2, #4294967295
 800722c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800722e:	e008      	b.n	8007242 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007230:	4b06      	ldr	r3, [pc, #24]	; (800724c <prvResetNextTaskUnblockTime+0x40>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <prvResetNextTaskUnblockTime+0x44>)
 8007240:	6013      	str	r3, [r2, #0]
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr
 800724c:	20000f84 	.word	0x20000f84
 8007250:	20000fec 	.word	0x20000fec

08007254 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800725a:	4b04      	ldr	r3, [pc, #16]	; (800726c <xTaskGetCurrentTaskHandle+0x18>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007260:	687b      	ldr	r3, [r7, #4]
	}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr
 800726c:	20000af8 	.word	0x20000af8

08007270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <xTaskGetSchedulerState+0x34>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d102      	bne.n	8007284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800727e:	2301      	movs	r3, #1
 8007280:	607b      	str	r3, [r7, #4]
 8007282:	e008      	b.n	8007296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007284:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <xTaskGetSchedulerState+0x38>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800728c:	2302      	movs	r3, #2
 800728e:	607b      	str	r3, [r7, #4]
 8007290:	e001      	b.n	8007296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007296:	687b      	ldr	r3, [r7, #4]
	}
 8007298:	4618      	mov	r0, r3
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000fd8 	.word	0x20000fd8
 80072a8:	20000ff4 	.word	0x20000ff4

080072ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d056      	beq.n	8007370 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c6:	4b2d      	ldr	r3, [pc, #180]	; (800737c <xTaskPriorityInherit+0xd0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d246      	bcs.n	800735e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	db06      	blt.n	80072e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d8:	4b28      	ldr	r3, [pc, #160]	; (800737c <xTaskPriorityInherit+0xd0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6959      	ldr	r1, [r3, #20]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <xTaskPriorityInherit+0xd4>)
 80072f8:	4413      	add	r3, r2
 80072fa:	4299      	cmp	r1, r3
 80072fc:	d101      	bne.n	8007302 <xTaskPriorityInherit+0x56>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <xTaskPriorityInherit+0x58>
 8007302:	2300      	movs	r3, #0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d022      	beq.n	800734e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	3304      	adds	r3, #4
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe f8d1 	bl	80054b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007312:	4b1a      	ldr	r3, [pc, #104]	; (800737c <xTaskPriorityInherit+0xd0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	4b18      	ldr	r3, [pc, #96]	; (8007384 <xTaskPriorityInherit+0xd8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d903      	bls.n	8007330 <xTaskPriorityInherit+0x84>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	4a15      	ldr	r2, [pc, #84]	; (8007384 <xTaskPriorityInherit+0xd8>)
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	4a10      	ldr	r2, [pc, #64]	; (8007380 <xTaskPriorityInherit+0xd4>)
 800733e:	441a      	add	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3304      	adds	r3, #4
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f7fe f859 	bl	80053fe <vListInsertEnd>
 800734c:	e004      	b.n	8007358 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800734e:	4b0b      	ldr	r3, [pc, #44]	; (800737c <xTaskPriorityInherit+0xd0>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007358:	2301      	movs	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e008      	b.n	8007370 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007362:	4b06      	ldr	r3, [pc, #24]	; (800737c <xTaskPriorityInherit+0xd0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	429a      	cmp	r2, r3
 800736a:	d201      	bcs.n	8007370 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007370:	68fb      	ldr	r3, [r7, #12]
	}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000af8 	.word	0x20000af8
 8007380:	20000afc 	.word	0x20000afc
 8007384:	20000fd4 	.word	0x20000fd4

08007388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d056      	beq.n	800744c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800739e:	4b2e      	ldr	r3, [pc, #184]	; (8007458 <xTaskPriorityDisinherit+0xd0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d00a      	beq.n	80073be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	60fb      	str	r3, [r7, #12]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60bb      	str	r3, [r7, #8]
}
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	1e5a      	subs	r2, r3, #1
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d02c      	beq.n	800744c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d128      	bne.n	800744c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe f858 	bl	80054b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <xTaskPriorityDisinherit+0xd4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d903      	bls.n	800742c <xTaskPriorityDisinherit+0xa4>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4a0c      	ldr	r2, [pc, #48]	; (800745c <xTaskPriorityDisinherit+0xd4>)
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <xTaskPriorityDisinherit+0xd8>)
 800743a:	441a      	add	r2, r3
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7fd ffdb 	bl	80053fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007448:	2301      	movs	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800744c:	697b      	ldr	r3, [r7, #20]
	}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000af8 	.word	0x20000af8
 800745c:	20000fd4 	.word	0x20000fd4
 8007460:	20000afc 	.word	0x20000afc

08007464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d06f      	beq.n	800755c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	60fb      	str	r3, [r7, #12]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d902      	bls.n	80074aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	e002      	b.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d050      	beq.n	800755c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d14b      	bne.n	800755c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80074c4:	4b27      	ldr	r3, [pc, #156]	; (8007564 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d10a      	bne.n	80074e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60bb      	str	r3, [r7, #8]
}
 80074e0:	bf00      	nop
 80074e2:	e7fe      	b.n	80074e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	db04      	blt.n	8007502 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	6959      	ldr	r1, [r3, #20]
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4613      	mov	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4a15      	ldr	r2, [pc, #84]	; (8007568 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007512:	4413      	add	r3, r2
 8007514:	4299      	cmp	r1, r3
 8007516:	d101      	bne.n	800751c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d01c      	beq.n	800755c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	3304      	adds	r3, #4
 8007526:	4618      	mov	r0, r3
 8007528:	f7fd ffc4 	bl	80054b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007530:	4b0e      	ldr	r3, [pc, #56]	; (800756c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d903      	bls.n	8007540 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	4a0b      	ldr	r2, [pc, #44]	; (800756c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4a06      	ldr	r2, [pc, #24]	; (8007568 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800754e:	441a      	add	r2, r3
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	3304      	adds	r3, #4
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f7fd ff51 	bl	80053fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800755c:	bf00      	nop
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20000af8 	.word	0x20000af8
 8007568:	20000afc 	.word	0x20000afc
 800756c:	20000fd4 	.word	0x20000fd4

08007570 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007576:	4b09      	ldr	r3, [pc, #36]	; (800759c <uxTaskResetEventItemValue+0x2c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757e:	4b07      	ldr	r3, [pc, #28]	; (800759c <uxTaskResetEventItemValue+0x2c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <uxTaskResetEventItemValue+0x2c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800758c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800758e:	687b      	ldr	r3, [r7, #4]
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20000af8 	.word	0x20000af8

080075a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075a4:	4b07      	ldr	r3, [pc, #28]	; (80075c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075b2:	3201      	adds	r2, #1
 80075b4:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80075b6:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80075b8:	681b      	ldr	r3, [r3, #0]
	}
 80075ba:	4618      	mov	r0, r3
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000af8 	.word	0x20000af8

080075c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075d2:	4b21      	ldr	r3, [pc, #132]	; (8007658 <prvAddCurrentTaskToDelayedList+0x90>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075d8:	4b20      	ldr	r3, [pc, #128]	; (800765c <prvAddCurrentTaskToDelayedList+0x94>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3304      	adds	r3, #4
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fd ff68 	bl	80054b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ea:	d10a      	bne.n	8007602 <prvAddCurrentTaskToDelayedList+0x3a>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f2:	4b1a      	ldr	r3, [pc, #104]	; (800765c <prvAddCurrentTaskToDelayedList+0x94>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3304      	adds	r3, #4
 80075f8:	4619      	mov	r1, r3
 80075fa:	4819      	ldr	r0, [pc, #100]	; (8007660 <prvAddCurrentTaskToDelayedList+0x98>)
 80075fc:	f7fd feff 	bl	80053fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007600:	e026      	b.n	8007650 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4413      	add	r3, r2
 8007608:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800760a:	4b14      	ldr	r3, [pc, #80]	; (800765c <prvAddCurrentTaskToDelayedList+0x94>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	429a      	cmp	r2, r3
 8007618:	d209      	bcs.n	800762e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <prvAddCurrentTaskToDelayedList+0x9c>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b0f      	ldr	r3, [pc, #60]	; (800765c <prvAddCurrentTaskToDelayedList+0x94>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f7fd ff0c 	bl	8005444 <vListInsert>
}
 800762c:	e010      	b.n	8007650 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800762e:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b0a      	ldr	r3, [pc, #40]	; (800765c <prvAddCurrentTaskToDelayedList+0x94>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3304      	adds	r3, #4
 8007638:	4619      	mov	r1, r3
 800763a:	4610      	mov	r0, r2
 800763c:	f7fd ff02 	bl	8005444 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007640:	4b0a      	ldr	r3, [pc, #40]	; (800766c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	429a      	cmp	r2, r3
 8007648:	d202      	bcs.n	8007650 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800764a:	4a08      	ldr	r2, [pc, #32]	; (800766c <prvAddCurrentTaskToDelayedList+0xa4>)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6013      	str	r3, [r2, #0]
}
 8007650:	bf00      	nop
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20000fd0 	.word	0x20000fd0
 800765c:	20000af8 	.word	0x20000af8
 8007660:	20000fb8 	.word	0x20000fb8
 8007664:	20000f88 	.word	0x20000f88
 8007668:	20000f84 	.word	0x20000f84
 800766c:	20000fec 	.word	0x20000fec

08007670 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08a      	sub	sp, #40	; 0x28
 8007674:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800767a:	f000 facb 	bl	8007c14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800767e:	4b1c      	ldr	r3, [pc, #112]	; (80076f0 <xTimerCreateTimerTask+0x80>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d021      	beq.n	80076ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800768e:	1d3a      	adds	r2, r7, #4
 8007690:	f107 0108 	add.w	r1, r7, #8
 8007694:	f107 030c 	add.w	r3, r7, #12
 8007698:	4618      	mov	r0, r3
 800769a:	f7fd fc7d 	bl	8004f98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	9202      	str	r2, [sp, #8]
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	2302      	movs	r3, #2
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2300      	movs	r3, #0
 80076ae:	460a      	mov	r2, r1
 80076b0:	4910      	ldr	r1, [pc, #64]	; (80076f4 <xTimerCreateTimerTask+0x84>)
 80076b2:	4811      	ldr	r0, [pc, #68]	; (80076f8 <xTimerCreateTimerTask+0x88>)
 80076b4:	f7fe fe26 	bl	8006304 <xTaskCreateStatic>
 80076b8:	4603      	mov	r3, r0
 80076ba:	4a10      	ldr	r2, [pc, #64]	; (80076fc <xTimerCreateTimerTask+0x8c>)
 80076bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <xTimerCreateTimerTask+0x8c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076c6:	2301      	movs	r3, #1
 80076c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076e6:	697b      	ldr	r3, [r7, #20]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20001030 	.word	0x20001030
 80076f4:	0800859c 	.word	0x0800859c
 80076f8:	0800781d 	.word	0x0800781d
 80076fc:	20001034 	.word	0x20001034

08007700 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08a      	sub	sp, #40	; 0x28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800770e:	2300      	movs	r3, #0
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	623b      	str	r3, [r7, #32]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800772e:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <xTimerGenericCommand+0x98>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d02a      	beq.n	800778c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b05      	cmp	r3, #5
 8007746:	dc18      	bgt.n	800777a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007748:	f7ff fd92 	bl	8007270 <xTaskGetSchedulerState>
 800774c:	4603      	mov	r3, r0
 800774e:	2b02      	cmp	r3, #2
 8007750:	d109      	bne.n	8007766 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <xTimerGenericCommand+0x98>)
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	f107 0110 	add.w	r1, r7, #16
 800775a:	2300      	movs	r3, #0
 800775c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775e:	f7fe f8cb 	bl	80058f8 <xQueueGenericSend>
 8007762:	6278      	str	r0, [r7, #36]	; 0x24
 8007764:	e012      	b.n	800778c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007766:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <xTimerGenericCommand+0x98>)
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f107 0110 	add.w	r1, r7, #16
 800776e:	2300      	movs	r3, #0
 8007770:	2200      	movs	r2, #0
 8007772:	f7fe f8c1 	bl	80058f8 <xQueueGenericSend>
 8007776:	6278      	str	r0, [r7, #36]	; 0x24
 8007778:	e008      	b.n	800778c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800777a:	4b07      	ldr	r3, [pc, #28]	; (8007798 <xTimerGenericCommand+0x98>)
 800777c:	6818      	ldr	r0, [r3, #0]
 800777e:	f107 0110 	add.w	r1, r7, #16
 8007782:	2300      	movs	r3, #0
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	f7fe f9b5 	bl	8005af4 <xQueueGenericSendFromISR>
 800778a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800778e:	4618      	mov	r0, r3
 8007790:	3728      	adds	r7, #40	; 0x28
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20001030 	.word	0x20001030

0800779c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077a6:	4b1c      	ldr	r3, [pc, #112]	; (8007818 <prvProcessExpiredTimer+0x7c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fd fe7d 	bl	80054b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d122      	bne.n	8007808 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	18d1      	adds	r1, r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	6978      	ldr	r0, [r7, #20]
 80077d0:	f000 f8c8 	bl	8007964 <prvInsertTimerInActiveList>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d016      	beq.n	8007808 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077da:	2300      	movs	r3, #0
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	2300      	movs	r3, #0
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	2100      	movs	r1, #0
 80077e4:	6978      	ldr	r0, [r7, #20]
 80077e6:	f7ff ff8b 	bl	8007700 <xTimerGenericCommand>
 80077ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60fb      	str	r3, [r7, #12]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	6978      	ldr	r0, [r7, #20]
 800780e:	4798      	blx	r3
}
 8007810:	bf00      	nop
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20001028 	.word	0x20001028

0800781c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007824:	f107 0308 	add.w	r3, r7, #8
 8007828:	4618      	mov	r0, r3
 800782a:	f000 f857 	bl	80078dc <prvGetNextExpireTime>
 800782e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	4619      	mov	r1, r3
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f803 	bl	8007840 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800783a:	f000 f8d5 	bl	80079e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800783e:	e7f1      	b.n	8007824 <prvTimerTask+0x8>

08007840 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800784a:	f7ff f861 	bl	8006910 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800784e:	f107 0308 	add.w	r3, r7, #8
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f866 	bl	8007924 <prvSampleTimeNow>
 8007858:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d130      	bne.n	80078c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <prvProcessTimerOrBlockTask+0x3c>
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	429a      	cmp	r2, r3
 800786c:	d806      	bhi.n	800787c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800786e:	f7ff f85d 	bl	800692c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff ff91 	bl	800779c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800787a:	e024      	b.n	80078c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007882:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <prvProcessTimerOrBlockTask+0x90>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	bf0c      	ite	eq
 800788c:	2301      	moveq	r3, #1
 800788e:	2300      	movne	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007894:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <prvProcessTimerOrBlockTask+0x94>)
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4619      	mov	r1, r3
 80078a2:	f7fe fcfb 	bl	800629c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80078a6:	f7ff f841 	bl	800692c <xTaskResumeAll>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078b0:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <prvProcessTimerOrBlockTask+0x98>)
 80078b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	f3bf 8f6f 	isb	sy
}
 80078c0:	e001      	b.n	80078c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078c2:	f7ff f833 	bl	800692c <xTaskResumeAll>
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	2000102c 	.word	0x2000102c
 80078d4:	20001030 	.word	0x20001030
 80078d8:	e000ed04 	.word	0xe000ed04

080078dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078e4:	4b0e      	ldr	r3, [pc, #56]	; (8007920 <prvGetNextExpireTime+0x44>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d105      	bne.n	800790e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007902:	4b07      	ldr	r3, [pc, #28]	; (8007920 <prvGetNextExpireTime+0x44>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e001      	b.n	8007912 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007912:	68fb      	ldr	r3, [r7, #12]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20001028 	.word	0x20001028

08007924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800792c:	f7ff f89c 	bl	8006a68 <xTaskGetTickCount>
 8007930:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <prvSampleTimeNow+0x3c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	429a      	cmp	r2, r3
 800793a:	d205      	bcs.n	8007948 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800793c:	f000 f908 	bl	8007b50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	e002      	b.n	800794e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800794e:	4a04      	ldr	r2, [pc, #16]	; (8007960 <prvSampleTimeNow+0x3c>)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007954:	68fb      	ldr	r3, [r7, #12]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20001038 	.word	0x20001038

08007964 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	429a      	cmp	r2, r3
 8007988:	d812      	bhi.n	80079b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	1ad2      	subs	r2, r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	429a      	cmp	r2, r3
 8007996:	d302      	bcc.n	800799e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007998:	2301      	movs	r3, #1
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e01b      	b.n	80079d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800799e:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <prvInsertTimerInActiveList+0x7c>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4619      	mov	r1, r3
 80079a8:	4610      	mov	r0, r2
 80079aa:	f7fd fd4b 	bl	8005444 <vListInsert>
 80079ae:	e012      	b.n	80079d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d206      	bcs.n	80079c6 <prvInsertTimerInActiveList+0x62>
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d302      	bcc.n	80079c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
 80079c4:	e007      	b.n	80079d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079c6:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <prvInsertTimerInActiveList+0x80>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3304      	adds	r3, #4
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f7fd fd37 	bl	8005444 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079d6:	697b      	ldr	r3, [r7, #20]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	2000102c 	.word	0x2000102c
 80079e4:	20001028 	.word	0x20001028

080079e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08e      	sub	sp, #56	; 0x38
 80079ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ee:	e09d      	b.n	8007b2c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	da18      	bge.n	8007a28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079f6:	1d3b      	adds	r3, r7, #4
 80079f8:	3304      	adds	r3, #4
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10a      	bne.n	8007a18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	61fb      	str	r3, [r7, #28]
}
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a1e:	6850      	ldr	r0, [r2, #4]
 8007a20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a22:	6892      	ldr	r2, [r2, #8]
 8007a24:	4611      	mov	r1, r2
 8007a26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	db7e      	blt.n	8007b2c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd fd38 	bl	80054b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a44:	463b      	mov	r3, r7
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff ff6c 	bl	8007924 <prvSampleTimeNow>
 8007a4c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b09      	cmp	r3, #9
 8007a52:	d86a      	bhi.n	8007b2a <prvProcessReceivedCommands+0x142>
 8007a54:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <prvProcessReceivedCommands+0x74>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a85 	.word	0x08007a85
 8007a64:	08007a85 	.word	0x08007a85
 8007a68:	08007b2d 	.word	0x08007b2d
 8007a6c:	08007ae1 	.word	0x08007ae1
 8007a70:	08007b19 	.word	0x08007b19
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007a85 	.word	0x08007a85
 8007a7c:	08007b2d 	.word	0x08007b2d
 8007a80:	08007ae1 	.word	0x08007ae1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	18d1      	adds	r1, r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a92:	f7ff ff67 	bl	8007964 <prvInsertTimerInActiveList>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d047      	beq.n	8007b2c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d13f      	bne.n	8007b2c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	441a      	add	r2, r3
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	2100      	movs	r1, #0
 8007abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007abe:	f7ff fe1f 	bl	8007700 <xTimerGenericCommand>
 8007ac2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d130      	bne.n	8007b2c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	61bb      	str	r3, [r7, #24]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	617b      	str	r3, [r7, #20]
}
 8007b00:	bf00      	nop
 8007b02:	e7fe      	b.n	8007b02 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	18d1      	adds	r1, r2, r3
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b12:	f7ff ff27 	bl	8007964 <prvInsertTimerInActiveList>
					break;
 8007b16:	e009      	b.n	8007b2c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b24:	f000 fb8e 	bl	8008244 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b28:	e000      	b.n	8007b2c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007b2a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b2c:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <prvProcessReceivedCommands+0x164>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	1d39      	adds	r1, r7, #4
 8007b32:	2200      	movs	r2, #0
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe f875 	bl	8005c24 <xQueueReceive>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f47f af57 	bne.w	80079f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b42:	bf00      	nop
 8007b44:	bf00      	nop
 8007b46:	3730      	adds	r7, #48	; 0x30
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20001030 	.word	0x20001030

08007b50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b56:	e045      	b.n	8007be4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b58:	4b2c      	ldr	r3, [pc, #176]	; (8007c0c <prvSwitchTimerLists+0xbc>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b62:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <prvSwitchTimerLists+0xbc>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fd fc9f 	bl	80054b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d12e      	bne.n	8007be4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d90e      	bls.n	8007bb6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ba4:	4b19      	ldr	r3, [pc, #100]	; (8007c0c <prvSwitchTimerLists+0xbc>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4619      	mov	r1, r3
 8007bae:	4610      	mov	r0, r2
 8007bb0:	f7fd fc48 	bl	8005444 <vListInsert>
 8007bb4:	e016      	b.n	8007be4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff fd9d 	bl	8007700 <xTimerGenericCommand>
 8007bc6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	603b      	str	r3, [r7, #0]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007be4:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <prvSwitchTimerLists+0xbc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1b4      	bne.n	8007b58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bee:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <prvSwitchTimerLists+0xbc>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <prvSwitchTimerLists+0xc0>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a04      	ldr	r2, [pc, #16]	; (8007c0c <prvSwitchTimerLists+0xbc>)
 8007bfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bfc:	4a04      	ldr	r2, [pc, #16]	; (8007c10 <prvSwitchTimerLists+0xc0>)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6013      	str	r3, [r2, #0]
}
 8007c02:	bf00      	nop
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20001028 	.word	0x20001028
 8007c10:	2000102c 	.word	0x2000102c

08007c14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c1a:	f000 f94f 	bl	8007ebc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c1e:	4b15      	ldr	r3, [pc, #84]	; (8007c74 <prvCheckForValidListAndQueue+0x60>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d120      	bne.n	8007c68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c26:	4814      	ldr	r0, [pc, #80]	; (8007c78 <prvCheckForValidListAndQueue+0x64>)
 8007c28:	f7fd fbbe 	bl	80053a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c2c:	4813      	ldr	r0, [pc, #76]	; (8007c7c <prvCheckForValidListAndQueue+0x68>)
 8007c2e:	f7fd fbbb 	bl	80053a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c32:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <prvCheckForValidListAndQueue+0x6c>)
 8007c34:	4a10      	ldr	r2, [pc, #64]	; (8007c78 <prvCheckForValidListAndQueue+0x64>)
 8007c36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c38:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <prvCheckForValidListAndQueue+0x70>)
 8007c3a:	4a10      	ldr	r2, [pc, #64]	; (8007c7c <prvCheckForValidListAndQueue+0x68>)
 8007c3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4b11      	ldr	r3, [pc, #68]	; (8007c88 <prvCheckForValidListAndQueue+0x74>)
 8007c44:	4a11      	ldr	r2, [pc, #68]	; (8007c8c <prvCheckForValidListAndQueue+0x78>)
 8007c46:	2110      	movs	r1, #16
 8007c48:	200a      	movs	r0, #10
 8007c4a:	f7fd fcc5 	bl	80055d8 <xQueueGenericCreateStatic>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	4a08      	ldr	r2, [pc, #32]	; (8007c74 <prvCheckForValidListAndQueue+0x60>)
 8007c52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c54:	4b07      	ldr	r3, [pc, #28]	; (8007c74 <prvCheckForValidListAndQueue+0x60>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <prvCheckForValidListAndQueue+0x60>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	490b      	ldr	r1, [pc, #44]	; (8007c90 <prvCheckForValidListAndQueue+0x7c>)
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe faf2 	bl	800624c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c68:	f000 f958 	bl	8007f1c <vPortExitCritical>
}
 8007c6c:	bf00      	nop
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20001030 	.word	0x20001030
 8007c78:	20001000 	.word	0x20001000
 8007c7c:	20001014 	.word	0x20001014
 8007c80:	20001028 	.word	0x20001028
 8007c84:	2000102c 	.word	0x2000102c
 8007c88:	200010dc 	.word	0x200010dc
 8007c8c:	2000103c 	.word	0x2000103c
 8007c90:	080085a4 	.word	0x080085a4

08007c94 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007ca2:	f06f 0301 	mvn.w	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <xTimerPendFunctionCallFromISR+0x3c>)
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	f107 0114 	add.w	r1, r7, #20
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	f7fd ff18 	bl	8005af4 <xQueueGenericSendFromISR>
 8007cc4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3728      	adds	r7, #40	; 0x28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20001030 	.word	0x20001030

08007cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3b04      	subs	r3, #4
 8007ce4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3b04      	subs	r3, #4
 8007cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f023 0201 	bic.w	r2, r3, #1
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b04      	subs	r3, #4
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d04:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <pxPortInitialiseStack+0x54>)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3b14      	subs	r3, #20
 8007d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3b20      	subs	r3, #32
 8007d1a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr
 8007d28:	08007d2d 	.word	0x08007d2d

08007d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <prvTaskExitError+0x54>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3e:	d00a      	beq.n	8007d56 <prvTaskExitError+0x2a>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	60fb      	str	r3, [r7, #12]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <prvTaskExitError+0x28>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60bb      	str	r3, [r7, #8]
}
 8007d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d6a:	bf00      	nop
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0fc      	beq.n	8007d6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d72:	bf00      	nop
 8007d74:	bf00      	nop
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bc80      	pop	{r7}
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	20000034 	.word	0x20000034
	...

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dae:	4770      	bx	lr

08007db0 <pxCurrentTCBConst2>:
 8007db0:	20000af8 	.word	0x20000af8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007db8:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <prvPortStartFirstTask+0x1c>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	b662      	cpsie	i
 8007dc4:	b661      	cpsie	f
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	df00      	svc	0
 8007dd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dd2:	bf00      	nop
 8007dd4:	e000ed08 	.word	0xe000ed08

08007dd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dde:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <xPortStartScheduler+0xd0>)
 8007de0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	22ff      	movs	r2, #255	; 0xff
 8007dee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e06:	4b2a      	ldr	r3, [pc, #168]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e08:	2207      	movs	r2, #7
 8007e0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e0c:	e009      	b.n	8007e22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e0e:	4b28      	ldr	r3, [pc, #160]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	4a26      	ldr	r2, [pc, #152]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b80      	cmp	r3, #128	; 0x80
 8007e2c:	d0ef      	beq.n	8007e0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e2e:	4b20      	ldr	r3, [pc, #128]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1c3 0307 	rsb	r3, r3, #7
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d00a      	beq.n	8007e50 <xPortStartScheduler+0x78>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60bb      	str	r3, [r7, #8]
}
 8007e4c:	bf00      	nop
 8007e4e:	e7fe      	b.n	8007e4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e50:	4b17      	ldr	r3, [pc, #92]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e58:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e5a:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e62:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e64:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e6e:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <xPortStartScheduler+0xdc>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a10      	ldr	r2, [pc, #64]	; (8007eb4 <xPortStartScheduler+0xdc>)
 8007e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e78:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e7a:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <xPortStartScheduler+0xdc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a0d      	ldr	r2, [pc, #52]	; (8007eb4 <xPortStartScheduler+0xdc>)
 8007e80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e84:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e86:	f000 f8b9 	bl	8007ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <xPortStartScheduler+0xe0>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e90:	f7ff ff92 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e94:	f7fe feb4 	bl	8006c00 <vTaskSwitchContext>
	prvTaskExitError();
 8007e98:	f7ff ff48 	bl	8007d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	e000e400 	.word	0xe000e400
 8007eac:	2000112c 	.word	0x2000112c
 8007eb0:	20001130 	.word	0x20001130
 8007eb4:	e000ed20 	.word	0xe000ed20
 8007eb8:	20000034 	.word	0x20000034

08007ebc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	607b      	str	r3, [r7, #4]
}
 8007ed4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <vPortEnterCritical+0x58>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	4a0d      	ldr	r2, [pc, #52]	; (8007f14 <vPortEnterCritical+0x58>)
 8007ede:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ee0:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <vPortEnterCritical+0x58>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d10f      	bne.n	8007f08 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ee8:	4b0b      	ldr	r3, [pc, #44]	; (8007f18 <vPortEnterCritical+0x5c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00a      	beq.n	8007f08 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	603b      	str	r3, [r7, #0]
}
 8007f04:	bf00      	nop
 8007f06:	e7fe      	b.n	8007f06 <vPortEnterCritical+0x4a>
	}
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	20000034 	.word	0x20000034
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f22:	4b11      	ldr	r3, [pc, #68]	; (8007f68 <vPortExitCritical+0x4c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <vPortExitCritical+0x24>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	607b      	str	r3, [r7, #4]
}
 8007f3c:	bf00      	nop
 8007f3e:	e7fe      	b.n	8007f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f40:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <vPortExitCritical+0x4c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <vPortExitCritical+0x4c>)
 8007f48:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <vPortExitCritical+0x4c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <vPortExitCritical+0x42>
 8007f52:	2300      	movs	r3, #0
 8007f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	f383 8811 	msr	BASEPRI, r3
}
 8007f5c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr
 8007f68:	20000034 	.word	0x20000034
 8007f6c:	00000000 	.word	0x00000000

08007f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f70:	f3ef 8009 	mrs	r0, PSP
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <pxCurrentTCBConst>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f80:	6010      	str	r0, [r2, #0]
 8007f82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f8a:	f380 8811 	msr	BASEPRI, r0
 8007f8e:	f7fe fe37 	bl	8006c00 <vTaskSwitchContext>
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8811 	msr	BASEPRI, r0
 8007f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f9e:	6819      	ldr	r1, [r3, #0]
 8007fa0:	6808      	ldr	r0, [r1, #0]
 8007fa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fa6:	f380 8809 	msr	PSP, r0
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	4770      	bx	lr

08007fb0 <pxCurrentTCBConst>:
 8007fb0:	20000af8 	.word	0x20000af8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop

08007fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	607b      	str	r3, [r7, #4]
}
 8007fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fd2:	f7fe fd57 	bl	8006a84 <xTaskIncrementTick>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <SysTick_Handler+0x40>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f383 8811 	msr	BASEPRI, r3
}
 8007fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008000:	4b0a      	ldr	r3, [pc, #40]	; (800802c <vPortSetupTimerInterrupt+0x30>)
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008006:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <vPortSetupTimerInterrupt+0x34>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <vPortSetupTimerInterrupt+0x38>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a09      	ldr	r2, [pc, #36]	; (8008038 <vPortSetupTimerInterrupt+0x3c>)
 8008012:	fba2 2303 	umull	r2, r3, r2, r3
 8008016:	099b      	lsrs	r3, r3, #6
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <vPortSetupTimerInterrupt+0x40>)
 800801a:	3b01      	subs	r3, #1
 800801c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800801e:	4b03      	ldr	r3, [pc, #12]	; (800802c <vPortSetupTimerInterrupt+0x30>)
 8008020:	2207      	movs	r2, #7
 8008022:	601a      	str	r2, [r3, #0]
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr
 800802c:	e000e010 	.word	0xe000e010
 8008030:	e000e018 	.word	0xe000e018
 8008034:	20000028 	.word	0x20000028
 8008038:	10624dd3 	.word	0x10624dd3
 800803c:	e000e014 	.word	0xe000e014

08008040 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008046:	f3ef 8305 	mrs	r3, IPSR
 800804a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b0f      	cmp	r3, #15
 8008050:	d914      	bls.n	800807c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008052:	4a16      	ldr	r2, [pc, #88]	; (80080ac <vPortValidateInterruptPriority+0x6c>)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800805c:	4b14      	ldr	r3, [pc, #80]	; (80080b0 <vPortValidateInterruptPriority+0x70>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	7afa      	ldrb	r2, [r7, #11]
 8008062:	429a      	cmp	r2, r3
 8008064:	d20a      	bcs.n	800807c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	607b      	str	r3, [r7, #4]
}
 8008078:	bf00      	nop
 800807a:	e7fe      	b.n	800807a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800807c:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <vPortValidateInterruptPriority+0x74>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <vPortValidateInterruptPriority+0x78>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d90a      	bls.n	80080a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	603b      	str	r3, [r7, #0]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <vPortValidateInterruptPriority+0x60>
	}
 80080a2:	bf00      	nop
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	e000e3f0 	.word	0xe000e3f0
 80080b0:	2000112c 	.word	0x2000112c
 80080b4:	e000ed0c 	.word	0xe000ed0c
 80080b8:	20001130 	.word	0x20001130

080080bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080c8:	f7fe fc22 	bl	8006910 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080cc:	4b58      	ldr	r3, [pc, #352]	; (8008230 <pvPortMalloc+0x174>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080d4:	f000 f910 	bl	80082f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080d8:	4b56      	ldr	r3, [pc, #344]	; (8008234 <pvPortMalloc+0x178>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4013      	ands	r3, r2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 808e 	bne.w	8008202 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01d      	beq.n	8008128 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080ec:	2208      	movs	r2, #8
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d014      	beq.n	8008128 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f023 0307 	bic.w	r3, r3, #7
 8008104:	3308      	adds	r3, #8
 8008106:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <pvPortMalloc+0x6c>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	617b      	str	r3, [r7, #20]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d069      	beq.n	8008202 <pvPortMalloc+0x146>
 800812e:	4b42      	ldr	r3, [pc, #264]	; (8008238 <pvPortMalloc+0x17c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d864      	bhi.n	8008202 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008138:	4b40      	ldr	r3, [pc, #256]	; (800823c <pvPortMalloc+0x180>)
 800813a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800813c:	4b3f      	ldr	r3, [pc, #252]	; (800823c <pvPortMalloc+0x180>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008142:	e004      	b.n	800814e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d903      	bls.n	8008160 <pvPortMalloc+0xa4>
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f1      	bne.n	8008144 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008160:	4b33      	ldr	r3, [pc, #204]	; (8008230 <pvPortMalloc+0x174>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008166:	429a      	cmp	r2, r3
 8008168:	d04b      	beq.n	8008202 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2208      	movs	r2, #8
 8008170:	4413      	add	r3, r2
 8008172:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	2308      	movs	r3, #8
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	429a      	cmp	r2, r3
 800818a:	d91f      	bls.n	80081cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800818c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <pvPortMalloc+0xf8>
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	613b      	str	r3, [r7, #16]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081c6:	69b8      	ldr	r0, [r7, #24]
 80081c8:	f000 f8f8 	bl	80083bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081cc:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <pvPortMalloc+0x17c>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	4a18      	ldr	r2, [pc, #96]	; (8008238 <pvPortMalloc+0x17c>)
 80081d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081da:	4b17      	ldr	r3, [pc, #92]	; (8008238 <pvPortMalloc+0x17c>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b18      	ldr	r3, [pc, #96]	; (8008240 <pvPortMalloc+0x184>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d203      	bcs.n	80081ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <pvPortMalloc+0x17c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a15      	ldr	r2, [pc, #84]	; (8008240 <pvPortMalloc+0x184>)
 80081ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	4b10      	ldr	r3, [pc, #64]	; (8008234 <pvPortMalloc+0x178>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008202:	f7fe fb93 	bl	800692c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00a      	beq.n	8008226 <pvPortMalloc+0x16a>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	60fb      	str	r3, [r7, #12]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <pvPortMalloc+0x168>
	return pvReturn;
 8008226:	69fb      	ldr	r3, [r7, #28]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3728      	adds	r7, #40	; 0x28
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	2000393c 	.word	0x2000393c
 8008234:	20003948 	.word	0x20003948
 8008238:	20003940 	.word	0x20003940
 800823c:	20003934 	.word	0x20003934
 8008240:	20003944 	.word	0x20003944

08008244 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d048      	beq.n	80082e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008256:	2308      	movs	r3, #8
 8008258:	425b      	negs	r3, r3
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4413      	add	r3, r2
 800825e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	4b21      	ldr	r3, [pc, #132]	; (80082f0 <vPortFree+0xac>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4013      	ands	r3, r2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <vPortFree+0x44>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60fb      	str	r3, [r7, #12]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <vPortFree+0x62>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60bb      	str	r3, [r7, #8]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	4b11      	ldr	r3, [pc, #68]	; (80082f0 <vPortFree+0xac>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4013      	ands	r3, r2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d019      	beq.n	80082e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d115      	bne.n	80082e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <vPortFree+0xac>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	43db      	mvns	r3, r3
 80082c6:	401a      	ands	r2, r3
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082cc:	f7fe fb20 	bl	8006910 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <vPortFree+0xb0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4413      	add	r3, r2
 80082da:	4a06      	ldr	r2, [pc, #24]	; (80082f4 <vPortFree+0xb0>)
 80082dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082de:	6938      	ldr	r0, [r7, #16]
 80082e0:	f000 f86c 	bl	80083bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082e4:	f7fe fb22 	bl	800692c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082e8:	bf00      	nop
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20003948 	.word	0x20003948
 80082f4:	20003940 	.word	0x20003940

080082f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008302:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008304:	4b27      	ldr	r3, [pc, #156]	; (80083a4 <prvHeapInit+0xac>)
 8008306:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00c      	beq.n	800832c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3307      	adds	r3, #7
 8008316:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0307 	bic.w	r3, r3, #7
 800831e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	4a1f      	ldr	r2, [pc, #124]	; (80083a4 <prvHeapInit+0xac>)
 8008328:	4413      	add	r3, r2
 800832a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008330:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <prvHeapInit+0xb0>)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008336:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <prvHeapInit+0xb0>)
 8008338:	2200      	movs	r2, #0
 800833a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	4413      	add	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008344:	2208      	movs	r2, #8
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1a9b      	subs	r3, r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a15      	ldr	r2, [pc, #84]	; (80083ac <prvHeapInit+0xb4>)
 8008358:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800835a:	4b14      	ldr	r3, [pc, #80]	; (80083ac <prvHeapInit+0xb4>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2200      	movs	r2, #0
 8008360:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008362:	4b12      	ldr	r3, [pc, #72]	; (80083ac <prvHeapInit+0xb4>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	1ad2      	subs	r2, r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <prvHeapInit+0xb4>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	4a0a      	ldr	r2, [pc, #40]	; (80083b0 <prvHeapInit+0xb8>)
 8008386:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4a09      	ldr	r2, [pc, #36]	; (80083b4 <prvHeapInit+0xbc>)
 800838e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008390:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <prvHeapInit+0xc0>)
 8008392:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008396:	601a      	str	r2, [r3, #0]
}
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	bc80      	pop	{r7}
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20001134 	.word	0x20001134
 80083a8:	20003934 	.word	0x20003934
 80083ac:	2000393c 	.word	0x2000393c
 80083b0:	20003944 	.word	0x20003944
 80083b4:	20003940 	.word	0x20003940
 80083b8:	20003948 	.word	0x20003948

080083bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083c4:	4b27      	ldr	r3, [pc, #156]	; (8008464 <prvInsertBlockIntoFreeList+0xa8>)
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	e002      	b.n	80083d0 <prvInsertBlockIntoFreeList+0x14>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d8f7      	bhi.n	80083ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4413      	add	r3, r2
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d108      	bne.n	80083fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	441a      	add	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d118      	bne.n	8008444 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	4b14      	ldr	r3, [pc, #80]	; (8008468 <prvInsertBlockIntoFreeList+0xac>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d00d      	beq.n	800843a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	441a      	add	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	e008      	b.n	800844c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800843a:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <prvInsertBlockIntoFreeList+0xac>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	e003      	b.n	800844c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d002      	beq.n	800845a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800845a:	bf00      	nop
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr
 8008464:	20003934 	.word	0x20003934
 8008468:	2000393c 	.word	0x2000393c

0800846c <memset>:
 800846c:	4603      	mov	r3, r0
 800846e:	4402      	add	r2, r0
 8008470:	4293      	cmp	r3, r2
 8008472:	d100      	bne.n	8008476 <memset+0xa>
 8008474:	4770      	bx	lr
 8008476:	f803 1b01 	strb.w	r1, [r3], #1
 800847a:	e7f9      	b.n	8008470 <memset+0x4>

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	2600      	movs	r6, #0
 8008480:	4d0c      	ldr	r5, [pc, #48]	; (80084b4 <__libc_init_array+0x38>)
 8008482:	4c0d      	ldr	r4, [pc, #52]	; (80084b8 <__libc_init_array+0x3c>)
 8008484:	1b64      	subs	r4, r4, r5
 8008486:	10a4      	asrs	r4, r4, #2
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	f000 f828 	bl	80084e0 <_init>
 8008490:	2600      	movs	r6, #0
 8008492:	4d0a      	ldr	r5, [pc, #40]	; (80084bc <__libc_init_array+0x40>)
 8008494:	4c0a      	ldr	r4, [pc, #40]	; (80084c0 <__libc_init_array+0x44>)
 8008496:	1b64      	subs	r4, r4, r5
 8008498:	10a4      	asrs	r4, r4, #2
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	0800874c 	.word	0x0800874c
 80084b8:	0800874c 	.word	0x0800874c
 80084bc:	0800874c 	.word	0x0800874c
 80084c0:	08008750 	.word	0x08008750

080084c4 <memcpy>:
 80084c4:	440a      	add	r2, r1
 80084c6:	4291      	cmp	r1, r2
 80084c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084cc:	d100      	bne.n	80084d0 <memcpy+0xc>
 80084ce:	4770      	bx	lr
 80084d0:	b510      	push	{r4, lr}
 80084d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084dc:	d1f9      	bne.n	80084d2 <memcpy+0xe>
 80084de:	bd10      	pop	{r4, pc}

080084e0 <_init>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr

080084ec <_fini>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	bf00      	nop
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr
